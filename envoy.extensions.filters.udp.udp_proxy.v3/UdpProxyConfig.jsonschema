{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"stat_prefix": {"type": "string", "description": "The stat prefix used when emitting UDP proxy filter stats."}, "cluster": {"type": "string", "description": "The upstream cluster to connect to."}, "idle_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The idle timeout for sessions. Idle is defined as no datagrams between received or sent by\n the session. The default if not specified is 1 minute."}, "use_original_src_ip": {"type": "boolean", "description": "Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.\n This option requires Envoy to be run with the *CAP_NET_ADMIN* capability on Linux.\n And the IPv6 stack must be enabled on Linux kernel.\n This option does not preserve the remote downstream port.\n If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.\n This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts\n will send the packets with the remote downstream IP address as the destination. All packets will be routed\n to the remote downstream directly if there are route rules on the upstream host side.\n There are two options to return the packets back to the remote downstream.\n The first one is to use DSR (Direct Server Return).\n The other one is to configure routing rules on the upstream hosts to forward\n all packets back to Envoy and configure iptables rules on the host running Envoy to\n forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.\n If the platform does not support this option, Envoy will raise a configuration error."}, "hash_policies": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"source_ip": {"type": "boolean", "description": "The source IP will be used to compute the hash used by hash-based load balancing algorithms."}}, "additionalProperties": true, "type": "object", "description": "Specifies the UDP hash policy.\n The packets can be routed by hash policy."}, "type": "array", "description": "Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based\n load balancing algorithms will select a host randomly. Currently the number of hash policies is\n limited to 1."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: UDP proxy]\n UDP proxy :ref:`configuration overview <config_udp_listener_filters_udp_proxy>`.\n [#extension: envoy.filters.udp_listener.udp_proxy]\n\nConfiguration for the UDP proxy filter.\n [#next-free-field: 6]"}