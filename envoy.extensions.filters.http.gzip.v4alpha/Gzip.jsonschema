{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"memory_level": {"additionalProperties": true, "type": "integer", "description": "Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values\n use more memory, but are faster and produce better compression results. The default value is 5."}, "compression_level": {"enum": ["DEFAULT", 0, "BEST", 1, "SPEED", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "A value used for selecting the zlib compression level. This setting will affect speed and\n amount of compression applied to the content. \"BEST\" provides higher compression at the cost of\n higher latency, \"SPEED\" provides lower compression with minimum impact on response time.\n \"DEFAULT\" provides an optimal result between speed and compression. This field will be set to\n \"DEFAULT\" if not specified."}, "compression_strategy": {"enum": ["DEFAULT", 0, "FILTERED", 1, "HUFFMAN", 2, "RLE", 3], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "A value used for selecting the zlib compression strategy which is directly related to the\n characteristics of the content. Most of the time \"DEFAULT\" will be the best choice, though\n there are situations which changing this parameter might produce better results. For example,\n run-length encoding (RLE) is typically used when the content is known for having sequences\n which same data occurs many consecutive times. For more information about each strategy, please\n refer to zlib manual."}, "window_bits": {"additionalProperties": true, "type": "integer", "description": "Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.\n Larger window results in better compression at the expense of memory usage. The default is 12\n which will produce a 4096 bytes window. For more details about this parameter, please refer to\n zlib manual > deflateInit2."}, "compressor": {"properties": {"compressor_library": {"properties": {"name": {"type": "string", "description": "The name of an extension. This is not used to select the extension, instead\n it serves the role of an opaque identifier."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The typed config for the extension. The type URL will be used to identify\n the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,\n the inner type URL of *TypedStruct* will be utilized. See the\n :ref:`extension configuration overview\n <config_overview_extension_configuration>` for further details."}}, "additionalProperties": true, "type": "object", "description": "A compressor library to use for compression. Currently only\n :ref:`envoy.compression.gzip.compressor<envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip>`\n is included in Envoy.\n This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise."}, "request_direction_config": {"properties": {"common_config": {"$ref": "#/definitions/envoy.extensions.filters.http.compressor.v4alpha.Compressor.CommonDirectionConfig", "additionalProperties": true}}, "additionalProperties": true, "type": "object", "description": "Configuration for request compression. Compression is disabled by default if left empty."}, "response_direction_config": {"properties": {"common_config": {"$ref": "#/definitions/envoy.extensions.filters.http.compressor.v4alpha.Compressor.CommonDirectionConfig", "additionalProperties": true}, "disable_on_etag_header": {"type": "boolean", "description": "If true, disables compression when the response contains an etag header. When it is false, the\n filter will preserve weak etags and remove the ones that require strong validation."}, "remove_accept_encoding_header": {"type": "boolean", "description": "If true, removes accept-encoding from the request headers before dispatching it to the upstream\n so that responses do not get compressed before reaching the filter.\n\n .. attention::\n\n    To avoid interfering with other compression filters in the same chain use this option in\n    the filter closest to the upstream."}}, "additionalProperties": true, "type": "object", "description": "Configuration for response compression. Compression is enabled by default if left empty.\n\n .. attention::\n\n    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,\n    such as `content_length`, `content_type`, `disable_on_etag_header`,\n    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.\n\n    Also all the statistics related to response compression will be rooted in\n    `<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.response.*`\n    instead of\n    `<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.*`."}}, "additionalProperties": true, "type": "object", "description": "Set of configuration parameters common for all compression filters. If this field is set then\n the fields `content_length`, `content_type`, `disable_on_etag_header` and\n `remove_accept_encoding_header` are ignored."}, "chunk_size": {"additionalProperties": true, "type": "integer", "description": "Value for Zlib's next output buffer. If not set, defaults to 4096.\n See https://www.zlib.net/manual.html for more details. Also see\n https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Gzip]\n Gzip :ref:`configuration overview <config_http_filters_gzip>`.\n [#extension: envoy.filters.http.gzip]\n\n[#next-free-field: 12]", "definitions": {"envoy.extensions.filters.http.compressor.v4alpha.Compressor.CommonDirectionConfig": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"enabled": {"properties": {"default_value": {"additionalProperties": true, "type": "boolean", "description": "Default value if runtime value is not available."}, "runtime_key": {"type": "string", "description": "Runtime key to get value for comparison. This value is used if defined. The boolean value must\n be represented via its\n `canonical JSON encoding <https://developers.google.com/protocol-buffers/docs/proto3#json>`_."}}, "additionalProperties": true, "type": "object", "description": "Runtime flag that controls whether compression is enabled or not for the direction this\n common config is put in. If set to false, the filter will operate as a pass-through filter\n in the chosen direction. If the field is omitted, the filter will be enabled."}, "min_content_length": {"additionalProperties": true, "type": "integer", "description": "Minimum value of Content-Length header of request or response messages (depending on the direction\n this common config is put in), in bytes, which will trigger compression. The default value is 30."}, "content_type": {"items": {"type": "string"}, "type": "array", "description": "Set of strings that allows specifying which mime-types yield compression; e.g.,\n application/json, text/html, etc. When this field is not defined, compression will be applied\n to the following mime-types: \"application/javascript\", \"application/json\",\n \"application/xhtml+xml\", \"image/svg+xml\", \"text/css\", \"text/html\", \"text/plain\", \"text/xml\"\n and their synonyms."}}, "additionalProperties": true, "type": "object", "id": "envoy.extensions.filters.http.compressor.v4alpha.Compressor.CommonDirectionConfig"}}}