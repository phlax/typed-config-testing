{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Name for the route."}, "match": {"properties": {"prefix": {"type": "string", "description": "If specified, the route is a prefix rule meaning that the prefix must\n match the beginning of the *:path* header."}, "path": {"type": "string", "description": "If specified, the route is an exact path rule meaning that the path must\n exactly match the *:path* header once the query string is removed."}, "regex": {"type": "string", "description": "If specified, the route is a regular expression rule meaning that the\n regex must match the *:path* header once the query string is removed. The entire path\n (without the query string) must match the regex. The rule will not match if only a\n subsequence of the *:path* header matches the regex. The regex grammar is defined `here\n <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.\n\n Examples:\n\n * The regex ``/b[io]t`` matches the path */bit*\n * The regex ``/b[io]t`` matches the path */bot*\n * The regex ``/b[io]t`` does not match the path */bite*\n * The regex ``/b[io]t`` does not match the path */bit/bot*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex` as it is not safe for use with\n   untrusted input in all cases."}, "safe_regex": {"$ref": "#/definitions/envoy.type.matcher.RegexMatcher", "additionalProperties": true, "description": "If specified, the route is a regular expression rule meaning that the\n regex must match the *:path* header once the query string is removed. The entire path\n (without the query string) must match the regex. The rule will not match if only a\n subsequence of the *:path* header matches the regex.\n\n [#next-major-version: In the v3 API we should redo how path specification works such\n that we utilize StringMatcher, and additionally have consistent options around whether we\n strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive\n to deprecate the existing options. We should even consider whether we want to do away with\n path_specifier entirely and just rely on a set of header matchers which can already match\n on :path, etc. The issue with that is it is unclear how to generically deal with query string\n stripping. This needs more thought.]"}, "case_sensitive": {"additionalProperties": true, "type": "boolean", "description": "Indicates that prefix/path matching should be case sensitive. The default\n is true."}, "runtime_fraction": {"$ref": "#/definitions/envoy.api.v2.core.RuntimeFractionalPercent", "additionalProperties": true, "description": "Indicates that the route should additionally match on a runtime key. Every time the route\n is considered for a match, it must also fall under the percentage of matches indicated by\n this field. For some fraction N/D, a random number in the range [0,D) is selected. If the\n number is <= the value of the numerator N, or if the key is not present, the default\n value, the router continues to evaluate the remaining match criteria. A runtime_fraction\n route configuration can be used to roll out route changes in a gradual manner without full\n code/config deploys. Refer to the :ref:`traffic shifting\n <config_http_conn_man_route_table_traffic_splitting_shift>` docs for additional documentation.\n\n .. note::\n\n    Parsing this field is implemented such that the runtime key's data may be represented\n    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an\n    integer with the assumption that the value is an integral percentage out of 100. For\n    instance, a runtime key lookup returning the value \"42\" would parse as a FractionalPercent\n    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics."}, "headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.route.HeaderMatcher"}, "type": "array", "description": "Specifies a set of headers that the route should match on. The router will\n check the request\u2019s headers against all the specified headers in the route\n config. A match will happen if all the headers in the route are present in\n the request with the same values (or based on presence if the value field\n is not in the config)."}, "query_parameters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of a key that must be present in the requested\n *path*'s query string."}, "value": {"type": "string", "description": "Specifies the value of the key. If the value is absent, a request\n that contains the key in its query string will match, whether the\n key appears with a value (e.g., \"?debug=true\") or not (e.g., \"?debug\")\n\n ..attention::\n   This field is deprecated. Use an `exact` match inside the `string_match` field."}, "regex": {"additionalProperties": true, "type": "boolean", "description": "Specifies whether the query parameter value is a regular expression.\n Defaults to false. The entire query parameter value (i.e., the part to\n the right of the equals sign in \"key=value\") must match the regex.\n E.g., the regex ``\\d+$`` will match *123* but not *a123* or *123a*.\n\n ..attention::\n   This field is deprecated. Use a `safe_regex` match inside the `string_match` field."}, "string_match": {"$ref": "#/definitions/envoy.type.matcher.StringMatcher", "additionalProperties": true, "description": "Specifies whether a query parameter value should match against a string."}, "present_match": {"type": "boolean", "description": "Specifies whether a query parameter should be present."}}, "additionalProperties": true, "type": "object", "description": "Query parameter matching treats the query string of a request's :path header\n as an ampersand-separated list of keys and/or key=value elements.\n [#next-free-field: 7]"}, "type": "array", "description": "Specifies a set of URL query parameters on which the route should\n match. The router will check the query string from the *path* header\n against all the specified query parameters. If the number of specified\n query parameters is nonzero, they all must match the *path* header's\n query string for a match to occur."}, "grpc": {"additionalProperties": true, "type": "object", "description": "If specified, only gRPC requests will be matched. The router will check\n that the content-type header has a application/grpc or one of the various\n application/grpc+ values."}, "tls_context": {"properties": {"presented": {"additionalProperties": true, "type": "boolean", "description": "If specified, the route will match against whether or not a certificate is presented.\n If not specified, certificate presentation status (true or false) will not be considered when route matching."}, "validated": {"additionalProperties": true, "type": "boolean", "description": "If specified, the route will match against whether or not a certificate is validated.\n If not specified, certificate validation status (true or false) will not be considered when route matching."}}, "additionalProperties": true, "type": "object", "description": "If specified, the client tls context will be matched against the defined\n match options.\n\n [#next-major-version: unify with RBAC]"}}, "additionalProperties": true, "type": "object", "description": "Route matching parameters."}, "route": {"properties": {"cluster": {"type": "string", "description": "Indicates the upstream cluster to which the request should be routed\n to."}, "cluster_header": {"type": "string", "description": "Envoy will determine the cluster to route to by reading the value of the\n HTTP header named by cluster_header from the request headers. If the\n header is not found or the referenced cluster does not exist, Envoy will\n return a 404 response.\n\n .. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1\n   *Host* header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. note::\n\n   If the header appears multiple times only the first value is used."}, "weighted_clusters": {"properties": {"clusters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Name of the upstream cluster. The cluster must exist in the\n :ref:`cluster manager configuration <config_cluster_manager>`."}, "weight": {"additionalProperties": true, "type": "integer", "description": "An integer between 0 and :ref:`total_weight\n <envoy_api_field_route.WeightedCluster.total_weight>`. When a request matches the route,\n the choice of an upstream cluster is determined by its weight. The sum of weights across all\n entries in the clusters array must add up to the total_weight, which defaults to 100."}, "metadata_match": {"$ref": "#/definitions/envoy.api.v2.core.Metadata", "additionalProperties": true, "description": "Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in\n the upstream cluster with metadata matching what is set in this field will be considered for\n load balancing. Note that this will be merged with what's provided in\n :ref:`RouteAction.metadata_match <envoy_api_field_route.RouteAction.metadata_match>`, with\n values here taking precedence. The filter name should be specified as *envoy.lb*."}, "request_headers_to_add": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.core.HeaderValueOption"}, "type": "array", "description": "Specifies a list of headers to be added to requests when this cluster is selected\n through the enclosing :ref:`envoy_api_msg_route.RouteAction`.\n Headers specified at this level are applied before headers from the enclosing\n :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_route.VirtualHost`, and\n :ref:`envoy_api_msg_RouteConfiguration`. For more information, including details on\n header value syntax, see the documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}, "request_headers_to_remove": {"items": {"type": "string"}, "type": "array", "description": "Specifies a list of HTTP headers that should be removed from each request when\n this cluster is selected through the enclosing :ref:`envoy_api_msg_route.RouteAction`."}, "response_headers_to_add": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.core.HeaderValueOption"}, "type": "array", "description": "Specifies a list of headers to be added to responses when this cluster is selected\n through the enclosing :ref:`envoy_api_msg_route.RouteAction`.\n Headers specified at this level are applied before headers from the enclosing\n :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_route.VirtualHost`, and\n :ref:`envoy_api_msg_RouteConfiguration`. For more information, including details on\n header value syntax, see the documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}, "response_headers_to_remove": {"items": {"type": "string"}, "type": "array", "description": "Specifies a list of headers to be removed from responses when this cluster is selected\n through the enclosing :ref:`envoy_api_msg_route.RouteAction`."}, "per_filter_config": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "The per_filter_config field can be used to provide weighted cluster-specific\n configurations for filters. The key should match the filter name, such as\n *envoy.filters.http.buffer* for the HTTP buffer filter. Use of this field is filter\n specific; see the :ref:`HTTP filter documentation <config_http_filters>`\n for if and how it is utilized."}, "typed_per_filter_config": {"additionalProperties": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "The per_filter_config field can be used to provide weighted cluster-specific\n configurations for filters. The key should match the filter name, such as\n *envoy.filters.http.buffer* for the HTTP buffer filter. Use of this field is filter\n specific; see the :ref:`HTTP filter documentation <config_http_filters>`\n for if and how it is utilized."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 11]"}, "type": "array", "description": "Specifies one or more upstream clusters associated with the route."}, "total_weight": {"additionalProperties": true, "type": "integer", "description": "Specifies the total weight across all clusters. The sum of all cluster weights must equal this\n value, which must be greater than 0. Defaults to 100."}, "runtime_key_prefix": {"type": "string", "description": "Specifies the runtime key prefix that should be used to construct the\n runtime keys associated with each cluster. When the *runtime_key_prefix* is\n specified, the router will look for weights associated with each upstream\n cluster under the key *runtime_key_prefix* + \".\" + *cluster[i].name* where\n *cluster[i]* denotes an entry in the clusters array field. If the runtime\n key for the cluster does not exist, the value specified in the\n configuration file will be used as the default weight. See the :ref:`runtime documentation\n <operations_runtime>` for how key names map to the underlying implementation."}}, "additionalProperties": true, "type": "object", "description": "Multiple upstream clusters can be specified for a given route. The\n request is routed to one of the upstream clusters based on weights\n assigned to each cluster. See\n :ref:`traffic splitting <config_http_conn_man_route_table_traffic_splitting_split>`\n for additional documentation."}, "cluster_not_found_response_code": {"enum": ["SERVICE_UNAVAILABLE", 0, "NOT_FOUND", 1], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The HTTP status code to use when configured cluster is not found.\n The default response code is 503 Service Unavailable."}, "metadata_match": {"$ref": "#/definitions/envoy.api.v2.core.Metadata", "additionalProperties": true, "description": "Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints\n in the upstream cluster with metadata matching what's set in this field will be considered\n for load balancing. If using :ref:`weighted_clusters\n <envoy_api_field_route.RouteAction.weighted_clusters>`, metadata will be merged, with values\n provided there taking precedence. The filter name should be specified as *envoy.lb*."}, "prefix_rewrite": {"type": "string", "description": "Indicates that during forwarding, the matched prefix (or path) should be\n swapped with this value. This option allows application URLs to be rooted\n at a different path from those exposed at the reverse proxy layer. The router filter will\n place the original path before rewrite into the :ref:`x-envoy-original-path\n <config_http_filters_router_x-envoy-original-path>` header.\n\n Only one of *prefix_rewrite* or\n :ref:`regex_rewrite <envoy_api_field_route.RouteAction.regex_rewrite>`\n may be specified.\n\n .. attention::\n\n   Pay careful attention to the use of trailing slashes in the\n   :ref:`route's match <envoy_api_field_route.Route.match>` prefix value.\n   Stripping a prefix from a path requires multiple Routes to handle all cases. For example,\n   rewriting */prefix* to */* and */prefix/etc* to */etc* cannot be done in a single\n   :ref:`Route <envoy_api_msg_route.Route>`, as shown by the below config entries:\n\n   .. code-block:: yaml\n\n     - match:\n         prefix: \"/prefix/\"\n       route:\n         prefix_rewrite: \"/\"\n     - match:\n         prefix: \"/prefix\"\n       route:\n         prefix_rewrite: \"/\"\n\n   Having above entries in the config, requests to */prefix* will be stripped to */*, while\n   requests to */prefix/etc* will be stripped to */etc*."}, "regex_rewrite": {"properties": {"pattern": {"$ref": "#/definitions/envoy.type.matcher.RegexMatcher", "additionalProperties": true, "description": "The regular expression used to find portions of a string (hereafter called\n the \"subject string\") that should be replaced. When a new string is\n produced during the substitution operation, the new string is initially\n the same as the subject string, but then all matches in the subject string\n are replaced by the substitution string. If replacing all matches isn't\n desired, regular expression anchors can be used to ensure a single match,\n so as to replace just one occurrence of a pattern. Capture groups can be\n used in the pattern to extract portions of the subject string, and then\n referenced in the substitution string."}, "substitution": {"type": "string", "description": "The string that should be substituted into matching portions of the\n subject string during a substitution operation to produce a new string.\n Capture groups in the pattern can be referenced in the substitution\n string. Note, however, that the syntax for referring to capture groups is\n defined by the chosen regular expression engine. Google's `RE2\n <https://github.com/google/re2>`_ regular expression engine uses a\n backslash followed by the capture group number to denote a numbered\n capture group. E.g., ``\\1`` refers to capture group 1, and ``\\2`` refers\n to capture group 2."}}, "additionalProperties": true, "type": "object", "description": "Indicates that during forwarding, portions of the path that match the\n pattern should be rewritten, even allowing the substitution of capture\n groups from the pattern into the new path as specified by the rewrite\n substitution string. This is useful to allow application paths to be\n rewritten in a way that is aware of segments with variable content like\n identifiers. The router filter will place the original path as it was\n before the rewrite into the :ref:`x-envoy-original-path\n <config_http_filters_router_x-envoy-original-path>` header.\n\n Only one of :ref:`prefix_rewrite <envoy_api_field_route.RouteAction.prefix_rewrite>`\n or *regex_rewrite* may be specified.\n\n Examples using Google's `RE2 <https://github.com/google/re2>`_ engine:\n\n * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution\n   string of ``\\2/instance/\\1`` would transform ``/service/foo/v1/api``\n   into ``/v1/api/instance/foo``.\n\n * The pattern ``one`` paired with a substitution string of ``two`` would\n   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.\n\n * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of\n   ``\\1two\\2`` would replace only the first occurrence of ``one``,\n   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.\n\n * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``\n   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to\n   ``/aaa/yyy/bbb``."}, "host_rewrite": {"type": "string", "description": "Indicates that during forwarding, the host header will be swapped with\n this value."}, "auto_host_rewrite": {"additionalProperties": true, "type": "boolean", "description": "Indicates that during forwarding, the host header will be swapped with\n the hostname of the upstream host chosen by the cluster manager. This\n option is applicable only when the destination cluster for a route is of\n type *strict_dns* or *logical_dns*. Setting this to true with other cluster\n types has no effect."}, "auto_host_rewrite_header": {"type": "string", "description": "Indicates that during forwarding, the host header will be swapped with the content of given\n downstream or :ref:`custom <config_http_conn_man_headers_custom_request_headers>` header.\n If header value is empty, host header is left intact.\n\n .. attention::\n\n   Pay attention to the potential security implications of using this option. Provided header\n   must come from trusted source.\n\n .. note::\n\n   If the header appears multiple times only the first value is used."}, "timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the upstream timeout for the route. If not specified, the default is 15s. This\n spans between the point at which the entire downstream request (i.e. end-of-stream) has been\n processed and when the upstream response has been completely processed. A value of 0 will\n disable the route's timeout.\n\n .. note::\n\n   This timeout includes all retries. See also\n   :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`,\n   :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`, and the\n   :ref:`retry overview <arch_overview_http_routing_retry>`."}, "idle_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the idle timeout for the route. If not specified, there is no per-route idle timeout,\n although the connection manager wide :ref:`stream_idle_timeout\n <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.stream_idle_timeout>`\n will still apply. A value of 0 will completely disable the route's idle timeout, even if a\n connection manager stream idle timeout is configured.\n\n The idle timeout is distinct to :ref:`timeout\n <envoy_api_field_route.RouteAction.timeout>`, which provides an upper bound\n on the upstream response time; :ref:`idle_timeout\n <envoy_api_field_route.RouteAction.idle_timeout>` instead bounds the amount\n of time the request's stream may be idle.\n\n After header decoding, the idle timeout will apply on downstream and\n upstream request events. Each time an encode/decode event for headers or\n data is processed for the stream, the timer will be reset. If the timeout\n fires, the stream is terminated with a 408 Request Timeout error code if no\n upstream response header has been received, otherwise a stream reset\n occurs."}, "retry_policy": {"properties": {"retry_on": {"type": "string", "description": "Specifies the conditions under which retry takes place. These are the same\n conditions documented for :ref:`config_http_filters_router_x-envoy-retry-on` and\n :ref:`config_http_filters_router_x-envoy-retry-grpc-on`."}, "num_retries": {"additionalProperties": true, "type": "integer", "description": "Specifies the allowed number of retries. This parameter is optional and\n defaults to 1. These are the same conditions documented for\n :ref:`config_http_filters_router_x-envoy-max-retries`."}, "per_try_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies a non-zero upstream timeout per retry attempt. This parameter is optional. The\n same conditions documented for\n :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms` apply.\n\n .. note::\n\n   If left unspecified, Envoy will use the global\n   :ref:`route timeout <envoy_api_field_route.RouteAction.timeout>` for the request.\n   Consequently, when using a :ref:`5xx <config_http_filters_router_x-envoy-retry-on>` based\n   retry policy, a request that times out will not be retried as the total timeout budget\n   would have been exhausted."}, "retry_priority": {"properties": {"name": {"type": "string"}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Specifies an implementation of a RetryPriority which is used to determine the\n distribution of load across priorities used for retries. Refer to\n :ref:`retry plugin configuration <arch_overview_http_retry_plugins>` for more details."}, "retry_host_predicate": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string"}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object"}, "type": "array", "description": "Specifies a collection of RetryHostPredicates that will be consulted when selecting a host\n for retries. If any of the predicates reject the host, host selection will be reattempted.\n Refer to :ref:`retry plugin configuration <arch_overview_http_retry_plugins>` for more\n details."}, "host_selection_retry_max_attempts": {"type": "string", "description": "The maximum number of times host selection will be reattempted before giving up, at which\n point the host that was last selected will be routed to. If unspecified, this will default to\n retrying once."}, "retriable_status_codes": {"items": {"type": "integer"}, "type": "array", "description": "HTTP status codes that should trigger a retry in addition to those specified by retry_on."}, "retry_back_off": {"properties": {"base_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the base interval between retries. This parameter is required and must be greater\n than zero. Values less than 1 ms are rounded up to 1 ms.\n See :ref:`config_http_filters_router_x-envoy-max-retries` for a discussion of Envoy's\n back-off algorithm."}, "max_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the maximum interval between retries. This parameter is optional, but must be\n greater than or equal to the `base_interval` if set. The default is 10 times the\n `base_interval`. See :ref:`config_http_filters_router_x-envoy-max-retries` for a discussion\n of Envoy's back-off algorithm."}}, "additionalProperties": true, "type": "object", "description": "Specifies parameters that control retry back off. This parameter is optional, in which case the\n default base interval is 25 milliseconds or, if set, the current value of the\n `upstream.base_retry_backoff_ms` runtime parameter. The default maximum interval is 10 times\n the base interval. The documentation for :ref:`config_http_filters_router_x-envoy-max-retries`\n describes Envoy's back-off algorithm."}, "retriable_headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.route.HeaderMatcher"}, "type": "array", "description": "HTTP response headers that trigger a retry if present in the response. A retry will be\n triggered if any of the header matches match the upstream response headers.\n The field is only consulted if 'retriable-headers' retry policy is active."}, "retriable_request_headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.route.HeaderMatcher"}, "type": "array", "description": "HTTP headers which must be present in the request for retries to be attempted."}}, "additionalProperties": true, "type": "object", "description": "Indicates that the route has a retry policy. Note that if this is set,\n it'll take precedence over the virtual host level retry policy entirely\n (e.g.: policies are not merged, most internal one becomes the enforced policy)."}, "retry_policy_typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n Specifies the configuration for retry policy extension. Note that if this is set, it'll take\n precedence over the virtual host level retry policy entirely (e.g.: policies are not merged,\n most internal one becomes the enforced policy). :ref:`Retry policy <envoy_api_field_route.VirtualHost.retry_policy>`\n should not be set if this field is used."}, "request_mirror_policy": {"$ref": "#/definitions/envoy.api.v2.route.RouteAction.RequestMirrorPolicy", "additionalProperties": true, "description": "Indicates that the route has a request mirroring policy.\n\n .. attention::\n   This field has been deprecated in favor of `request_mirror_policies` which supports one or\n   more mirroring policies."}, "request_mirror_policies": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.route.RouteAction.RequestMirrorPolicy"}, "type": "array", "description": "Indicates that the route has request mirroring policies."}, "priority": {"enum": ["DEFAULT", 0, "HIGH", 1], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Optionally specifies the :ref:`routing priority <arch_overview_http_routing_priority>`."}, "rate_limits": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"stage": {"additionalProperties": true, "type": "integer", "description": "Refers to the stage set in the filter. The rate limit configuration only\n applies to filters with the same stage number. The default stage number is\n 0.\n\n .. note::\n\n   The filter supports a range of 0 - 10 inclusively for stage numbers."}, "disable_key": {"type": "string", "description": "The key to be set in runtime to disable this rate limit configuration."}, "actions": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"source_cluster": {"additionalProperties": true, "type": "object", "description": "Rate limit on source cluster."}, "destination_cluster": {"additionalProperties": true, "type": "object", "description": "Rate limit on destination cluster."}, "request_headers": {"properties": {"header_name": {"type": "string", "description": "The header name to be queried from the request headers. The header\u2019s\n value is used to populate the value of the descriptor entry for the\n descriptor_key."}, "descriptor_key": {"type": "string", "description": "The key to use in the descriptor entry."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on request headers."}, "remote_address": {"additionalProperties": true, "type": "object", "description": "Rate limit on remote address."}, "generic_key": {"properties": {"descriptor_value": {"type": "string", "description": "The value to use in the descriptor entry."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on a generic key."}, "header_value_match": {"properties": {"descriptor_value": {"type": "string", "description": "The value to use in the descriptor entry."}, "expect_match": {"additionalProperties": true, "type": "boolean", "description": "If set to true, the action will append a descriptor entry when the\n request matches the headers. If set to false, the action will append a\n descriptor entry when the request does not match the headers. The\n default value is true."}, "headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.route.HeaderMatcher"}, "type": "array", "description": "Specifies a set of headers that the rate limit action should match\n on. The action will check the request\u2019s headers against all the\n specified headers in the config. A match will happen if all the\n headers in the config are present in the request with the same values\n (or based on presence if the value field is not in the config)."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on the existence of request headers."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 7]"}, "type": "array", "description": "A list of actions that are to be applied for this rate limit configuration.\n Order matters as the actions are processed sequentially and the descriptor\n is composed by appending descriptor entries in that sequence. If an action\n cannot append a descriptor entry, no descriptor is generated for the\n configuration. See :ref:`composing actions\n <config_http_filters_rate_limit_composing_actions>` for additional documentation."}}, "additionalProperties": true, "type": "object", "description": "Global rate limiting :ref:`architecture overview <arch_overview_global_rate_limit>`."}, "type": "array", "description": "Specifies a set of rate limit configurations that could be applied to the\n route."}, "include_vh_rate_limits": {"additionalProperties": true, "type": "boolean", "description": "Specifies if the rate limit filter should include the virtual host rate\n limits. By default, if the route configured rate limits, the virtual host\n :ref:`rate_limits <envoy_api_field_route.VirtualHost.rate_limits>` are not applied to the\n request."}, "hash_policy": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"header": {"properties": {"header_name": {"type": "string", "description": "The name of the request header that will be used to obtain the hash\n key. If the request header is not present, no hash will be produced."}}, "additionalProperties": true, "type": "object", "description": "Header hash policy."}, "cookie": {"properties": {"name": {"type": "string", "description": "The name of the cookie that will be used to obtain the hash key. If the\n cookie is not present and ttl below is not set, no hash will be\n produced."}, "ttl": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "If specified, a cookie with the TTL will be generated if the cookie is\n not present. If the TTL is present and zero, the generated cookie will\n be a session cookie."}, "path": {"type": "string", "description": "The name of the path for the cookie. If no path is specified here, no path\n will be set for the cookie."}}, "additionalProperties": true, "type": "object", "description": "Cookie hash policy."}, "connection_properties": {"properties": {"source_ip": {"type": "boolean", "description": "Hash on source IP address."}}, "additionalProperties": true, "type": "object", "description": "Connection properties hash policy."}, "query_parameter": {"properties": {"name": {"type": "string", "description": "The name of the URL query parameter that will be used to obtain the hash\n key. If the parameter is not present, no hash will be produced. Query\n parameter names are case-sensitive."}}, "additionalProperties": true, "type": "object", "description": "Query parameter hash policy."}, "filter_state": {"properties": {"key": {"type": "string", "description": "The name of the Object in the per-request filterState, which is an\n Envoy::Http::Hashable object. If there is no data associated with the key,\n or the stored object is not Envoy::Http::Hashable, no hash will be produced."}}, "additionalProperties": true, "type": "object", "description": "Filter state hash policy."}, "terminal": {"type": "boolean", "description": "The flag that short-circuits the hash computing. This field provides a\n 'fallback' style of configuration: \"if a terminal policy doesn't work,\n fallback to rest of the policy list\", it saves time when the terminal\n policy works.\n\n If true, and there is already a hash computed, ignore rest of the\n list of hash polices.\n For example, if the following hash methods are configured:\n\n  ========= ========\n  specifier terminal\n  ========= ========\n  Header A  true\n  Header B  false\n  Header C  false\n  ========= ========\n\n The generateHash process ends if policy \"header A\" generates a hash, as\n it's a terminal policy."}}, "additionalProperties": true, "type": "object", "description": "Specifies the route's hashing policy if the upstream cluster uses a hashing :ref:`load balancer\n <arch_overview_load_balancing_types>`.\n [#next-free-field: 7]"}, "type": "array", "description": "Specifies a list of hash policies to use for ring hash load balancing. Each\n hash policy is evaluated individually and the combined result is used to\n route the request. The method of combination is deterministic such that\n identical lists of hash policies will produce the same hash. Since a hash\n policy examines specific parts of a request, it can fail to produce a hash\n (i.e. if the hashed header is not present). If (and only if) all configured\n hash policies fail to generate a hash, no hash will be produced for\n the route. In this case, the behavior is the same as if no hash policies\n were specified (i.e. the ring hash load balancer will choose a random\n backend). If a hash policy has the \"terminal\" attribute set to true, and\n there is already a hash generated, the hash is returned immediately,\n ignoring the rest of the hash policy list."}, "cors": {"properties": {"allow_origin": {"items": {"type": "string"}, "type": "array", "description": "Specifies the origins that will be allowed to do CORS requests.\n\n An origin is allowed if either allow_origin or allow_origin_regex match.\n\n .. attention::\n  This field has been deprecated in favor of `allow_origin_string_match`."}, "allow_origin_regex": {"items": {"type": "string"}, "type": "array", "description": "Specifies regex patterns that match allowed origins.\n\n An origin is allowed if either allow_origin or allow_origin_regex match.\n\n .. attention::\n   This field has been deprecated in favor of `allow_origin_string_match` as it is not safe for\n   use with untrusted input in all cases."}, "allow_origin_string_match": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.type.matcher.StringMatcher"}, "type": "array", "description": "Specifies string patterns that match allowed origins. An origin is allowed if any of the\n string matchers match."}, "allow_methods": {"type": "string", "description": "Specifies the content for the *access-control-allow-methods* header."}, "allow_headers": {"type": "string", "description": "Specifies the content for the *access-control-allow-headers* header."}, "expose_headers": {"type": "string", "description": "Specifies the content for the *access-control-expose-headers* header."}, "max_age": {"type": "string", "description": "Specifies the content for the *access-control-max-age* header."}, "allow_credentials": {"additionalProperties": true, "type": "boolean", "description": "Specifies whether the resource allows credentials."}, "enabled": {"additionalProperties": true, "type": "boolean", "description": "Specifies if the CORS filter is enabled. Defaults to true. Only effective on route.\n\n .. attention::\n\n   **This field is deprecated**. Set the\n   :ref:`filter_enabled<envoy_api_field_route.CorsPolicy.filter_enabled>` field instead."}, "filter_enabled": {"$ref": "#/definitions/envoy.api.v2.core.RuntimeFractionalPercent", "additionalProperties": true, "description": "Specifies the % of requests for which the CORS filter is enabled.\n\n If neither ``enabled``, ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS\n filter will be enabled for 100% of the requests.\n\n If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is\n specified, Envoy will lookup the runtime key to get the percentage of requests to filter."}, "shadow_enabled": {"$ref": "#/definitions/envoy.api.v2.core.RuntimeFractionalPercent", "additionalProperties": true, "description": "Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not\n enforced.\n\n This field is intended to be used when ``filter_enabled`` and ``enabled`` are off. One of those\n fields have to explicitly disable the filter in order for this setting to take effect.\n\n If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,\n Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate\n and track the request's *Origin* to determine if it's valid but will not enforce any policies."}}, "additionalProperties": true, "type": "object", "description": "Indicates that the route has a CORS policy."}, "max_grpc_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "If present, and the request is a gRPC request, use the\n `grpc-timeout header <https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md>`_,\n or its default value (infinity) instead of\n :ref:`timeout <envoy_api_field_route.RouteAction.timeout>`, but limit the applied timeout\n to the maximum value specified here. If configured as 0, the maximum allowed timeout for\n gRPC requests is infinity. If not configured at all, the `grpc-timeout` header is not used\n and gRPC requests time out like any other requests using\n :ref:`timeout <envoy_api_field_route.RouteAction.timeout>` or its default.\n This can be used to prevent unexpected upstream request timeouts due to potentially long\n time gaps between gRPC request and response in gRPC streaming mode.\n\n .. note::\n\n    If a timeout is specified using :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`, it takes\n    precedence over `grpc-timeout header <https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md>`_, when\n    both are present. See also\n    :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`,\n    :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`, and the\n    :ref:`retry overview <arch_overview_http_routing_retry>`."}, "grpc_timeout_offset": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "If present, Envoy will adjust the timeout provided by the `grpc-timeout` header by subtracting\n the provided duration from the header. This is useful in allowing Envoy to set its global\n timeout to be less than that of the deadline imposed by the calling client, which makes it more\n likely that Envoy will handle the timeout instead of having the call canceled by the client.\n The offset will only be applied if the provided grpc_timeout is greater than the offset. This\n ensures that the offset will only ever decrease the timeout and never set it to 0 (meaning\n infinity)."}, "upgrade_configs": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"upgrade_type": {"type": "string", "description": "The case-insensitive name of this upgrade, e.g. \"websocket\".\n For each upgrade type present in upgrade_configs, requests with\n Upgrade: [upgrade_type] will be proxied upstream."}, "enabled": {"additionalProperties": true, "type": "boolean", "description": "Determines if upgrades are available on this route. Defaults to true."}}, "additionalProperties": true, "type": "object", "description": "Allows enabling and disabling upgrades on a per-route basis.\n This overrides any enabled/disabled upgrade filter chain specified in the\n HttpConnectionManager\n :ref:`upgrade_configs\n <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.upgrade_configs>`\n but does not affect any custom filter chain specified there."}, "type": "array"}, "internal_redirect_action": {"enum": ["PASS_THROUGH_INTERNAL_REDIRECT", 0, "HANDLE_INTERNAL_REDIRECT", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "max_internal_redirects": {"additionalProperties": true, "type": "integer", "description": "An internal redirect is handled, iff the number of previous internal redirects that a\n downstream request has encountered is lower than this value, and\n :ref:`internal_redirect_action <envoy_api_field_route.RouteAction.internal_redirect_action>`\n is set to :ref:`HANDLE_INTERNAL_REDIRECT\n <envoy_api_enum_value_route.RouteAction.InternalRedirectAction.HANDLE_INTERNAL_REDIRECT>`\n In the case where a downstream request is bounced among multiple routes by internal redirect,\n the first route that hits this threshold, or has\n :ref:`internal_redirect_action <envoy_api_field_route.RouteAction.internal_redirect_action>`\n set to\n :ref:`PASS_THROUGH_INTERNAL_REDIRECT\n <envoy_api_enum_value_route.RouteAction.InternalRedirectAction.PASS_THROUGH_INTERNAL_REDIRECT>`\n will pass the redirect back to downstream.\n\n If not specified, at most one redirect will be followed."}, "hedge_policy": {"properties": {"initial_requests": {"additionalProperties": true, "type": "integer", "description": "Specifies the number of initial requests that should be sent upstream.\n Must be at least 1.\n Defaults to 1.\n [#not-implemented-hide:]"}, "additional_request_chance": {"$ref": "#/definitions/envoy.type.FractionalPercent", "additionalProperties": true, "description": "Specifies a probability that an additional upstream request should be sent\n on top of what is specified by initial_requests.\n Defaults to 0.\n [#not-implemented-hide:]"}, "hedge_on_per_try_timeout": {"type": "boolean", "description": "Indicates that a hedged request should be sent when the per-try timeout is hit.\n This means that a retry will be issued without resetting the original request, leaving multiple upstream requests in flight.\n The first request to complete successfully will be the one returned to the caller.\n\n * At any time, a successful response (i.e. not triggering any of the retry-on conditions) would be returned to the client.\n * Before per-try timeout, an error response (per retry-on conditions) would be retried immediately or returned ot the client\n   if there are no more retries left.\n * After per-try timeout, an error response would be discarded, as a retry in the form of a hedged request is already in progress.\n\n Note: For this to have effect, you must have a :ref:`RetryPolicy <envoy_api_msg_route.RetryPolicy>` that retries at least\n one error code and specifies a maximum number of retries.\n\n Defaults to false."}}, "additionalProperties": true, "type": "object", "description": "Indicates that the route has a hedge policy. Note that if this is set,\n it'll take precedence over the virtual host level hedge policy entirely\n (e.g.: policies are not merged, most internal one becomes the enforced policy)."}}, "additionalProperties": true, "type": "object", "description": "Route request to some upstream cluster."}, "redirect": {"properties": {"https_redirect": {"type": "boolean", "description": "The scheme portion of the URL will be swapped with \"https\"."}, "scheme_redirect": {"type": "string", "description": "The scheme portion of the URL will be swapped with this value."}, "host_redirect": {"type": "string", "description": "The host portion of the URL will be swapped with this value."}, "port_redirect": {"type": "integer", "description": "The port value of the URL will be swapped with this value."}, "path_redirect": {"type": "string", "description": "The path portion of the URL will be swapped with this value.\n Please note that query string in path_redirect will override the\n request's query string and will not be stripped.\n\n For example, let's say we have the following routes:\n\n - match: { path: \"/old-path-1\" }\n   redirect: { path_redirect: \"/new-path-1\" }\n - match: { path: \"/old-path-2\" }\n   redirect: { path_redirect: \"/new-path-2\", strip-query: \"true\" }\n - match: { path: \"/old-path-3\" }\n   redirect: { path_redirect: \"/new-path-3?foo=1\", strip_query: \"true\" }\n\n 1. if request uri is \"/old-path-1?bar=1\", users will be redirected to \"/new-path-1?bar=1\"\n 2. if request uri is \"/old-path-2?bar=1\", users will be redirected to \"/new-path-2\"\n 3. if request uri is \"/old-path-3?bar=1\", users will be redirected to \"/new-path-3?foo=1\""}, "prefix_rewrite": {"type": "string", "description": "Indicates that during redirection, the matched prefix (or path)\n should be swapped with this value. This option allows redirect URLs be dynamically created\n based on the request.\n\n .. attention::\n\n   Pay attention to the use of trailing slashes as mentioned in\n   :ref:`RouteAction's prefix_rewrite <envoy_api_field_route.RouteAction.prefix_rewrite>`."}, "response_code": {"enum": ["MOVED_PERMANENTLY", 0, "FOUND", 1, "SEE_OTHER", 2, "TEMPORARY_REDIRECT", 3, "PERMANENT_REDIRECT", 4], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The HTTP status code to use in the redirect response. The default response\n code is MOVED_PERMANENTLY (301)."}, "strip_query": {"type": "boolean", "description": "Indicates that during redirection, the query portion of the URL will\n be removed. Default value is false."}}, "additionalProperties": true, "type": "object", "description": "Return a redirect."}, "direct_response": {"properties": {"status": {"type": "integer", "description": "Specifies the HTTP response status to be returned."}, "body": {"properties": {"filename": {"type": "string", "description": "Local filesystem data source."}, "inline_bytes": {"type": "string", "description": "Bytes inlined in the configuration."}, "inline_string": {"type": "string", "description": "String inlined in the configuration."}}, "additionalProperties": true, "type": "object", "description": "Specifies the content of the response body. If this setting is omitted,\n no body is included in the generated response.\n\n .. note::\n\n   Headers can be specified using *response_headers_to_add* in the enclosing\n   :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_RouteConfiguration` or\n   :ref:`envoy_api_msg_route.VirtualHost`."}}, "additionalProperties": true, "type": "object", "description": "Return an arbitrary HTTP response directly, without proxying."}, "filter_action": {"properties": {"action": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n If true, a filter will define the action (e.g., it could dynamically generate the\n RouteAction)."}, "metadata": {"$ref": "#/definitions/envoy.api.v2.core.Metadata", "additionalProperties": true, "description": "The Metadata field can be used to provide additional information\n about the route. It can be used for configuration, stats, and logging.\n The metadata should go under the filter namespace that will need it.\n For instance, if the metadata is intended for the Router filter,\n the filter name should be specified as *envoy.filters.http.router*."}, "decorator": {"properties": {"operation": {"type": "string", "description": "The operation name associated with the request matched to this route. If tracing is\n enabled, this information will be used as the span name reported for this request.\n\n .. note::\n\n   For ingress (inbound) requests, or egress (outbound) responses, this value may be overridden\n   by the :ref:`x-envoy-decorator-operation\n   <config_http_filters_router_x-envoy-decorator-operation>` header."}, "propagate": {"additionalProperties": true, "type": "boolean", "description": "Whether the decorated details should be propagated to the other party. The default is true."}}, "additionalProperties": true, "type": "object", "description": "Decorator for the matched route."}, "per_filter_config": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "The per_filter_config field can be used to provide route-specific\n configurations for filters. The key should match the filter name, such as\n *envoy.filters.http.buffer* for the HTTP buffer filter. Use of this field is filter\n specific; see the :ref:`HTTP filter documentation <config_http_filters>` for\n if and how it is utilized."}, "typed_per_filter_config": {"additionalProperties": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "The typed_per_filter_config field can be used to provide route-specific\n configurations for filters. The key should match the filter name, such as\n *envoy.filters.http.buffer* for the HTTP buffer filter. Use of this field is filter\n specific; see the :ref:`HTTP filter documentation <config_http_filters>` for\n if and how it is utilized."}, "request_headers_to_add": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.core.HeaderValueOption"}, "type": "array", "description": "Specifies a set of headers that will be added to requests matching this\n route. Headers specified at this level are applied before headers from the\n enclosing :ref:`envoy_api_msg_route.VirtualHost` and\n :ref:`envoy_api_msg_RouteConfiguration`. For more information, including details on\n header value syntax, see the documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}, "request_headers_to_remove": {"items": {"type": "string"}, "type": "array", "description": "Specifies a list of HTTP headers that should be removed from each request\n matching this route."}, "response_headers_to_add": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.api.v2.core.HeaderValueOption"}, "type": "array", "description": "Specifies a set of headers that will be added to responses to requests\n matching this route. Headers specified at this level are applied before\n headers from the enclosing :ref:`envoy_api_msg_route.VirtualHost` and\n :ref:`envoy_api_msg_RouteConfiguration`. For more information, including\n details on header value syntax, see the documentation on\n :ref:`custom request headers <config_http_conn_man_headers_custom_request_headers>`."}, "response_headers_to_remove": {"items": {"type": "string"}, "type": "array", "description": "Specifies a list of HTTP headers that should be removed from each response\n to requests matching this route."}, "tracing": {"properties": {"client_sampling": {"$ref": "#/definitions/envoy.type.FractionalPercent", "additionalProperties": true, "description": "Target percentage of requests managed by this HTTP connection manager that will be force\n traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`\n header is set. This field is a direct analog for the runtime variable\n 'tracing.client_sampling' in the :ref:`HTTP Connection Manager\n <config_http_conn_man_runtime>`.\n Default: 100%"}, "random_sampling": {"$ref": "#/definitions/envoy.type.FractionalPercent", "additionalProperties": true, "description": "Target percentage of requests managed by this HTTP connection manager that will be randomly\n selected for trace generation, if not requested by the client or not forced. This field is\n a direct analog for the runtime variable 'tracing.random_sampling' in the\n :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.\n Default: 100%"}, "overall_sampling": {"$ref": "#/definitions/envoy.type.FractionalPercent", "additionalProperties": true, "description": "Target percentage of requests managed by this HTTP connection manager that will be traced\n after all other sampling checks have been applied (client-directed, force tracing, random\n sampling). This field functions as an upper limit on the total configured sampling rate. For\n instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%\n of client requests with the appropriate headers to be force traced. This field is a direct\n analog for the runtime variable 'tracing.global_enabled' in the\n :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.\n Default: 100%"}, "custom_tags": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"tag": {"type": "string", "description": "Used to populate the tag name."}, "literal": {"properties": {"value": {"type": "string", "description": "Static literal value to populate the tag value."}}, "additionalProperties": true, "type": "object", "description": "A literal custom tag."}, "environment": {"properties": {"name": {"type": "string", "description": "Environment variable name to obtain the value to populate the tag value."}, "default_value": {"type": "string", "description": "When the environment variable is not found,\n the tag value will be populated with this default value if specified,\n otherwise no tag will be populated."}}, "additionalProperties": true, "type": "object", "description": "An environment custom tag."}, "request_header": {"properties": {"name": {"type": "string", "description": "Header name to obtain the value to populate the tag value."}, "default_value": {"type": "string", "description": "When the header does not exist,\n the tag value will be populated with this default value if specified,\n otherwise no tag will be populated."}}, "additionalProperties": true, "type": "object", "description": "A request header custom tag."}, "metadata": {"properties": {"kind": {"properties": {"request": {"additionalProperties": true, "type": "object", "description": "Request kind of metadata."}, "route": {"additionalProperties": true, "type": "object", "description": "Route kind of metadata."}, "cluster": {"additionalProperties": true, "type": "object", "description": "Cluster kind of metadata."}, "host": {"additionalProperties": true, "type": "object", "description": "Host kind of metadata."}}, "additionalProperties": true, "type": "object", "description": "Specify what kind of metadata to obtain tag value from."}, "metadata_key": {"properties": {"key": {"type": "string", "description": "The key name of Metadata to retrieve the Struct from the metadata.\n Typically, it represents a builtin subsystem or custom extension."}, "path": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "If specified, use the key to retrieve the value in a Struct."}}, "additionalProperties": true, "type": "object", "description": "Specifies the segment in a path to retrieve value from Metadata.\n Currently it is only supported to specify the key, i.e. field name, as one segment of a path."}, "type": "array", "description": "The path to retrieve the Value from the Struct. It can be a prefix or a full path,\n e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,\n which depends on the particular scenario.\n\n Note: Due to that only the key type segment is supported, the path can not specify a list\n unless the list is the last segment."}}, "additionalProperties": true, "type": "object", "description": "Metadata key to define the path to retrieve the tag value."}, "default_value": {"type": "string", "description": "When no valid metadata is found,\n the tag value would be populated with this default value if specified,\n otherwise no tag would be populated."}}, "additionalProperties": true, "type": "object", "description": "A custom tag to obtain tag value from the metadata."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Custom Tag]\n\nDescribes custom tags for the active span.\n [#next-free-field: 6]"}, "type": "array", "description": "A list of custom tags with unique tag name to create tags for the active span.\n It will take effect after merging with the :ref:`corresponding configuration\n <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.custom_tags>`\n configured in the HTTP connection manager. If two tags with the same name are configured\n each in the HTTP connection manager and the route level, the one configured here takes\n priority."}}, "additionalProperties": true, "type": "object", "description": "Presence of the object defines whether the connection manager's tracing configuration\n is overridden by this route specific instance."}, "per_request_buffer_limit_bytes": {"additionalProperties": true, "type": "integer", "description": "The maximum bytes which will be buffered for retries and shadowing.\n If set, the bytes actually buffered will be the minimum value of this and the\n listener per_connection_buffer_limit_bytes."}}, "additionalProperties": true, "type": "object", "description": "A route is both a specification of how to match a request as well as an indication of what to do\n next (e.g., redirect, forward, rewrite, etc.).\n\n .. attention::\n\n   Envoy supports routing on HTTP method via :ref:`header matching\n   <envoy_api_msg_route.HeaderMatcher>`.\n [#next-free-field: 18]", "definitions": {"envoy.api.v2.core.HeaderValueOption": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"header": {"properties": {"key": {"type": "string", "description": "Header name."}, "value": {"type": "string", "description": "Header value.\n\n The same :ref:`format specifier <config_access_log_format>` as used for\n :ref:`HTTP access logging <config_access_log>` applies here, however\n unknown header values are replaced with the empty string instead of `-`."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair that this option applies to."}, "append": {"additionalProperties": true, "type": "boolean", "description": "Should the value be appended? If true (default), the value is appended to\n existing values."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair plus option to control append behavior.", "id": "envoy.api.v2.core.HeaderValueOption"}, "envoy.api.v2.core.Metadata": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter_metadata": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."}}, "additionalProperties": true, "type": "object", "description": "Metadata provides additional inputs to filters based on matched listeners,\n filter chains, routes and endpoints. It is structured as a map, usually from\n filter name (in reverse DNS format) to metadata specific to the filter. Metadata\n key-values for a filter are merged as connection and request handling occurs,\n with later values for the same key overriding earlier values.\n\n An example use of metadata is providing additional values to\n http_connection_manager in the envoy.http_connection_manager.access_log\n namespace.\n\n Another example use of metadata is to per service config info in cluster metadata, which may get\n consumed by multiple filters.\n\n For load balancing, Metadata provides a means to subset cluster endpoints.\n Endpoints have a Metadata object associated and routes contain a Metadata\n object to match against. There are some well defined metadata used today for\n this purpose:\n\n * ``{\"envoy.lb\": {\"canary\": <bool> }}`` This indicates the canary status of an\n   endpoint and is also used during header processing\n   (x-envoy-upstream-canary) and for stats purposes.\n [#next-major-version: move to type/metadata/v2]", "id": "envoy.api.v2.core.Metadata"}, "envoy.api.v2.core.RuntimeFractionalPercent": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"default_value": {"$ref": "#/definitions/envoy.type.FractionalPercent", "additionalProperties": true, "description": "Default value if the runtime value's for the numerator/denominator keys are not available."}, "runtime_key": {"type": "string", "description": "Runtime key for a YAML representation of a FractionalPercent."}}, "additionalProperties": true, "type": "object", "description": "Runtime derived FractionalPercent with defaults for when the numerator or denominator is not\n specified via a runtime key.\n\n .. note::\n\n   Parsing of the runtime key's data is implemented such that it may be represented as a\n   :ref:`FractionalPercent <envoy_api_msg_type.FractionalPercent>` proto represented as JSON/YAML\n   and may also be represented as an integer with the assumption that the value is an integral\n   percentage out of 100. For instance, a runtime key lookup returning the value \"42\" would parse\n   as a `FractionalPercent` whose numerator is 42 and denominator is HUNDRED.", "id": "envoy.api.v2.core.RuntimeFractionalPercent"}, "envoy.api.v2.route.HeaderMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "regex_match": {"type": "string", "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex. The regex grammar used in the value field is defined\n `here <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex_match` as it is not safe for use\n   with untrusted input in all cases."}, "safe_regex_match": {"$ref": "#/definitions/envoy.type.matcher.RegexMatcher", "additionalProperties": true, "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   <envoy_api_field_route.HeaderMatcher.present_match>`. i.e, a request that has the :ref:`name\n   <envoy_api_field_route.HeaderMatcher.name>` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 12]", "id": "envoy.api.v2.route.HeaderMatcher"}, "envoy.api.v2.route.RouteAction.RequestMirrorPolicy": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"cluster": {"type": "string", "description": "Specifies the cluster that requests will be mirrored to. The cluster must\n exist in the cluster manager configuration."}, "runtime_key": {"type": "string", "description": "If not specified, all requests to the target cluster will be mirrored. If\n specified, Envoy will lookup the runtime key to get the % of requests to\n mirror. Valid values are from 0 to 10000, allowing for increments of\n 0.01% of requests to be mirrored. If the runtime key is specified in the\n configuration but not present in runtime, 0 is the default and thus 0% of\n requests will be mirrored.\n\n .. attention::\n\n   **This field is deprecated**. Set the\n   :ref:`runtime_fraction\n   <envoy_api_field_route.RouteAction.RequestMirrorPolicy.runtime_fraction>`\n   field instead. Mirroring occurs if both this and\n   <envoy_api_field_route.RouteAction.RequestMirrorPolicy.runtime_fraction>`\n   are not set."}, "runtime_fraction": {"$ref": "#/definitions/envoy.api.v2.core.RuntimeFractionalPercent", "additionalProperties": true, "description": "If not specified, all requests to the target cluster will be mirrored.\n\n If specified, this field takes precedence over the `runtime_key` field and requests must also\n fall under the percentage of matches indicated by this field.\n\n For some fraction N/D, a random number in the range [0,D) is selected. If the\n number is <= the value of the numerator N, or if the key is not present, the default\n value, the request will be mirrored."}, "trace_sampled": {"additionalProperties": true, "type": "boolean", "description": "Determines if the trace span should be sampled. Defaults to true."}}, "additionalProperties": true, "type": "object", "description": "The router is capable of shadowing traffic from one cluster to another. The current\n implementation is \"fire and forget,\" meaning Envoy will not wait for the shadow cluster to\n respond before returning the response from the primary cluster. All normal statistics are\n collected for the shadow cluster making this feature useful for testing.\n\n During shadowing, the host/authority header is altered such that *-shadow* is appended. This is\n useful for logging. For example, *cluster1* becomes *cluster1-shadow*.\n\n .. note::\n\n   Shadowing will not be triggered if the primary cluster does not exist.", "id": "envoy.api.v2.route.RouteAction.RequestMirrorPolicy"}, "envoy.type.FractionalPercent": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"numerator": {"type": "integer", "description": "Specifies the numerator. Defaults to 0."}, "denominator": {"enum": ["HUNDRED", 0, "TEN_THOUSAND", 1, "MILLION", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final\n fractional percentage is capped at 1 (100%)."}}, "additionalProperties": true, "type": "object", "description": "A fractional percentage is used in cases in which for performance reasons performing floating\n point to integer conversions during randomness calculations is undesirable. The message includes\n both a numerator and denominator that together determine the final fractional value.\n\n * **Example**: 1/100 = 1%.\n * **Example**: 3/10000 = 0.03%.", "id": "envoy.type.FractionalPercent"}, "envoy.type.matcher.RegexMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"google_re2": {"properties": {"max_program_size": {"additionalProperties": true, "type": "integer", "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."}}, "additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.", "id": "envoy.type.matcher.RegexMatcher"}, "envoy.type.matcher.StringMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "regex": {"type": "string", "description": "The input string must match the regular expression specified here.\n The regex grammar is defined `here\n <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex` as it is not safe for use with\n   untrusted input in all cases."}, "safe_regex": {"$ref": "#/definitions/envoy.type.matcher.RegexMatcher", "additionalProperties": true, "description": "The input string must match the regular expression specified here."}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 7]", "id": "envoy.type.matcher.StringMatcher"}}}