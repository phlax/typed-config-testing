{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "hpack_table_size": {
            "additionalProperties": true,
            "type": "integer",
            "description": "`Maximum table size \u003chttps://httpwg.org/specs/rfc7541.html#rfc.section.4.2\u003e`_\n (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values\n range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header\n compression."
        },
        "max_concurrent_streams": {
            "additionalProperties": true,
            "type": "integer",
            "description": "`Maximum concurrent streams \u003chttps://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2\u003e`_\n allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)\n and defaults to 2147483647.\n\n For upstream connections, this also limits how many streams Envoy will initiate concurrently\n on a single connection. If the limit is reached, Envoy may queue requests or establish\n additional connections (as allowed per circuit breaker limits)."
        },
        "initial_stream_window_size": {
            "additionalProperties": true,
            "type": "integer",
            "description": "`Initial stream-level flow-control window\n \u003chttps://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2\u003e`_ size. Valid values range from 65535\n (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456\n (256 * 1024 * 1024).\n\n NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default\n window size now, so it's also the minimum.\n\n This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the\n HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to\n stop the flow of data to the codec buffers."
        },
        "initial_connection_window_size": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Similar to *initial_stream_window_size*, but for connection-level flow-control\n window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*."
        },
        "allow_connect": {
            "type": "boolean",
            "description": "Allows proxying Websocket and other upgrades over H2 connect."
        },
        "allow_metadata": {
            "type": "boolean",
            "description": "[#not-implemented-hide:] Hiding until envoy has full metadata support.\n Still under implementation. DO NOT USE.\n\n Allows metadata. See [metadata\n docs](https://github.com/envoyproxy/envoy/blob/master/source/docs/h2_metadata.md) for more\n information."
        },
        "max_outbound_frames": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Limit the number of pending outbound downstream frames of all types (frames that are waiting to\n be written into the socket). Exceeding this limit triggers flood mitigation and connection is\n terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due\n to flood mitigation. The default limit is 10000.\n NOTE: flood and abuse mitigation for upstream connections is presently enabled by the\n `envoy.reloadable_features.upstream_http2_flood_checks` flag."
        },
        "max_outbound_control_frames": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,\n preventing high memory utilization when receiving continuous stream of these frames. Exceeding\n this limit triggers flood mitigation and connection is terminated. The\n ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood\n mitigation. The default limit is 1000.\n NOTE: flood and abuse mitigation for upstream connections is presently enabled by the\n `envoy.reloadable_features.upstream_http2_flood_checks` flag."
        },
        "max_consecutive_inbound_frames_with_empty_payload": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an\n empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but\n might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``\n stat tracks the number of connections terminated due to flood mitigation.\n Setting this to 0 will terminate connection upon receiving first frame with an empty payload\n and no end stream flag. The default limit is 1.\n NOTE: flood and abuse mitigation for upstream connections is presently enabled by the\n `envoy.reloadable_features.upstream_http2_flood_checks` flag."
        },
        "max_inbound_priority_frames_per_stream": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number\n of PRIORITY frames received over the lifetime of connection exceeds the value calculated\n using this formula::\n\n     max_inbound_priority_frames_per_stream * (1 + inbound_streams)\n\n the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks\n the number of connections terminated due to flood mitigation. The default limit is 100.\n NOTE: flood and abuse mitigation for upstream connections is presently enabled by the\n `envoy.reloadable_features.upstream_http2_flood_checks` flag."
        },
        "max_inbound_window_update_frames_per_data_frame_sent": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number\n of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated\n using this formula::\n\n     1 + 2 * (inbound_streams +\n              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)\n\n the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks\n the number of connections terminated due to flood mitigation. The default limit is 10.\n Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,\n but more complex implementations that try to estimate available bandwidth require at least 2.\n NOTE: flood and abuse mitigation for upstream connections is presently enabled by the\n `envoy.reloadable_features.upstream_http2_flood_checks` flag."
        },
        "stream_error_on_invalid_http_messaging": {
            "type": "boolean",
            "description": "Allows invalid HTTP messaging and headers. When this option is disabled (default), then\n the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,\n when this option is enabled, only the offending stream is terminated.\n\n This is overridden by HCM :ref:`stream_error_on_invalid_http_messaging\n \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message\u003e`\n iff present.\n\n This is deprecated in favor of :ref:`override_stream_error_on_invalid_http_message\n \u003cenvoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message\u003e`\n\n See `RFC7540, sec. 8.1 \u003chttps://tools.ietf.org/html/rfc7540#section-8.1\u003e`_ for details."
        },
        "override_stream_error_on_invalid_http_message": {
            "additionalProperties": true,
            "type": "boolean",
            "description": "Allows invalid HTTP messaging and headers. When this option is disabled (default), then\n the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,\n when this option is enabled, only the offending stream is terminated.\n\n This overrides any HCM :ref:`stream_error_on_invalid_http_messaging\n \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message\u003e`\n\n See `RFC7540, sec. 8.1 \u003chttps://tools.ietf.org/html/rfc7540#section-8.1\u003e`_ for details."
        },
        "custom_settings_parameters": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "identifier": {
                        "additionalProperties": true,
                        "type": "integer",
                        "description": "The 16 bit parameter identifier."
                    },
                    "value": {
                        "additionalProperties": true,
                        "type": "integer",
                        "description": "The 32 bit parameter value."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": "Defines a parameter to be sent in the SETTINGS frame.\n See `RFC7540, sec. 6.5.1 \u003chttps://tools.ietf.org/html/rfc7540#section-6.5.1\u003e`_ for details."
            },
            "type": "array",
            "description": "[#not-implemented-hide:]\n Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:\n\n 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by\n Envoy.\n\n 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field\n 'allow_connect'.\n\n Note that custom parameters specified through this field can not also be set in the\n corresponding named parameters:\n\n .. code-block:: text\n\n   ID    Field Name\n   ----------------\n   0x1   hpack_table_size\n   0x3   max_concurrent_streams\n   0x4   initial_stream_window_size\n\n Collisions will trigger config validation failure on load/update. Likewise, inconsistencies\n between custom parameters with the same identifier will trigger a failure.\n\n See `IANA HTTP/2 Settings\n \u003chttps://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings\u003e`_ for\n standardized identifiers."
        },
        "connection_keepalive": {
            "properties": {
                "interval": {
                    "properties": {
                        "seconds": {
                            "type": "string",
                            "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                        },
                        "nanos": {
                            "type": "integer",
                            "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Send HTTP/2 PING frames at this period, in order to test that the connection is still alive."
                },
                "timeout": {
                    "properties": {
                        "seconds": {
                            "type": "string",
                            "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                        },
                        "nanos": {
                            "type": "integer",
                            "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "How long to wait for a response to a keepalive PING. If a response is not received within this\n time period, the connection will be aborted."
                },
                "interval_jitter": {
                    "properties": {
                        "value": {
                            "type": "number"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "A random jitter amount as a percentage of interval that will be added to each interval.\n A value of zero means there will be no jitter.\n The default value is 15%."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Send HTTP/2 PING frames to verify that the connection is still healthy. If the remote peer\n does not respond within the configured timeout, the connection will be aborted."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#next-free-field: 16]"
}