{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"keys": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filename": {"type": "string", "description": "Local filesystem data source."}, "inline_bytes": {"type": "string", "description": "Bytes inlined in the configuration."}, "inline_string": {"type": "string", "description": "String inlined in the configuration."}}, "additionalProperties": true, "type": "object", "description": "Data source consisting of either a file or an inline value."}, "type": "array", "description": "Keys for encrypting and decrypting TLS session tickets. The\n first key in the array contains the key to encrypt all new sessions created by this context.\n All keys are candidates for decrypting received tickets. This allows for easy rotation of keys\n by, for example, putting the new key first, and the previous key second.\n\n If :ref:`session_ticket_keys <envoy_api_field_extensions.transport_sockets.tls.v4alpha.DownstreamTlsContext.session_ticket_keys>`\n is not specified, the TLS library will still support resuming sessions via tickets, but it will\n use an internally-generated and managed key, so sessions cannot be resumed across hot restarts\n or on different hosts.\n\n Each key must contain exactly 80 bytes of cryptographically-secure random data. For\n example, the output of ``openssl rand 80``.\n\n .. attention::\n\n   Using this feature has serious security considerations and risks. Improper handling of keys\n   may result in loss of secrecy in connections, even if ciphers supporting perfect forward\n   secrecy are used. See https://www.imperialviolet.org/2013/06/27/botchingpfs.html for some\n   discussion. To minimize the risk, you must:\n\n   * Keep the session ticket keys at least as secure as your TLS certificate private keys\n   * Rotate session ticket keys at least daily, and preferably hourly\n   * Always generate keys using a cryptographically-secure random data source"}}, "additionalProperties": true, "type": "object"}