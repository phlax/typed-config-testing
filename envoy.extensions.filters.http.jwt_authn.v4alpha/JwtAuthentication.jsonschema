{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"providers": {"additionalProperties": {"properties": {"issuer": {"type": "string", "description": "Specify the `principal <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_ that issued\n the JWT, usually a URL or an email address.\n\n It is optional. If specified, it has to match the *iss* field in JWT.\n\n If a JWT has *iss* field and this field is specified, they have to match, otherwise the\n JWT *iss* field is not checked.\n\n Note: *JwtRequirement* :ref:`allow_missing <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing>`\n and :ref:`allow_missing_or_failed <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed>`\n are implemented differently than other *JwtRequirements*. Hence the usage of this field\n is different as follows if *allow_missing* or *allow_missing_or_failed* is used:\n\n * If a JWT has *iss* field, it needs to be specified by this field in one of *JwtProviders*.\n * If a JWT doesn't have *iss* field, one of *JwtProviders* should fill this field empty.\n * Multiple *JwtProviders* should not have same value in this field.\n\n Example: https://securetoken.google.com\n Example: 1234567-compute@developer.gserviceaccount.com"}, "audiences": {"items": {"type": "string"}, "type": "array", "description": "The list of JWT `audiences <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_ are\n allowed to access. A JWT containing any of these audiences will be accepted. If not specified,\n will not check audiences in the token.\n\n Example:\n\n .. code-block:: yaml\n\n     audiences:\n     - bookstore_android.apps.googleusercontent.com\n     - bookstore_web.apps.googleusercontent.com"}, "remote_jwks": {"properties": {"http_uri": {"properties": {"uri": {"type": "string", "description": "The HTTP server URI. It should be a full FQDN with protocol, host and path.\n\n Example:\n\n .. code-block:: yaml\n\n    uri: https://www.googleapis.com/oauth2/v1/certs"}, "cluster": {"type": "string", "description": "A cluster is created in the Envoy \"cluster_manager\" config\n section. This field specifies the cluster name.\n\n Example:\n\n .. code-block:: yaml\n\n    cluster: jwks_cluster"}, "timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Sets the maximum duration in milliseconds that a response can take to arrive upon request."}}, "additionalProperties": true, "type": "object", "description": "The HTTP URI to fetch the JWKS. For example:\n\n .. code-block:: yaml\n\n    http_uri:\n      uri: https://www.googleapis.com/oauth2/v1/certs\n      cluster: jwt.www.googleapis.com|443\n      timeout: 1s"}, "cache_duration": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Duration after which the cached JWKS should be expired. If not specified, default cache\n duration is 5 minutes."}}, "additionalProperties": true, "type": "object", "description": "JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP\n URI and how the fetched JWKS should be cached.\n\n Example:\n\n .. code-block:: yaml\n\n    remote_jwks:\n      http_uri:\n        uri: https://www.googleapis.com/oauth2/v1/certs\n        cluster: jwt.www.googleapis.com|443\n        timeout: 1s\n      cache_duration:\n        seconds: 300"}, "local_jwks": {"properties": {"filename": {"type": "string", "description": "Local filesystem data source."}, "inline_bytes": {"type": "string", "description": "Bytes inlined in the configuration."}, "inline_string": {"type": "string", "description": "String inlined in the configuration."}}, "additionalProperties": true, "type": "object", "description": "JWKS is in local data source. It could be either in a local file or embedded in the\n inline_string.\n\n Example: local file\n\n .. code-block:: yaml\n\n    local_jwks:\n      filename: /etc/envoy/jwks/jwks1.txt\n\n Example: inline_string\n\n .. code-block:: yaml\n\n    local_jwks:\n      inline_string: ACADADADADA"}, "forward": {"type": "boolean", "description": "If false, the JWT is removed in the request after a success verification. If true, the JWT is\n not removed in the request. Default value is false."}, "from_headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The HTTP header name."}, "value_prefix": {"type": "string", "description": "The value prefix. The value format is \"value_prefix<token>\"\n For example, for \"Authorization: Bearer <token>\", value_prefix=\"Bearer \" with a space at the\n end."}}, "additionalProperties": true, "type": "object", "description": "This message specifies a header location to extract JWT token."}, "type": "array", "description": "Two fields below define where to extract the JWT from an HTTP request.\n\n If no explicit location is specified, the following default locations are tried in order:\n\n 1. The Authorization header using the `Bearer schema\n <https://tools.ietf.org/html/rfc6750#section-2.1>`_. Example::\n\n    Authorization: Bearer <token>.\n\n 2. `access_token <https://tools.ietf.org/html/rfc6750#section-2.3>`_ query parameter.\n\n Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations\n its provider specified or from the default locations.\n\n Specify the HTTP headers to extract JWT token. For examples, following config:\n\n .. code-block:: yaml\n\n   from_headers:\n   - name: x-goog-iap-jwt-assertion\n\n can be used to extract token from header::\n\n   ``x-goog-iap-jwt-assertion: <JWT>``."}, "from_params": {"items": {"type": "string"}, "type": "array", "description": "JWT is sent in a query parameter. `jwt_params` represents the query parameter names.\n\n For example, if config is:\n\n .. code-block:: yaml\n\n   from_params:\n   - jwt_token\n\n The JWT format in query parameter is::\n\n    /path?jwt_token=<JWT>"}, "forward_payload_header": {"type": "string", "description": "This field specifies the header name to forward a successfully verified JWT payload to the\n backend. The forwarded data is::\n\n    base64url_encoded(jwt_payload_in_JSON)\n\n If it is not specified, the payload will not be forwarded."}, "payload_in_metadata": {"type": "string", "description": "If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata\n in the format as: *namespace* is the jwt_authn filter name as **envoy.filters.http.jwt_authn**\n The value is the *protobuf::Struct*. The value of this field will be the key for its *fields*\n and the value is the *protobuf::Struct* converted from JWT JSON payload.\n\n For example, if payload_in_metadata is *my_payload*:\n\n .. code-block:: yaml\n\n   envoy.filters.http.jwt_authn:\n     my_payload:\n       iss: https://example.com\n       sub: test@example.com\n       aud: https://example.com\n       exp: 1501281058"}, "clock_skew_seconds": {"type": "integer", "description": "Specify the clock skew in seconds when verifying JWT time constraint,\n such as `exp`, and `nbf`. If not specified, default is 60 seconds."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Map of provider names to JwtProviders.\n\n .. code-block:: yaml\n\n   providers:\n     provider1:\n        issuer: issuer1\n        audiences:\n        - audience1\n        - audience2\n        remote_jwks:\n          http_uri:\n            uri: https://example.com/.well-known/jwks.json\n            cluster: example_jwks_cluster\n            timeout: 1s\n      provider2:\n        issuer: provider2\n        local_jwks:\n          inline_string: jwks_string"}, "rules": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"match": {"properties": {"prefix": {"type": "string", "description": "If specified, the route is a prefix rule meaning that the prefix must\n match the beginning of the *:path* header."}, "path": {"type": "string", "description": "If specified, the route is an exact path rule meaning that the path must\n exactly match the *:path* header once the query string is removed."}, "safe_regex": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/RegexMatcher.jsonschema", "additionalProperties": true, "description": "If specified, the route is a regular expression rule meaning that the\n regex must match the *:path* header once the query string is removed. The entire path\n (without the query string) must match the regex. The rule will not match if only a\n subsequence of the *:path* header matches the regex.\n\n [#next-major-version: In the v3 API we should redo how path specification works such\n that we utilize StringMatcher, and additionally have consistent options around whether we\n strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive\n to deprecate the existing options. We should even consider whether we want to do away with\n path_specifier entirely and just rely on a set of header matchers which can already match\n on :path, etc. The issue with that is it is unclear how to generically deal with query string\n stripping. This needs more thought.]"}, "connect_matcher": {"additionalProperties": true, "type": "object", "description": "If this is used as the matcher, the matcher will only match CONNECT requests.\n Note that this will not match HTTP/2 upgrade-style CONNECT requests\n (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style\n upgrades.\n This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,\n where Extended CONNECT requests may have a path, the path matchers will work if\n there is a path present.\n Note that CONNECT support is currently considered alpha in Envoy.\n [#comment:TODO(htuch): Replace the above comment with an alpha tag."}, "case_sensitive": {"additionalProperties": true, "type": "boolean", "description": "Indicates that prefix/path matching should be case sensitive. The default\n is true."}, "runtime_fraction": {"properties": {"default_value": {"properties": {"numerator": {"type": "integer", "description": "Specifies the numerator. Defaults to 0."}, "denominator": {"enum": ["HUNDRED", 0, "TEN_THOUSAND", 1, "MILLION", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final\n fractional percentage is capped at 1 (100%)."}}, "additionalProperties": true, "type": "object", "description": "Default value if the runtime value's for the numerator/denominator keys are not available."}, "runtime_key": {"type": "string", "description": "Runtime key for a YAML representation of a FractionalPercent."}}, "additionalProperties": true, "type": "object", "description": "Indicates that the route should additionally match on a runtime key. Every time the route\n is considered for a match, it must also fall under the percentage of matches indicated by\n this field. For some fraction N/D, a random number in the range [0,D) is selected. If the\n number is <= the value of the numerator N, or if the key is not present, the default\n value, the router continues to evaluate the remaining match criteria. A runtime_fraction\n route configuration can be used to roll out route changes in a gradual manner without full\n code/config deploys. Refer to the :ref:`traffic shifting\n <config_http_conn_man_route_table_traffic_splitting_shift>` docs for additional documentation.\n\n .. note::\n\n    Parsing this field is implemented such that the runtime key's data may be represented\n    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an\n    integer with the assumption that the value is an integral percentage out of 100. For\n    instance, a runtime key lookup returning the value \"42\" would parse as a FractionalPercent\n    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics."}, "headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "safe_regex_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/RegexMatcher.jsonschema", "additionalProperties": true, "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "contains_match": {"type": "string", "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   <envoy_api_field_config.route.v4alpha.HeaderMatcher.present_match>`. i.e, a request that has the :ref:`name\n   <envoy_api_field_config.route.v4alpha.HeaderMatcher.name>` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 13]"}, "type": "array", "description": "Specifies a set of headers that the route should match on. The router will\n check the request\u2019s headers against all the specified headers in the route\n config. A match will happen if all the headers in the route are present in\n the request with the same values (or based on presence if the value field\n is not in the config)."}, "query_parameters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of a key that must be present in the requested\n *path*'s query string."}, "string_match": {"properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "safe_regex": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/RegexMatcher.jsonschema", "additionalProperties": true, "description": "The input string must match the regular expression specified here."}, "contains": {"type": "string", "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "Specifies whether a query parameter value should match against a string."}, "present_match": {"type": "boolean", "description": "Specifies whether a query parameter should be present."}}, "additionalProperties": true, "type": "object", "description": "Query parameter matching treats the query string of a request's :path header\n as an ampersand-separated list of keys and/or key=value elements.\n [#next-free-field: 7]"}, "type": "array", "description": "Specifies a set of URL query parameters on which the route should\n match. The router will check the query string from the *path* header\n against all the specified query parameters. If the number of specified\n query parameters is nonzero, they all must match the *path* header's\n query string for a match to occur."}, "grpc": {"additionalProperties": true, "type": "object", "description": "If specified, only gRPC requests will be matched. The router will check\n that the content-type header has a application/grpc or one of the various\n application/grpc+ values."}, "tls_context": {"properties": {"presented": {"additionalProperties": true, "type": "boolean", "description": "If specified, the route will match against whether or not a certificate is presented.\n If not specified, certificate presentation status (true or false) will not be considered when route matching."}, "validated": {"additionalProperties": true, "type": "boolean", "description": "If specified, the route will match against whether or not a certificate is validated.\n If not specified, certificate validation status (true or false) will not be considered when route matching."}}, "additionalProperties": true, "type": "object", "description": "If specified, the client tls context will be matched against the defined\n match options.\n\n [#next-major-version: unify with RBAC]"}}, "additionalProperties": true, "type": "object", "description": "The route matching parameter. Only when the match is satisfied, the \"requires\" field will\n apply.\n\n For example: following match will match all requests.\n\n .. code-block:: yaml\n\n    match:\n      prefix: /"}, "requires": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.extensions.filters.http.jwt_authn.v4alpha/JwtRequirement.jsonschema", "additionalProperties": true, "description": "Specify a Jwt requirement. Please see detail comment in message JwtRequirement."}, "requirement_name": {"type": "string", "description": "Use requirement_name to specify a Jwt requirement.\n This requirement_name MUST be specified at the\n :ref:`requirement_map <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtAuthentication.requirement_map>`\n in `JwtAuthentication`."}}, "additionalProperties": true, "type": "object", "description": "This message specifies a Jwt requirement for a specific Route condition.\n Example 1:\n\n .. code-block:: yaml\n\n    - match:\n        prefix: /healthz\n\n In above example, \"requires\" field is empty for /healthz prefix match,\n it means that requests matching the path prefix don't require JWT authentication.\n\n Example 2:\n\n .. code-block:: yaml\n\n    - match:\n        prefix: /\n      requires: { provider_name: provider-A }\n\n In above example, all requests matched the path prefix require jwt authentication\n from \"provider-A\"."}, "type": "array", "description": "Specifies requirements based on the route matches. The first matched requirement will be\n applied. If there are overlapped match conditions, please put the most specific match first.\n\n Examples\n\n .. code-block:: yaml\n\n   rules:\n     - match:\n         prefix: /healthz\n     - match:\n         prefix: /baz\n       requires:\n         provider_name: provider1\n     - match:\n         prefix: /foo\n       requires:\n         requires_any:\n           requirements:\n             - provider_name: provider1\n             - provider_name: provider2\n     - match:\n         prefix: /bar\n       requires:\n         requires_all:\n           requirements:\n             - provider_name: provider1\n             - provider_name: provider2"}, "filter_state_rules": {"properties": {"name": {"type": "string", "description": "The filter state name to retrieve the `Router::StringAccessor` object."}, "requires": {"additionalProperties": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.extensions.filters.http.jwt_authn.v4alpha/JwtRequirement.jsonschema", "additionalProperties": true}, "type": "object", "description": "A map of string keys to requirements. The string key is the string value\n in the FilterState with the name specified in the *name* field above."}}, "additionalProperties": true, "type": "object", "description": "This message specifies Jwt requirements based on stream_info.filterState.\n Other HTTP filters can use it to specify Jwt requirements dynamically.\n The *rules* field above is checked first, if it could not find any matches,\n check this one."}, "bypass_cors_preflight": {"type": "boolean", "description": "When set to true, bypass the `CORS preflight request\n <http://www.w3.org/TR/cors/#cross-origin-request-with-preflight>`_ regardless of JWT\n requirements specified in the rules."}, "requirement_map": {"additionalProperties": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.extensions.filters.http.jwt_authn.v4alpha/JwtRequirement.jsonschema", "additionalProperties": true}, "type": "object", "description": "A map of unique requirement_names to JwtRequirements.\n :ref:`requirement_name <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.PerRouteConfig.requirement_name>`\n in `PerRouteConfig` uses this map to specify a JwtRequirement."}}, "additionalProperties": true, "type": "object", "description": "This is the Envoy HTTP filter config for JWT authentication.\n\n For example:\n\n .. code-block:: yaml\n\n   providers:\n      provider1:\n        issuer: issuer1\n        audiences:\n        - audience1\n        - audience2\n        remote_jwks:\n          http_uri:\n            uri: https://example.com/.well-known/jwks.json\n            cluster: example_jwks_cluster\n            timeout: 1s\n      provider2:\n        issuer: issuer2\n        local_jwks:\n          inline_string: jwks_string\n\n   rules:\n      # Not jwt verification is required for /health path\n      - match:\n          prefix: /health\n\n      # Jwt verification for provider1 is required for path prefixed with \"prefix\"\n      - match:\n          prefix: /prefix\n        requires:\n          provider_name: provider1\n\n      # Jwt verification for either provider1 or provider2 is required for all other requests.\n      - match:\n          prefix: /\n        requires:\n          requires_any:\n            requirements:\n              - provider_name: provider1\n              - provider_name: provider2\n\n [#next-free-field: 6]", "definitions": {"envoy.extensions.filters.http.jwt_authn.v4alpha.JwtRequirement": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"provider_name": {"type": "string", "description": "Specify a required provider name."}, "provider_and_audiences": {"properties": {"provider_name": {"type": "string", "description": "Specify a required provider name."}, "audiences": {"items": {"type": "string"}, "type": "array", "description": "This field overrides the one specified in the JwtProvider."}}, "additionalProperties": true, "type": "object", "description": "Specify a required provider with audiences."}, "requires_any": {"properties": {"requirements": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.extensions.filters.http.jwt_authn.v4alpha/JwtRequirement.jsonschema"}, "type": "array", "description": "Specify a list of JwtRequirement."}}, "additionalProperties": true, "type": "object", "description": "Specify list of JwtRequirement. Their results are OR-ed.\n If any one of them passes, the result is passed."}, "requires_all": {"properties": {"requirements": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.extensions.filters.http.jwt_authn.v4alpha/JwtRequirement.jsonschema"}, "type": "array", "description": "Specify a list of JwtRequirement."}}, "additionalProperties": true, "type": "object", "description": "Specify list of JwtRequirement. Their results are AND-ed.\n All of them must pass, if one of them fails or missing, it fails."}, "allow_missing_or_failed": {"additionalProperties": true, "type": "object", "description": "The requirement is always satisfied even if JWT is missing or the JWT\n verification fails. A typical usage is: this filter is used to only verify\n JWTs and pass the verified JWT payloads to another filter, the other filter\n will make decision. In this mode, all JWT tokens will be verified."}, "allow_missing": {"additionalProperties": true, "type": "object", "description": "The requirement is satisfied if JWT is missing, but failed if JWT is\n presented but invalid. Similar to allow_missing_or_failed, this is used\n to only verify JWTs and pass the verified payload to another filter. The\n different is this mode will reject requests with invalid tokens."}}, "additionalProperties": true, "type": "object", "description": "This message specifies a Jwt requirement. An empty message means JWT verification is not\n required. Here are some config examples:\n\n .. code-block:: yaml\n\n  # Example 1: not required with an empty message\n\n  # Example 2: require A\n  provider_name: provider-A\n\n  # Example 3: require A or B\n  requires_any:\n    requirements:\n      - provider_name: provider-A\n      - provider_name: provider-B\n\n  # Example 4: require A and B\n  requires_all:\n    requirements:\n      - provider_name: provider-A\n      - provider_name: provider-B\n\n  # Example 5: require A and (B or C)\n  requires_all:\n    requirements:\n      - provider_name: provider-A\n      - requires_any:\n        requirements:\n          - provider_name: provider-B\n          - provider_name: provider-C\n\n  # Example 6: require A or (B and C)\n  requires_any:\n    requirements:\n      - provider_name: provider-A\n      - requires_all:\n        requirements:\n          - provider_name: provider-B\n          - provider_name: provider-C\n\n  # Example 7: A is optional (if token from A is provided, it must be valid, but also allows\n  missing token.)\n  requires_any:\n    requirements:\n    - provider_name: provider-A\n    - allow_missing: {}\n\n  # Example 8: A is optional and B is required.\n  requires_all:\n    requirements:\n    - requires_any:\n        requirements:\n        - provider_name: provider-A\n        - allow_missing: {}\n    - provider_name: provider-B\n\n [#next-free-field: 7]", "id": "envoy.extensions.filters.http.jwt_authn.v4alpha.JwtRequirement"}, "envoy.type.matcher.v4alpha.RegexMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"google_re2": {"additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.", "id": "envoy.type.matcher.v4alpha.RegexMatcher"}}}