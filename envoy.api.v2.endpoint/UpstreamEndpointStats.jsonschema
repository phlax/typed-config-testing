{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address": {"properties": {"socket_address": {"properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_core.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_core.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_core.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object"}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Upstream host address."}, "metadata": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Opaque and implementation dependent metadata of the\n endpoint. Envoy will pass this directly to the management server."}, "total_successful_requests": {"type": "string", "description": "The total number of requests successfully completed by the endpoints in the\n locality. These include non-5xx responses for HTTP, where errors\n originate at the client and the endpoint responded successfully. For gRPC,\n the grpc-status values are those not covered by total_error_requests below."}, "total_requests_in_progress": {"type": "string", "description": "The total number of unfinished requests for this endpoint."}, "total_error_requests": {"type": "string", "description": "The total number of requests that failed due to errors at the endpoint.\n For HTTP these are responses with 5xx status codes and for gRPC the\n grpc-status values:\n\n   - DeadlineExceeded\n   - Unimplemented\n   - Internal\n   - Unavailable\n   - Unknown\n   - DataLoss"}, "total_issued_requests": {"type": "string", "description": "The total number of requests that were issued to this endpoint\n since the last report. A single TCP connection, HTTP or gRPC\n request or stream is counted as one request."}, "load_metric_stats": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"metric_name": {"type": "string", "description": "Name of the metric; may be empty."}, "num_requests_finished_with_metric": {"type": "string", "description": "Number of calls that finished and included this metric."}, "total_metric_value": {"type": "number", "description": "Sum of metric values across all calls that finished with this metric for\n load_reporting_interval."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] Not configuration. TBD how to doc proto APIs."}, "type": "array", "description": "Stats for multi-dimensional load balancing."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.\n [#next-free-field: 8]"}