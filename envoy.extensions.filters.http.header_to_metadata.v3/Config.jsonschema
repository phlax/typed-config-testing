{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "request_rules": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "$ref": "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule"
            },
            "type": "array",
            "description": "The list of rules to apply to requests."
        },
        "response_rules": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "$ref": "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule"
            },
            "type": "array",
            "description": "The list of rules to apply to responses."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: Header-To-Metadata Filter]\n\n The configuration for transforming headers into metadata. This is useful\n for matching load balancer subsets, logging, etc.\n\n Header to Metadata :ref:`configuration overview \u003cconfig_http_filters_header_to_metadata\u003e`.\n [#extension: envoy.filters.http.header_to_metadata]",
    "definitions": {
        "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "metadata_namespace": {
                    "type": "string",
                    "description": "The namespace — if this is empty, the filter's namespace will be used."
                },
                "key": {
                    "type": "string",
                    "description": "The key to use within the namespace."
                },
                "value": {
                    "type": "string",
                    "description": "The value to pair with the given key.\n\n When used for a\n :ref:`on_header_present \u003cenvoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present\u003e`\n case, if value is non-empty it'll be used instead of the header value. If both are empty, no metadata is added.\n\n When used for a :ref:`on_header_missing \u003cenvoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing\u003e`\n case, a non-empty value must be provided otherwise no metadata is added."
                },
                "regex_value_rewrite": {
                    "properties": {
                        "pattern": {
                            "properties": {
                                "google_re2": {
                                    "properties": {
                                        "max_program_size": {
                                            "additionalProperties": true,
                                            "type": "integer",
                                            "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "Google's RE2 regex engine."
                                },
                                "regex": {
                                    "type": "string",
                                    "description": "The regex match string. The string must be supported by the configured engine."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "The regular expression used to find portions of a string (hereafter called\n the \"subject string\") that should be replaced. When a new string is\n produced during the substitution operation, the new string is initially\n the same as the subject string, but then all matches in the subject string\n are replaced by the substitution string. If replacing all matches isn't\n desired, regular expression anchors can be used to ensure a single match,\n so as to replace just one occurrence of a pattern. Capture groups can be\n used in the pattern to extract portions of the subject string, and then\n referenced in the substitution string."
                        },
                        "substitution": {
                            "type": "string",
                            "description": "The string that should be substituted into matching portions of the\n subject string during a substitution operation to produce a new string.\n Capture groups in the pattern can be referenced in the substitution\n string. Note, however, that the syntax for referring to capture groups is\n defined by the chosen regular expression engine. Google's `RE2\n \u003chttps://github.com/google/re2\u003e`_ regular expression engine uses a\n backslash followed by the capture group number to denote a numbered\n capture group. E.g., ``\\1`` refers to capture group 1, and ``\\2`` refers\n to capture group 2."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If present, the header's value will be matched and substituted with this. If there is no match or substitution, the header value\n is used as-is.\n\n This is only used for :ref:`on_header_present \u003cenvoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present\u003e`.\n\n Note: if the `value` field is non-empty this field should be empty."
                },
                "type": {
                    "enum": [
                        "STRING",
                        0,
                        "NUMBER",
                        1,
                        "PROTOBUF_VALUE",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "description": "The value's type — defaults to string."
                },
                "encode": {
                    "enum": [
                        "NONE",
                        0,
                        "BASE64",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "description": "How is the value encoded, default is NONE (not encoded).\n The value will be decoded accordingly before storing to metadata."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#next-free-field: 7]",
            "id": "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair"
        },
        "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "header": {
                    "type": "string",
                    "description": "Specifies that a match will be performed on the value of a header or a cookie.\n\n The header to be extracted."
                },
                "cookie": {
                    "type": "string",
                    "description": "The cookie to be extracted."
                },
                "on_header_present": {
                    "$ref": "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair",
                    "additionalProperties": true,
                    "description": "If the header or cookie is present, apply this metadata KeyValuePair.\n\n If the value in the KeyValuePair is non-empty, it'll be used instead\n of the header or cookie value."
                },
                "on_header_missing": {
                    "$ref": "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair",
                    "additionalProperties": true,
                    "description": "If the header or cookie is not present, apply this metadata KeyValuePair.\n\n The value in the KeyValuePair must be set, since it'll be used in lieu\n of the missing header or cookie value."
                },
                "remove": {
                    "type": "boolean",
                    "description": "Whether or not to remove the header after a rule is applied.\n\n This prevents headers from leaking.\n This field is not supported in case of a cookie."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "A Rule defines what metadata to apply when a header is present or missing.\n [#next-free-field: 6]",
            "id": "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule"
        }
    }
}