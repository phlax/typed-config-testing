{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"rbac": {"properties": {"rules": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/RBAC.jsonschema", "additionalProperties": true, "description": "Specify the RBAC rules to be applied globally.\n If absent, no enforcing RBAC policy will be applied."}, "shadow_rules": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/RBAC.jsonschema", "additionalProperties": true, "description": "Shadow rules are not enforced by the filter (i.e., returning a 403)\n but will emit stats and logs and can be used for rule testing.\n If absent, no shadow RBAC policy will be applied."}}, "additionalProperties": true, "type": "object", "description": "Override the global configuration of the filter with this new config.\n If absent, the global RBAC policy will be disabled for this route."}}, "additionalProperties": true, "type": "object", "definitions": {"envoy.config.core.v4alpha.CidrRange": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address_prefix": {"type": "string", "description": "IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``."}, "prefix_len": {"additionalProperties": true, "type": "integer", "description": "Length of prefix, e.g. 0, 32."}}, "additionalProperties": true, "type": "object", "description": "CidrRange specifies an IP Address and a prefix length to construct\n the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.", "id": "envoy.config.core.v4alpha.CidrRange"}, "envoy.config.rbac.v4alpha.Permission": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"and_rules": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha.Permission/Set.jsonschema", "additionalProperties": true, "description": "A set of rules that all must match in order to define the action."}, "or_rules": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha.Permission/Set.jsonschema", "additionalProperties": true, "description": "A set of rules where at least one must match in order to define the action."}, "any": {"type": "boolean", "description": "When any is set, it matches any action."}, "header": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.route.v4alpha/HeaderMatcher.jsonschema", "additionalProperties": true, "description": "A header (or pseudo-header such as :path or :method) on the incoming HTTP request. Only\n available for HTTP request.\n Note: the pseudo-header :path includes the query and fragment string. Use the `url_path`\n field if you want to match the URL path without the query and fragment string."}, "url_path": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/PathMatcher.jsonschema", "additionalProperties": true, "description": "A URL path on the incoming HTTP request. Only available for HTTP."}, "destination_ip": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/CidrRange.jsonschema", "additionalProperties": true, "description": "A CIDR block that describes the destination IP."}, "destination_port": {"type": "integer", "description": "A port number that describes the destination port connecting to."}, "metadata": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/MetadataMatcher.jsonschema", "additionalProperties": true, "description": "Metadata that describes additional information about the action."}, "not_rule": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/Permission.jsonschema", "additionalProperties": true, "description": "Negates matching the provided permission. For instance, if the value of\n `not_rule` would match, this permission would not match. Conversely, if\n the value of `not_rule` would not match, this permission would match."}, "requested_server_name": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/StringMatcher.jsonschema", "additionalProperties": true, "description": "The request server from the client's connection request. This is\n typically TLS SNI.\n\n .. attention::\n\n   The behavior of this field may be affected by how Envoy is configured\n   as explained below.\n\n   * If the :ref:`TLS Inspector <config_listener_filters_tls_inspector>`\n     filter is not added, and if a `FilterChainMatch` is not defined for\n     the :ref:`server name\n     <envoy_api_field_config.listener.v4alpha.FilterChainMatch.server_names>`,\n     a TLS connection's requested SNI server name will be treated as if it\n     wasn't present.\n\n   * A :ref:`listener filter <arch_overview_listener_filters>` may\n     overwrite a connection's requested server name within Envoy.\n\n Please refer to :ref:`this FAQ entry <faq_how_to_setup_sni>` to learn to\n setup SNI."}}, "additionalProperties": true, "type": "object", "description": "Permission defines an action (or actions) that a principal can take.\n [#next-free-field: 11]", "id": "envoy.config.rbac.v4alpha.Permission"}, "envoy.config.rbac.v4alpha.Permission.Set": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"rules": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/Permission.jsonschema"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,\n each are applied with the associated behavior.", "id": "envoy.config.rbac.v4alpha.Permission.Set"}, "envoy.config.rbac.v4alpha.Principal": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"and_ids": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha.Principal/Set.jsonschema", "additionalProperties": true, "description": "A set of identifiers that all must match in order to define the\n downstream."}, "or_ids": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha.Principal/Set.jsonschema", "additionalProperties": true, "description": "A set of identifiers at least one must match in order to define the\n downstream."}, "any": {"type": "boolean", "description": "When any is set, it matches any downstream."}, "authenticated": {"properties": {"principal_name": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/StringMatcher.jsonschema", "additionalProperties": true, "description": "The name of the principal. If set, The URI SAN or DNS SAN in that order\n is used from the certificate, otherwise the subject field is used. If\n unset, it applies to any user that is authenticated."}}, "additionalProperties": true, "type": "object", "description": "Authenticated attributes that identify the downstream."}, "direct_remote_ip": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/CidrRange.jsonschema", "additionalProperties": true, "description": "A CIDR block that describes the downstream remote/origin address.\n Note: This is always the physical peer even if the\n :ref:`remote_ip <envoy_api_field_config.rbac.v4alpha.Principal.remote_ip>` is\n inferred from for example the x-forwarder-for header, proxy protocol,\n etc."}, "remote_ip": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/CidrRange.jsonschema", "additionalProperties": true, "description": "A CIDR block that describes the downstream remote/origin address.\n Note: This may not be the physical peer and could be different from the\n :ref:`direct_remote_ip\n <envoy_api_field_config.rbac.v4alpha.Principal.direct_remote_ip>`. E.g, if the\n remote ip is inferred from for example the x-forwarder-for header, proxy\n protocol, etc."}, "header": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.route.v4alpha/HeaderMatcher.jsonschema", "additionalProperties": true, "description": "A header (or pseudo-header such as :path or :method) on the incoming HTTP\n request. Only available for HTTP request. Note: the pseudo-header :path\n includes the query and fragment string. Use the `url_path` field if you\n want to match the URL path without the query and fragment string."}, "url_path": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/PathMatcher.jsonschema", "additionalProperties": true, "description": "A URL path on the incoming HTTP request. Only available for HTTP."}, "metadata": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/MetadataMatcher.jsonschema", "additionalProperties": true, "description": "Metadata that describes additional information about the principal."}, "not_id": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/Principal.jsonschema", "additionalProperties": true, "description": "Negates matching the provided principal. For instance, if the value of\n `not_id` would match, this principal would not match. Conversely, if the\n value of `not_id` would not match, this principal would match."}}, "additionalProperties": true, "type": "object", "description": "Principal defines an identity or a group of identities for a downstream\n subject.\n [#next-free-field: 12]", "id": "envoy.config.rbac.v4alpha.Principal"}, "envoy.config.rbac.v4alpha.Principal.Set": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"ids": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/Principal.jsonschema"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Used in the `and_ids` and `or_ids` fields in the `identifier` oneof.\n Depending on the context, each are applied with the associated behavior.", "id": "envoy.config.rbac.v4alpha.Principal.Set"}, "envoy.config.rbac.v4alpha.RBAC": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"action": {"enum": ["ALLOW", 0, "DENY", 1, "LOG", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The action to take if a policy matches. Every action either allows or denies a request,\n and can also carry out action-specific operations.\n\n Actions:\n\n  * ALLOW: Allows the request if and only if there is a policy that matches\n    the request.\n  * DENY: Allows the request if and only if there are no policies that\n    match the request.\n  * LOG: Allows all requests. If at least one policy matches, the dynamic\n    metadata key `access_log_hint` is set to the value `true` under the shared\n    key namespace 'envoy.common'. If no policies match, it is set to `false`.\n    Other actions do not modify this key."}, "policies": {"additionalProperties": {"properties": {"permissions": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/Permission.jsonschema"}, "type": "array", "description": "Required. The set of permissions that define a role. Each permission is\n matched with OR semantics. To match all actions for this policy, a single\n Permission with the `any` field set to true should be used."}, "principals": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.rbac.v4alpha/Principal.jsonschema"}, "type": "array", "description": "Required. The set of principals that are assigned/denied the role based on\n \u201caction\u201d. Each principal is matched with OR semantics. To match all\n downstreams for this policy, a single Principal with the `any` field set to\n true should be used."}, "condition": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An optional symbolic expression specifying an access control\n :ref:`condition <arch_overview_condition>`. The condition is combined\n with the permissions and the principals as a clause with AND semantics.\n Only be used when checked_condition is not used."}, "checked_condition": {"properties": {"reference_map": {"additionalProperties": {"properties": {"name": {"type": "string", "description": "The fully qualified name of the declaration."}, "overload_id": {"items": {"type": "string"}, "type": "array", "description": "For references to functions, this is a list of `Overload.overload_id`\n values which match according to typing rules.\n\n If the list has more than one element, overload resolution among the\n presented candidates must happen at runtime because of dynamic types. The\n type checker attempts to narrow down this list as much as possible.\n\n Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl]."}, "value": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Constant.jsonschema", "additionalProperties": true, "description": "For references to constants, this may contain the value of the\n constant if known at compile time."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "A map from expression ids to resolved references.\n\n The following entries are in this table:\n\n - An Ident or Select expression is represented here if it resolves to a\n   declaration. For instance, if `a.b.c` is represented by\n   `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,\n   while `c` is a field selection, then the reference is attached to the\n   nested select expression (but not to the id or or the outer select).\n   In turn, if `a` resolves to a declaration and `b.c` are field selections,\n   the reference is attached to the ident expression.\n - Every Call expression has an entry here, identifying the function being\n   called.\n - Every CreateStruct expression for a message has an entry, identifying\n   the message."}, "type_map": {"additionalProperties": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema", "additionalProperties": true}, "type": "object", "description": "A map from expression ids to types.\n\n Every expression node which has a type different than DYN has a mapping\n here. If an expression has type DYN, it is omitted from this map to save\n space."}, "source_info": {"properties": {"syntax_version": {"type": "string", "description": "The syntax version of the source, e.g. `cel1`."}, "location": {"type": "string", "description": "The location name. All position information attached to an expression is\n relative to this location.\n\n The location could be a file, UI element, or similar. For example,\n `acme/app/AnvilPolicy.cel`."}, "line_offsets": {"items": {"type": "integer"}, "type": "array", "description": "Monotonically increasing list of character offsets where newlines appear.\n\n The line number of a given position is the index `i` where for a given\n `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The\n column may be derivd from `id_positions[id] - line_offsets[i]`."}, "positions": {"additionalProperties": {"type": "integer"}, "type": "object", "description": "A map from the parse node id (e.g. `Expr.id`) to the character offset\n within source."}, "macro_calls": {"additionalProperties": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true}, "type": "object", "description": "A map from the parse node id where a macro replacement was made to the\n call `Expr` that resulted in a macro expansion.\n\n For example, `has(value.field)` is a function call that is replaced by a\n `test_only` field selection in the AST. Likewise, the call\n `list.exists(e, e > 10)` translates to a comprehension expression. The key\n in the map corresponds to the expression id of the expanded macro, and the\n value is the call `Expr` that was replaced."}}, "additionalProperties": true, "type": "object", "description": "The source info derived from input that generated the parsed `expr` and\n any optimizations made during the type-checking pass."}, "expr": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The checked expression. Semantically equivalent to the parsed `expr`, but\n may have structural differences."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n An optional symbolic expression that has been successfully type checked.\n Only be used when condition is not used."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Maps from policy name to policy. A match occurs when at least one policy matches the request."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Role Based Access Control (RBAC)]\n\nRole Based Access Control (RBAC) provides service-level and method-level access control for a\n service. RBAC policies are additive. The policies are examined in order. Requests are allowed\n or denied based on the `action` and whether a matching policy is found. For instance, if the\n action is ALLOW and a matching policy is found the request should be allowed.\n\n RBAC can also be used to make access logging decisions by communicating with access loggers\n through dynamic metadata. When the action is LOG and at least one policy matches, the\n `access_log_hint` value in the shared key namespace 'envoy.common' is set to `true` indicating\n the request should be logged.\n\n Here is an example of RBAC configuration. It has two policies:\n\n * Service account \"cluster.local/ns/default/sa/admin\" has full access to the service, and so\n   does \"cluster.local/ns/default/sa/superuser\".\n\n * Any user can read (\"GET\") the service at paths with prefix \"/products\", so long as the\n   destination port is either 80 or 443.\n\n  .. code-block:: yaml\n\n   action: ALLOW\n   policies:\n     \"service-admin\":\n       permissions:\n         - any: true\n       principals:\n         - authenticated:\n             principal_name:\n               exact: \"cluster.local/ns/default/sa/admin\"\n         - authenticated:\n             principal_name:\n               exact: \"cluster.local/ns/default/sa/superuser\"\n     \"product-viewer\":\n       permissions:\n           - and_rules:\n               rules:\n                 - header: { name: \":method\", exact_match: \"GET\" }\n                 - url_path:\n                     path: { prefix: \"/products\" }\n                 - or_rules:\n                     rules:\n                       - destination_port: 80\n                       - destination_port: 443\n       principals:\n         - any: true", "id": "envoy.config.rbac.v4alpha.RBAC"}, "envoy.config.route.v4alpha.HeaderMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "safe_regex_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/RegexMatcher.jsonschema", "additionalProperties": true, "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "contains_match": {"type": "string", "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   <envoy_api_field_config.route.v4alpha.HeaderMatcher.present_match>`. i.e, a request that has the :ref:`name\n   <envoy_api_field_config.route.v4alpha.HeaderMatcher.name>` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 13]", "id": "envoy.config.route.v4alpha.HeaderMatcher"}, "envoy.type.matcher.v4alpha.MetadataMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter": {"type": "string", "description": "The filter name to retrieve the Struct from the Metadata."}, "path": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "If specified, use the key to retrieve the value in a Struct."}}, "additionalProperties": true, "type": "object", "description": "Specifies the segment in a path to retrieve value from Metadata.\n Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that\n if the segment key refers to a list, it has to be the last segment in a path."}, "type": "array", "description": "The path to retrieve the Value from the Struct."}, "value": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/ValueMatcher.jsonschema", "additionalProperties": true, "description": "The MetadataMatcher is matched if the value retrieved by path is matched to this value."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Metadata matcher]\n\nMetadataMatcher provides a general interface to check if a given value is matched in\n :ref:`Metadata <envoy_api_msg_config.core.v4alpha.Metadata>`. It uses `filter` and `path` to retrieve the value\n from the Metadata and then check if it's matched to the specified value.\n\n For example, for the following Metadata:\n\n .. code-block:: yaml\n\n    filter_metadata:\n      envoy.filters.http.rbac:\n        fields:\n          a:\n            struct_value:\n              fields:\n                b:\n                  struct_value:\n                    fields:\n                      c:\n                        string_value: pro\n                t:\n                  list_value:\n                    values:\n                      - string_value: m\n                      - string_value: n\n\n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value \"pro\"\n from the Metadata which is matched to the specified prefix match.\n\n .. code-block:: yaml\n\n    filter: envoy.filters.http.rbac\n    path:\n    - key: a\n    - key: b\n    - key: c\n    value:\n      string_match:\n        prefix: pr\n\n The following MetadataMatcher is matched as the code will match one of the string values in the\n list at the path [a, t].\n\n .. code-block:: yaml\n\n    filter: envoy.filters.http.rbac\n    path:\n    - key: a\n    - key: t\n    value:\n      list_match:\n        one_of:\n          string_match:\n            exact: m\n\n An example use of MetadataMatcher is specifying additional metadata in envoy.filters.http.rbac to\n enforce access control based on dynamic metadata in a request. See :ref:`Permission\n <envoy_api_msg_config.rbac.v4alpha.Permission>` and :ref:`Principal\n <envoy_api_msg_config.rbac.v4alpha.Principal>`.\n\n[#next-major-version: MetadataMatcher should use StructMatcher]", "id": "envoy.type.matcher.v4alpha.MetadataMatcher"}, "envoy.type.matcher.v4alpha.PathMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"path": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/StringMatcher.jsonschema", "additionalProperties": true, "description": "The `path` must match the URL path portion of the :path header. The query and fragment\n string (if present) are removed in the URL path portion.\n For example, the path */data* will match the *:path* header */data#fragment?param=value*."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Path matcher]\n\nSpecifies the way to match a path on HTTP request.", "id": "envoy.type.matcher.v4alpha.PathMatcher"}, "envoy.type.matcher.v4alpha.RegexMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"google_re2": {"additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.", "id": "envoy.type.matcher.v4alpha.RegexMatcher"}, "envoy.type.matcher.v4alpha.StringMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "safe_regex": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/RegexMatcher.jsonschema", "additionalProperties": true, "description": "The input string must match the regular expression specified here."}, "contains": {"type": "string", "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 8]", "id": "envoy.type.matcher.v4alpha.StringMatcher"}, "envoy.type.matcher.v4alpha.ValueMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"null_match": {"additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a NullValue."}, "double_match": {"properties": {"range": {"properties": {"start": {"type": "number", "description": "start of the range (inclusive)"}, "end": {"type": "number", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, the input double value must be in the range specified here.\n Note: The range is using half-open interval semantics [start, end)."}, "exact": {"type": "number", "description": "If specified, the input double value must be equal to the value specified here."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a double value and is\n matched to this field."}, "string_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/StringMatcher.jsonschema", "additionalProperties": true, "description": "If specified, a match occurs if and only if the target value is a string value and is\n matched to this field."}, "bool_match": {"type": "boolean", "description": "If specified, a match occurs if and only if the target value is a bool value and is equal\n to this field."}, "present_match": {"type": "boolean", "description": "If specified, value match will be performed based on whether the path is referring to a\n valid primitive value in the metadata. If the path is referring to a non-primitive value,\n the result is always not matched."}, "list_match": {"properties": {"one_of": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/ValueMatcher.jsonschema", "additionalProperties": true, "description": "If specified, at least one of the values in the list must match the value specified."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a list value and\n is matched to this field."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Value matcher]\n\nSpecifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.\n StructValue is not supported and is always not matched.\n [#next-free-field: 7]", "id": "envoy.type.matcher.v4alpha.ValueMatcher"}, "google.api.expr.v1alpha1.Constant": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"null_value": {"enum": ["NULL_VALUE", 0], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "null value."}, "bool_value": {"type": "boolean", "description": "boolean value."}, "int64_value": {"type": "string", "description": "int64 value."}, "uint64_value": {"type": "string", "description": "uint64 value."}, "double_value": {"type": "number", "description": "double value."}, "string_value": {"type": "string", "description": "string value."}, "bytes_value": {"type": "string", "description": "bytes value."}, "duration_value": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "protobuf.Duration value.\n\n Deprecated: duration is no longer considered a builtin cel type."}, "timestamp_value": {"type": "string", "description": "protobuf.Timestamp value.\n\n Deprecated: timestamp is no longer considered a builtin cel type.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "description": "Represents a primitive literal.\n\n Named 'Constant' here for backwards compatibility.\n\n This is similar as the primitives supported in the well-known type\n `google.protobuf.Value`, but richer so it can represent CEL's full range of\n primitives.\n\n Lists and structs are not included as constants as these aggregate types may\n contain [Expr][google.api.expr.v1alpha1.Expr] elements which require evaluation and are thus not constant.\n\n Examples of literals include: `\"hello\"`, `b'bytes'`, `1u`, `4.2`, `-2`,\n `true`, `null`.", "id": "google.api.expr.v1alpha1.Constant"}, "google.api.expr.v1alpha1.Expr": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"id": {"type": "string", "description": "Required. An id assigned to this node by the parser which is unique in a\n given expression tree. This is used to associate type information and other\n attributes to a node in the parse tree."}, "const_expr": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Constant.jsonschema", "additionalProperties": true, "description": "A literal expression."}, "ident_expr": {"properties": {"name": {"type": "string", "description": "Required. Holds a single, unqualified identifier, possibly preceded by a\n '.'.\n\n Qualified names are represented by the [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression."}}, "additionalProperties": true, "type": "object", "description": "An identifier expression."}, "select_expr": {"properties": {"operand": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "Required. The target of the selection expression.\n\n For example, in the select expression `request.auth`, the `request`\n portion of the expression is the `operand`."}, "field": {"type": "string", "description": "Required. The name of the field to select.\n\n For example, in the select expression `request.auth`, the `auth` portion\n of the expression would be the `field`."}, "test_only": {"type": "boolean", "description": "Whether the select is to be interpreted as a field presence test.\n\n This results from the macro `has(request.auth)`."}}, "additionalProperties": true, "type": "object", "description": "A field selection expression, e.g. `request.auth`."}, "call_expr": {"properties": {"target": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The target of an method call-style expression. For example, `x` in\n `x.f()`."}, "function": {"type": "string", "description": "Required. The name of the function or method being called."}, "args": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema"}, "type": "array", "description": "The arguments."}}, "additionalProperties": true, "type": "object", "description": "A call expression, including calls to predefined functions and operators."}, "list_expr": {"properties": {"elements": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema"}, "type": "array", "description": "The elements part of the list."}}, "additionalProperties": true, "type": "object", "description": "A list creation expression."}, "struct_expr": {"properties": {"message_name": {"type": "string", "description": "The type name of the message to be created, empty when creating map\n literals."}, "entries": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"id": {"type": "string", "description": "Required. An id assigned to this node by the parser which is unique\n in a given expression tree. This is used to associate type\n information and other attributes to the node."}, "field_key": {"type": "string", "description": "The field key for a message creator statement."}, "map_key": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The key expression for a map creation statement."}, "value": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "Required. The value assigned to the key."}}, "additionalProperties": true, "type": "object", "description": "Represents an entry."}, "type": "array", "description": "The entries in the creation expression."}}, "additionalProperties": true, "type": "object", "description": "A map or message creation expression."}, "comprehension_expr": {"properties": {"iter_var": {"type": "string", "description": "The name of the iteration variable."}, "iter_range": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The range over which var iterates."}, "accu_var": {"type": "string", "description": "The name of the variable used for accumulation of the result."}, "accu_init": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The initial value of the accumulator."}, "loop_condition": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An expression which can contain iter_var and accu_var.\n\n Returns false when the result has been computed and may be used as\n a hint to short-circuit the remainder of the comprehension."}, "loop_step": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An expression which can contain iter_var and accu_var.\n\n Computes the next value of accu_var."}, "result": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An expression which can contain accu_var.\n\n Computes the result."}}, "additionalProperties": true, "type": "object", "description": "A comprehension expression."}}, "additionalProperties": true, "type": "object", "description": "An abstract representation of a common expression.\n\n Expressions are abstractly represented as a collection of identifiers,\n select statements, function calls, literals, and comprehensions. All\n operators with the exception of the '.' operator are modelled as function\n calls. This makes it easy to represent new operators into the existing AST.\n\n All references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at\n type-check for an expression to be valid. A reference may either be a bare\n identifier `name` or a qualified identifier `google.api.name`. References\n may either refer to a value or a function declaration.\n\n For example, the expression `google.api.name.startsWith('expr')` references\n the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and\n the function declaration `startsWith`.", "id": "google.api.expr.v1alpha1.Expr"}, "google.api.expr.v1alpha1.Type": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"dyn": {"additionalProperties": true, "type": "object", "description": "Dynamic type."}, "null": {"enum": ["NULL_VALUE", 0], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Null value."}, "primitive": {"enum": ["PRIMITIVE_TYPE_UNSPECIFIED", 0, "BOOL", 1, "INT64", 2, "UINT64", 3, "DOUBLE", 4, "STRING", 5, "BYTES", 6], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Primitive types: `true`, `1u`, `-2.0`, `'string'`, `b'bytes'`."}, "wrapper": {"enum": ["PRIMITIVE_TYPE_UNSPECIFIED", 0, "BOOL", 1, "INT64", 2, "UINT64", 3, "DOUBLE", 4, "STRING", 5, "BYTES", 6], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Wrapper of a primitive type, e.g. `google.protobuf.Int64Value`."}, "well_known": {"enum": ["WELL_KNOWN_TYPE_UNSPECIFIED", 0, "ANY", 1, "TIMESTAMP", 2, "DURATION", 3], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Well-known protobuf type such as `google.protobuf.Timestamp`."}, "list_type": {"properties": {"elem_type": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema", "additionalProperties": true, "description": "The element type."}}, "additionalProperties": true, "type": "object", "description": "Parameterized list with elements of `list_type`, e.g. `list<timestamp>`."}, "map_type": {"properties": {"key_type": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema", "additionalProperties": true, "description": "The type of the key."}, "value_type": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema", "additionalProperties": true, "description": "The type of the value."}}, "additionalProperties": true, "type": "object", "description": "Parameterized map with typed keys and values."}, "function": {"properties": {"result_type": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema", "additionalProperties": true, "description": "Result type of the function."}, "arg_types": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema"}, "type": "array", "description": "Argument types of the function."}}, "additionalProperties": true, "type": "object", "description": "Function type."}, "message_type": {"type": "string", "description": "Protocol buffer message type.\n\n The `message_type` string specifies the qualified message type name. For\n example, `google.plus.Profile`."}, "type_param": {"type": "string", "description": "Type param type.\n\n The `type_param` string specifies the type parameter name, e.g. `list<E>`\n would be a `list_type` whose element type was a `type_param` type\n named `E`."}, "type": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema", "additionalProperties": true, "description": "Type type.\n\n The `type` value specifies the target type. e.g. int is type with a\n target type of `Primitive.INT`."}, "error": {"additionalProperties": true, "type": "object", "description": "Error type.\n\n During type-checking if an expression is an error, its type is propagated\n as the `ERROR` type. This permits the type-checker to discover other\n errors present in the expression."}, "abstract_type": {"properties": {"name": {"type": "string", "description": "The fully qualified name of this abstract type."}, "parameter_types": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Type.jsonschema"}, "type": "array", "description": "Parameter types for this abstract type."}}, "additionalProperties": true, "type": "object", "description": "Abstract, application defined type."}}, "additionalProperties": true, "type": "object", "description": "Represents a CEL type.", "id": "google.api.expr.v1alpha1.Type"}}}