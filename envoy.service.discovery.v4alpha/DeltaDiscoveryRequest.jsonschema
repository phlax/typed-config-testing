{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"node": {"properties": {"id": {"type": "string", "description": "An opaque node identifier for the Envoy node. This also provides the local\n service node name. It should be set if any of the following features are\n used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS\n <config_cluster_manager_cds>`, and :ref:`HTTP tracing\n <arch_overview_tracing>`, either in this message or via\n :option:`--service-node`."}, "cluster": {"type": "string", "description": "Defines the local service cluster name where Envoy is running. Though\n optional, it should be set if any of the following features are used:\n :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster\n verification\n <envoy_api_field_config.core.v4alpha.HealthCheck.HttpHealthCheck.service_name_matcher>`,\n :ref:`runtime override directory <envoy_api_msg_config.bootstrap.v4alpha.Runtime>`,\n :ref:`user agent addition\n <envoy_api_field_extensions.filters.network.http_connection_manager.v4alpha.HttpConnectionManager.add_user_agent>`,\n :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,\n :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing\n <arch_overview_tracing>`, either in this message or via\n :option:`--service-cluster`."}, "metadata": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Opaque metadata extending the node identifier. Envoy will pass this\n directly to the management server."}, "locality": {"properties": {"region": {"type": "string", "description": "Region this :ref:`zone <envoy_api_field_config.core.v4alpha.Locality.zone>` belongs to."}, "zone": {"type": "string", "description": "Defines the local service zone where Envoy is running. Though optional, it\n should be set if discovery service routing is used and the discovery\n service exposes :ref:`zone data <envoy_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,\n either in this message or via :option:`--service-zone`. The meaning of zone\n is context dependent, e.g. `Availability Zone (AZ)\n <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_\n on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on\n GCP, etc."}, "sub_zone": {"type": "string", "description": "When used for locality of upstream hosts, this field further splits zone\n into smaller chunks of sub-zones so they can be load balanced\n independently."}}, "additionalProperties": true, "type": "object", "description": "Locality specifying where the Envoy instance is running."}, "user_agent_name": {"type": "string", "description": "Free-form string that identifies the entity requesting config.\n E.g. \"envoy\" or \"grpc\""}, "user_agent_version": {"type": "string", "description": "Free-form string that identifies the version of the entity requesting config.\n E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\""}, "user_agent_build_version": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/BuildVersion.jsonschema", "additionalProperties": true, "description": "Structured version of the entity requesting config."}, "extensions": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "This is the name of the Envoy filter as specified in the Envoy\n configuration, e.g. envoy.filters.http.router, com.acme.widget."}, "category": {"type": "string", "description": "Category of the extension.\n Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\"\n for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from\n acme.com vendor.\n [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]"}, "type_descriptor": {"type": "string", "description": "[#not-implemented-hide:] Type descriptor of extension configuration proto.\n [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]\n [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]"}, "version": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/BuildVersion.jsonschema", "additionalProperties": true, "description": "The version is a property of the extension and maintained independently\n of other extensions and the Envoy API.\n This field is not set when extension did not provide version information."}, "disabled": {"type": "boolean", "description": "Indicates that the extension is present but was disabled via dynamic configuration."}}, "additionalProperties": true, "type": "object", "description": "Version and identification for an Envoy extension.\n [#next-free-field: 6]"}, "type": "array", "description": "List of extensions and their versions supported by the node."}, "client_features": {"items": {"type": "string"}, "type": "array", "description": "Client feature support list. These are well known features described\n in the Envoy API repository for a given major version of an API. Client features\n use reverse DNS naming scheme, for example `com.acme.feature`.\n See :ref:`the list of features <client_features>` that xDS client may\n support."}}, "additionalProperties": true, "type": "object", "description": "The node making the request."}, "type_url": {"type": "string", "description": "Type of the resource that is being requested, e.g.\n \"type.googleapis.com/envoy.api.v2.ClusterLoadAssignment\". This does not need to be set if\n resources are only referenced via *xds_resource_subscribe* and\n *xds_resources_unsubscribe*."}, "resource_names_subscribe": {"items": {"type": "string"}, "type": "array", "description": "DeltaDiscoveryRequests allow the client to add or remove individual\n resources to the set of tracked resources in the context of a stream.\n All resource names in the resource_names_subscribe list are added to the\n set of tracked resources and all resource names in the resource_names_unsubscribe\n list are removed from the set of tracked resources.\n\n *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or\n resource_names_unsubscribe list simply means that no resources are to be\n added or removed to the resource list.\n *Like* state-of-the-world xDS, the server must send updates for all tracked\n resources, but can also send updates for resources the client has not subscribed to.\n\n NOTE: the server must respond with all resources listed in resource_names_subscribe,\n even if it believes the client has the most recent version of them. The reason:\n the client may have dropped them, but then regained interest before it had a chance\n to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.\n\n These two fields can be set in any DeltaDiscoveryRequest, including ACKs\n and initial_resource_versions.\n\n A list of Resource names to add to the list of tracked resources."}, "resource_names_unsubscribe": {"items": {"type": "string"}, "type": "array", "description": "A list of Resource names to remove from the list of tracked resources."}, "initial_resource_versions": {"additionalProperties": {"type": "string"}, "type": "object", "description": "Informs the server of the versions of the resources the xDS client knows of, to enable the\n client to continue the same logical xDS session even in the face of gRPC stream reconnection.\n It will not be populated: [1] in the very first stream of a session, since the client will\n not yet have any resources,  [2] in any message after the first in a stream (for a given\n type_url), since the server will already be correctly tracking the client's state.\n (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)\n The map's keys are names of xDS resources known to the xDS client.\n The map's values are opaque resource versions."}, "response_nonce": {"type": "string", "description": "When the DeltaDiscoveryRequest is a ACK or NACK message in response\n to a previous DeltaDiscoveryResponse, the response_nonce must be the\n nonce in the DeltaDiscoveryResponse.\n Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted."}, "error_detail": {"properties": {"code": {"type": "integer", "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."}, "message": {"type": "string", "description": "A developer-facing error message, which should be in English. Any\n user-facing error message should be localized and sent in the\n [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."}, "details": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(&foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := &pb.Foo{...}\n      any, err := anypb.New(foo)\n      if err != nil {\n        ...\n      }\n      ...\n      foo := &pb.Foo{}\n      if err := any.UnmarshalTo(foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": <string>,\n       \"lastName\": <string>\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }"}, "type": "array", "description": "A list of messages that carry the error details.  There is a common set of\n message types for APIs to use."}}, "additionalProperties": true, "type": "object", "description": "This is populated when the previous :ref:`DiscoveryResponse <envoy_api_msg_service.discovery.v4alpha.DiscoveryResponse>`\n failed to update configuration. The *message* field in *error_details*\n provides the Envoy internal exception related to the failure."}}, "additionalProperties": true, "type": "object", "description": "DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC\n endpoint for Delta xDS.\n\n With Delta xDS, the DeltaDiscoveryResponses do not need to include a full\n snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a\n diff to the state of a xDS client.\n In Delta XDS there are per-resource versions, which allow tracking state at\n the resource granularity.\n An xDS Delta session is always in the context of a gRPC bidirectional\n stream. This allows the xDS server to keep track of the state of xDS clients\n connected to it.\n\n In Delta xDS the nonce field is required and used to pair\n DeltaDiscoveryResponse to a DeltaDiscoveryRequest ACK or NACK.\n Optionally, a response message level system_version_info is present for\n debugging purposes only.\n\n DeltaDiscoveryRequest plays two independent roles. Any DeltaDiscoveryRequest\n can be either or both of: [1] informing the server of what resources the\n client has gained/lost interest in (using resource_names_subscribe and\n resource_names_unsubscribe), or [2] (N)ACKing an earlier resource update from\n the server (using response_nonce, with presence of error_detail making it a NACK).\n Additionally, the first message (for a given type_url) of a reconnected gRPC stream\n has a third role: informing the server of the resources (and their versions)\n that the client already possesses, using the initial_resource_versions field.\n\n As with state-of-the-world, when multiple resource types are multiplexed (ADS),\n all requests/acknowledgments/updates are logically walled off by type_url:\n a Cluster ACK exists in a completely separate world from a prior Route NACK.\n In particular, initial_resource_versions being sent at the \"start\" of every\n gRPC stream actually entails a message for each type_url, each with its own\n initial_resource_versions.\n [#next-free-field: 8]", "definitions": {"envoy.config.core.v4alpha.BuildVersion": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version": {"properties": {"major_number": {"type": "integer"}, "minor_number": {"type": "integer"}, "patch": {"type": "integer"}}, "additionalProperties": true, "type": "object", "description": "SemVer version of extension."}, "metadata": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Free-form build information.\n Envoy defines several well known keys in the source/common/version/version.h file"}}, "additionalProperties": true, "type": "object", "description": "BuildVersion combines SemVer version of extension with free-form build information\n (i.e. 'alpha', 'private-build') as a set of strings.", "id": "envoy.config.core.v4alpha.BuildVersion"}}}