{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "version_info": {
            "type": "string",
            "description": "The version_info provided in the request messages will be the version_info\n received with the most recent successfully processed response or empty on\n the first request. It is expected that no new request is sent after a\n response is received until the Envoy instance is ready to ACK/NACK the new\n configuration. ACK/NACK takes place by returning the new API config version\n as applied or the previous API config version respectively. Each type_url\n (see below) has an independent version associated with it."
        },
        "node": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An opaque node identifier for the Envoy node. This also provides the local\n service node name. It should be set if any of the following features are\n used: :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`CDS\n \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n \u003carch_overview_tracing\u003e`, either in this message or via\n :option:`--service-node`."
                },
                "cluster": {
                    "type": "string",
                    "description": "Defines the local service cluster name where Envoy is running. Though\n optional, it should be set if any of the following features are used:\n :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`health check cluster\n verification\n \u003cenvoy_api_field_config.core.v4alpha.HealthCheck.HttpHealthCheck.service_name_matcher\u003e`,\n :ref:`runtime override directory \u003cenvoy_api_msg_config.bootstrap.v4alpha.Runtime\u003e`,\n :ref:`user agent addition\n \u003cenvoy_api_field_extensions.filters.network.http_connection_manager.v4alpha.HttpConnectionManager.add_user_agent\u003e`,\n :ref:`HTTP global rate limiting \u003cconfig_http_filters_rate_limit\u003e`,\n :ref:`CDS \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n \u003carch_overview_tracing\u003e`, either in this message or via\n :option:`--service-cluster`."
                },
                "metadata": {
                    "properties": {
                        "fields": {
                            "additionalProperties": {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Unordered map of dynamically typed values."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Opaque metadata extending the node identifier. Envoy will pass this\n directly to the management server."
                },
                "locality": {
                    "properties": {
                        "region": {
                            "type": "string",
                            "description": "Region this :ref:`zone \u003cenvoy_api_field_config.core.v4alpha.Locality.zone\u003e` belongs to."
                        },
                        "zone": {
                            "type": "string",
                            "description": "Defines the local service zone where Envoy is running. Though optional, it\n should be set if discovery service routing is used and the discovery\n service exposes :ref:`zone data \u003cenvoy_api_field_config.endpoint.v3.LocalityLbEndpoints.locality\u003e`,\n either in this message or via :option:`--service-zone`. The meaning of zone\n is context dependent, e.g. `Availability Zone (AZ)\n \u003chttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\u003e`_\n on AWS, `Zone \u003chttps://cloud.google.com/compute/docs/regions-zones/\u003e`_ on\n GCP, etc."
                        },
                        "sub_zone": {
                            "type": "string",
                            "description": "When used for locality of upstream hosts, this field further splits zone\n into smaller chunks of sub-zones so they can be load balanced\n independently."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Locality specifying where the Envoy instance is running."
                },
                "user_agent_name": {
                    "type": "string",
                    "description": "Free-form string that identifies the entity requesting config.\n E.g. \"envoy\" or \"grpc\""
                },
                "user_agent_version": {
                    "type": "string",
                    "description": "Free-form string that identifies the version of the entity requesting config.\n E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\""
                },
                "user_agent_build_version": {
                    "$ref": "envoy.config.core.v4alpha.BuildVersion",
                    "additionalProperties": true,
                    "description": "Structured version of the entity requesting config."
                },
                "extensions": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "This is the name of the Envoy filter as specified in the Envoy\n configuration, e.g. envoy.filters.http.router, com.acme.widget."
                            },
                            "category": {
                                "type": "string",
                                "description": "Category of the extension.\n Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\"\n for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from\n acme.com vendor.\n [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]"
                            },
                            "type_descriptor": {
                                "type": "string",
                                "description": "[#not-implemented-hide:] Type descriptor of extension configuration proto.\n [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]\n [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]"
                            },
                            "version": {
                                "$ref": "envoy.config.core.v4alpha.BuildVersion",
                                "additionalProperties": true,
                                "description": "The version is a property of the extension and maintained independently\n of other extensions and the Envoy API.\n This field is not set when extension did not provide version information."
                            },
                            "disabled": {
                                "type": "boolean",
                                "description": "Indicates that the extension is present but was disabled via dynamic configuration."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Version and identification for an Envoy extension.\n [#next-free-field: 6]"
                    },
                    "type": "array",
                    "description": "List of extensions and their versions supported by the node."
                },
                "client_features": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Client feature support list. These are well known features described\n in the Envoy API repository for a given major version of an API. Client features\n use reverse DNS naming scheme, for example `com.acme.feature`.\n See :ref:`the list of features \u003cclient_features\u003e` that xDS client may\n support."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "The node making the request."
        },
        "resource_names": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "List of resources to subscribe to, e.g. list of cluster names or a route\n configuration name. If this is empty, all resources for the API are\n returned. LDS/CDS may have empty resource_names, which will cause all\n resources for the Envoy instance to be returned. The LDS and CDS responses\n will then imply a number of resources that need to be fetched via EDS/RDS,\n which will be explicitly enumerated in resource_names."
        },
        "type_url": {
            "type": "string",
            "description": "Type of the resource that is being requested, e.g.\n \"type.googleapis.com/envoy.api.v2.ClusterLoadAssignment\". This is implicit\n in requests made via singleton xDS APIs such as CDS, LDS, etc. but is\n required for ADS."
        },
        "response_nonce": {
            "type": "string",
            "description": "nonce corresponding to DiscoveryResponse being ACK/NACKed. See above\n discussion on version_info and the DiscoveryResponse nonce comment. This\n may be empty only if 1) this is a non-persistent-stream xDS such as HTTP,\n or 2) the client has not yet accepted an update in this xDS stream (unlike\n delta, where it is populated only for new explicit ACKs)."
        },
        "error_detail": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
                },
                "message": {
                    "type": "string",
                    "description": "A developer-facing error message, which should be in English. Any\n user-facing error message should be localized and sent in the\n [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
                },
                "details": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(\u0026foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := \u0026pb.Foo{...}\n      any, err := anypb.New(foo)\n      if err != nil {\n        ...\n      }\n      ...\n      foo := \u0026pb.Foo{}\n      if err := any.UnmarshalTo(foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": \u003cstring\u003e,\n       \"lastName\": \u003cstring\u003e\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }"
                    },
                    "type": "array",
                    "description": "A list of messages that carry the error details.  There is a common set of\n message types for APIs to use."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "This is populated when the previous :ref:`DiscoveryResponse \u003cenvoy_api_msg_service.discovery.v4alpha.DiscoveryResponse\u003e`\n failed to update configuration. The *message* field in *error_details* provides the Envoy\n internal exception related to the failure. It is only intended for consumption during manual\n debugging, the string provided is not guaranteed to be stable across Envoy versions."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: Common discovery API components]\n\nA DiscoveryRequest requests a set of versioned resources of the same type for\n a given Envoy node on some API.\n [#next-free-field: 7]",
    "definitions": {
        "envoy.config.core.v4alpha.BuildVersion": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "version": {
                    "properties": {
                        "major_number": {
                            "type": "integer"
                        },
                        "minor_number": {
                            "type": "integer"
                        },
                        "patch": {
                            "type": "integer"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "SemVer version of extension."
                },
                "metadata": {
                    "properties": {
                        "fields": {
                            "additionalProperties": {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Unordered map of dynamically typed values."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Free-form build information.\n Envoy defines several well known keys in the source/common/version/version.h file"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "BuildVersion combines SemVer version of extension with free-form build information\n (i.e. 'alpha', 'private-build') as a set of strings.",
            "id": "envoy.config.core.v4alpha.BuildVersion"
        }
    }
}