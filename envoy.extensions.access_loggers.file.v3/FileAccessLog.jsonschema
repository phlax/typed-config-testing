{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "path": {
            "type": "string",
            "description": "A path to a local file to which to write the access log entries."
        },
        "format": {
            "type": "string",
            "description": "Access log :ref:`format string\u003cconfig_access_log_format_strings\u003e`.\n Envoy supports :ref:`custom access log formats \u003cconfig_access_log_format\u003e` as well as a\n :ref:`default format \u003cconfig_access_log_default_format\u003e`.\n This field is deprecated.\n Please use :ref:`log_format \u003cenvoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format\u003e`."
        },
        "json_format": {
            "properties": {
                "fields": {
                    "additionalProperties": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "object",
                    "description": "Unordered map of dynamically typed values."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Access log :ref:`format dictionary\u003cconfig_access_log_format_dictionaries\u003e`. All values\n are rendered as strings.\n This field is deprecated.\n Please use :ref:`log_format \u003cenvoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format\u003e`."
        },
        "typed_json_format": {
            "properties": {
                "fields": {
                    "additionalProperties": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "object",
                    "description": "Unordered map of dynamically typed values."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Access log :ref:`format dictionary\u003cconfig_access_log_format_dictionaries\u003e`. Values are\n rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may\n be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the\n documentation for a specific command operator for details.\n This field is deprecated.\n Please use :ref:`log_format \u003cenvoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format\u003e`."
        },
        "log_format": {
            "properties": {
                "text_format": {
                    "type": "string",
                    "description": "Specify a format with command operators to form a text string.\n Its details is described in :ref:`format string\u003cconfig_access_log_format_strings\u003e`.\n\n For example, setting ``text_format`` like below,\n\n .. validated-code-block:: yaml\n   :type-name: envoy.config.core.v3.SubstitutionFormatString\n\n   text_format: \"%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\\n\"\n\n generates plain text similar to:\n\n .. code-block:: text\n\n   upstream connect error:503:path=/foo\n\n Deprecated in favor of :ref:`text_format_source \u003cenvoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source\u003e`. To migrate text format strings, use the :ref:`inline_string \u003cenvoy_v3_api_field_config.core.v3.DataSource.inline_string\u003e` field."
                },
                "json_format": {
                    "properties": {
                        "fields": {
                            "additionalProperties": {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Unordered map of dynamically typed values."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Specify a format with command operators to form a JSON string.\n Its details is described in :ref:`format dictionary\u003cconfig_access_log_format_dictionaries\u003e`.\n Values are rendered as strings, numbers, or boolean values as appropriate.\n Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).\n See the documentation for a specific command operator for details.\n\n .. validated-code-block:: yaml\n   :type-name: envoy.config.core.v3.SubstitutionFormatString\n\n   json_format:\n     status: \"%RESPONSE_CODE%\"\n     message: \"%LOCAL_REPLY_BODY%\"\n\n The following JSON object would be created:\n\n .. code-block:: json\n\n  {\n    \"status\": 500,\n    \"message\": \"My error message\"\n  }"
                },
                "text_format_source": {
                    "properties": {
                        "filename": {
                            "type": "string",
                            "description": "Local filesystem data source."
                        },
                        "inline_bytes": {
                            "type": "string",
                            "description": "Bytes inlined in the configuration."
                        },
                        "inline_string": {
                            "type": "string",
                            "description": "String inlined in the configuration."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Specify a format with command operators to form a text string.\n Its details is described in :ref:`format string\u003cconfig_access_log_format_strings\u003e`.\n\n For example, setting ``text_format`` like below,\n\n .. validated-code-block:: yaml\n   :type-name: envoy.config.core.v3.SubstitutionFormatString\n\n   text_format_source:\n     inline_string: \"%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\\n\"\n\n generates plain text similar to:\n\n .. code-block:: text\n\n   upstream connect error:503:path=/foo"
                },
                "omit_empty_values": {
                    "type": "boolean",
                    "description": "If set to true, when command operators are evaluated to null,\n\n * for ``text_format``, the output of the empty operator is changed from ``-`` to an\n   empty string, so that empty values are omitted entirely.\n * for ``json_format`` the keys with null values are omitted in the output structure."
                },
                "content_type": {
                    "type": "string",
                    "description": "Specify a *content_type* field.\n If this field is not set then ``text/plain`` is used for *text_format* and\n ``application/json`` is used for *json_format*.\n\n .. validated-code-block:: yaml\n   :type-name: envoy.config.core.v3.SubstitutionFormatString\n\n   content_type: \"text/html; charset=UTF-8\""
                },
                "formatters": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of an extension. This is not used to select the extension, instead\n it serves the role of an opaque identifier."
                            },
                            "typed_config": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The typed config for the extension. The type URL will be used to identify\n the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,\n the inner type URL of *TypedStruct* will be utilized. See the\n :ref:`extension configuration overview\n \u003cconfig_overview_extension_configuration\u003e` for further details."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "[#protodoc-title: Extension configuration]\n\nMessage type for extension configuration.\n [#next-major-version: revisit all existing typed_config that doesn't use this wrapper.]."
                    },
                    "type": "array",
                    "description": "Specifies a collection of Formatter plugins that can be called from the access log configuration.\n See the formatters extensions documentation for details."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Configuration to form access log data and format.\n If not specified, use :ref:`default format \u003cconfig_access_log_default_format\u003e`."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: File access log]\n [#extension: envoy.access_loggers.file]\n\nCustom configuration for an :ref:`AccessLog \u003cenvoy_api_msg_config.accesslog.v3.AccessLog\u003e`\n that writes log entries directly to a file. Configures the built-in *envoy.access_loggers.file*\n AccessLog.\n [#next-free-field: 6]"
}