{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "match": {
            "properties": {
                "method": {
                    "properties": {
                        "name": {
                            "properties": {
                                "exact": {
                                    "type": "string",
                                    "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                                },
                                "prefix": {
                                    "type": "string",
                                    "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                                },
                                "suffix": {
                                    "type": "string",
                                    "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                                },
                                "safe_regex": {
                                    "$ref": "envoy.type.matcher.v4alpha.RegexMatcher",
                                    "additionalProperties": true,
                                    "description": "The input string must match the regular expression specified here."
                                },
                                "contains": {
                                    "type": "string",
                                    "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"
                                },
                                "ignore_case": {
                                    "type": "boolean",
                                    "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "The name of the method."
                        },
                        "params_match": {
                            "additionalProperties": {
                                "properties": {
                                    "exact_match": {
                                        "type": "string",
                                        "description": "If specified, header match will be performed based on the value of the header."
                                    },
                                    "range_match": {
                                        "$ref": "envoy.type.v3.Int64Range",
                                        "additionalProperties": true,
                                        "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting\n of an optional plus or minus sign followed by a sequence of digits. The rule will not match\n if the header value does not represent an integer. Match will fail for empty values,\n floating point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0,\n   \"somestring\", 10.9, \"-1somestring\""
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Method parameter definition.\n The key is the parameter index, starting from 0.\n The value is the parameter matching type."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Method level routing matching."
                },
                "headers": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Specifies the name of the header in the request."
                            },
                            "exact_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on the value of the header."
                            },
                            "safe_regex_match": {
                                "$ref": "envoy.type.matcher.v4alpha.RegexMatcher",
                                "additionalProperties": true,
                                "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."
                            },
                            "range_match": {
                                "$ref": "envoy.type.v3.Int64Range",
                                "additionalProperties": true,
                                "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""
                            },
                            "present_match": {
                                "type": "boolean",
                                "description": "If specified, header match will be performed based on whether the header is in the\n request."
                            },
                            "prefix_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."
                            },
                            "suffix_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."
                            },
                            "contains_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."
                            },
                            "invert_match": {
                                "type": "boolean",
                                "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   \u003cenvoy_api_field_config.route.v4alpha.HeaderMatcher.present_match\u003e`. i.e, a request that has the :ref:`name\n   \u003cenvoy_api_field_config.route.v4alpha.HeaderMatcher.name\u003e` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 13]"
                    },
                    "type": "array",
                    "description": "Specifies a set of headers that the route should match on. The router will check the requestâ€™s\n headers against all the specified headers in the route config. A match will happen if all the\n headers in the route are present in the request with the same values (or based on presence if\n the value field is not in the config)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Route matching parameters."
        },
        "route": {
            "properties": {
                "cluster": {
                    "type": "string",
                    "description": "Indicates the upstream cluster to which the request should be routed."
                },
                "weighted_clusters": {
                    "properties": {
                        "clusters": {
                            "items": {
                                "$schema": "http://json-schema.org/draft-04/schema#",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the upstream cluster. The cluster must exist in the\n :ref:`cluster manager configuration \u003cconfig_cluster_manager\u003e`."
                                    },
                                    "weight": {
                                        "additionalProperties": true,
                                        "type": "integer",
                                        "description": "An integer between 0 and :ref:`total_weight\n \u003cenvoy_api_field_config.route.v4alpha.WeightedCluster.total_weight\u003e`. When a request matches the route,\n the choice of an upstream cluster is determined by its weight. The sum of weights across all\n entries in the clusters array must add up to the total_weight, which defaults to 100."
                                    },
                                    "metadata_match": {
                                        "properties": {
                                            "filter_metadata": {
                                                "additionalProperties": {
                                                    "properties": {
                                                        "fields": {
                                                            "additionalProperties": {
                                                                "additionalProperties": true,
                                                                "type": "object"
                                                            },
                                                            "type": "object",
                                                            "description": "Unordered map of dynamically typed values."
                                                        }
                                                    },
                                                    "additionalProperties": true,
                                                    "type": "object"
                                                },
                                                "type": "object",
                                                "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."
                                            }
                                        },
                                        "additionalProperties": true,
                                        "type": "object",
                                        "description": "Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in\n the upstream cluster with metadata matching what is set in this field will be considered for\n load balancing. Note that this will be merged with what's provided in\n :ref:`RouteAction.metadata_match \u003cenvoy_api_field_config.route.v4alpha.RouteAction.metadata_match\u003e`, with\n values here taking precedence. The filter name should be specified as *envoy.lb*."
                                    },
                                    "request_headers_to_add": {
                                        "items": {
                                            "$schema": "http://json-schema.org/draft-04/schema#",
                                            "$ref": "envoy.config.core.v4alpha.HeaderValueOption"
                                        },
                                        "type": "array",
                                        "description": "Specifies a list of headers to be added to requests when this cluster is selected\n through the enclosing :ref:`envoy_api_msg_config.route.v4alpha.RouteAction`.\n Headers specified at this level are applied before headers from the enclosing\n :ref:`envoy_api_msg_config.route.v4alpha.Route`, :ref:`envoy_api_msg_config.route.v4alpha.VirtualHost`, and\n :ref:`envoy_api_msg_config.route.v4alpha.RouteConfiguration`. For more information, including details on\n header value syntax, see the documentation on :ref:`custom request headers\n \u003cconfig_http_conn_man_headers_custom_request_headers\u003e`."
                                    },
                                    "request_headers_to_remove": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Specifies a list of HTTP headers that should be removed from each request when\n this cluster is selected through the enclosing :ref:`envoy_api_msg_config.route.v4alpha.RouteAction`."
                                    },
                                    "response_headers_to_add": {
                                        "items": {
                                            "$schema": "http://json-schema.org/draft-04/schema#",
                                            "$ref": "envoy.config.core.v4alpha.HeaderValueOption"
                                        },
                                        "type": "array",
                                        "description": "Specifies a list of headers to be added to responses when this cluster is selected\n through the enclosing :ref:`envoy_api_msg_config.route.v4alpha.RouteAction`.\n Headers specified at this level are applied before headers from the enclosing\n :ref:`envoy_api_msg_config.route.v4alpha.Route`, :ref:`envoy_api_msg_config.route.v4alpha.VirtualHost`, and\n :ref:`envoy_api_msg_config.route.v4alpha.RouteConfiguration`. For more information, including details on\n header value syntax, see the documentation on :ref:`custom request headers\n \u003cconfig_http_conn_man_headers_custom_request_headers\u003e`."
                                    },
                                    "response_headers_to_remove": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Specifies a list of headers to be removed from responses when this cluster is selected\n through the enclosing :ref:`envoy_api_msg_config.route.v4alpha.RouteAction`."
                                    },
                                    "typed_per_filter_config": {
                                        "additionalProperties": {
                                            "properties": {
                                                "type_url": {
                                                    "type": "string",
                                                    "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "Must be a valid serialized protocol buffer of the above specified type."
                                                }
                                            },
                                            "additionalProperties": true,
                                            "type": "object"
                                        },
                                        "type": "object",
                                        "description": "The per_filter_config field can be used to provide weighted cluster-specific\n configurations for filters. The key should match the filter name, such as\n *envoy.filters.http.buffer* for the HTTP buffer filter. Use of this field is filter\n specific; see the :ref:`HTTP filter documentation \u003cconfig_http_filters\u003e`\n for if and how it is utilized."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "[#next-free-field: 11]"
                            },
                            "type": "array",
                            "description": "Specifies one or more upstream clusters associated with the route."
                        },
                        "total_weight": {
                            "additionalProperties": true,
                            "type": "integer",
                            "description": "Specifies the total weight across all clusters. The sum of all cluster weights must equal this\n value, which must be greater than 0. Defaults to 100."
                        },
                        "runtime_key_prefix": {
                            "type": "string",
                            "description": "Specifies the runtime key prefix that should be used to construct the\n runtime keys associated with each cluster. When the *runtime_key_prefix* is\n specified, the router will look for weights associated with each upstream\n cluster under the key *runtime_key_prefix* + \".\" + *cluster[i].name* where\n *cluster[i]* denotes an entry in the clusters array field. If the runtime\n key for the cluster does not exist, the value specified in the\n configuration file will be used as the default weight. See the :ref:`runtime documentation\n \u003coperations_runtime\u003e` for how key names map to the underlying implementation."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Multiple upstream clusters can be specified for a given route. The\n request is routed to one of the upstream clusters based on weights\n assigned to each cluster.\n Currently ClusterWeight only supports the name and weight fields."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Route request to some upstream cluster."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "definitions": {
        "envoy.config.core.v4alpha.HeaderValueOption": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "header": {
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "Header name."
                        },
                        "value": {
                            "type": "string",
                            "description": "Header value.\n\n The same :ref:`format specifier \u003cconfig_access_log_format\u003e` as used for\n :ref:`HTTP access logging \u003cconfig_access_log\u003e` applies here, however\n unknown header values are replaced with the empty string instead of `-`."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Header name/value pair that this option applies to."
                },
                "append": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Should the value be appended? If true (default), the value is appended to\n existing values. Otherwise it replaces any existing values."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Header name/value pair plus option to control append behavior.",
            "id": "envoy.config.core.v4alpha.HeaderValueOption"
        },
        "envoy.type.matcher.v4alpha.RegexMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "google_re2": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Google's RE2 regex engine."
                },
                "regex": {
                    "type": "string",
                    "description": "The regex match string. The string must be supported by the configured engine."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.",
            "id": "envoy.type.matcher.v4alpha.RegexMatcher"
        },
        "envoy.type.v3.Int64Range": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "start": {
                    "type": "string",
                    "description": "start of the range (inclusive)"
                },
                "end": {
                    "type": "string",
                    "description": "end of the range (exclusive)"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Range]\n\nSpecifies the int64 start and end of the range using half-open interval semantics [start,\n end).",
            "id": "envoy.type.v3.Int64Range"
        }
    }
}