{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address": {"properties": {"socket_address": {"properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_core.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_core.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_core.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object"}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "The UDP address of a running `statsd <https://github.com/etsy/statsd>`_\n compliant listener. If specified, statistics will be flushed to this\n address."}, "tcp_cluster_name": {"type": "string", "description": "The name of a cluster that is running a TCP `statsd\n <https://github.com/etsy/statsd>`_ compliant listener. If specified,\n Envoy will connect to this cluster to flush statistics."}, "prefix": {"type": "string", "description": "Optional custom prefix for StatsdSink. If\n specified, this will override the default prefix.\n For example:\n\n .. code-block:: json\n\n   {\n     \"prefix\" : \"envoy-prod\"\n   }\n\n will change emitted stats to\n\n .. code-block:: cpp\n\n   envoy-prod.test_counter:1|c\n   envoy-prod.test_timer:5|ms\n\n Note that the default prefix, \"envoy\", will be used if a prefix is not\n specified.\n\n Stats with default prefix:\n\n .. code-block:: cpp\n\n   envoy.test_counter:1|c\n   envoy.test_timer:5|ms"}}, "additionalProperties": true, "type": "object", "description": "Stats configuration proto schema for built-in *envoy.stat_sinks.statsd* sink. This sink does not support\n tagged metrics.\n [#extension: envoy.stat_sinks.statsd]"}