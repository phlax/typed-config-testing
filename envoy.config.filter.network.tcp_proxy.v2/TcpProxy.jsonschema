{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"stat_prefix": {"type": "string", "description": "The prefix to use when emitting :ref:`statistics\n <config_network_filters_tcp_proxy_stats>`."}, "cluster": {"type": "string", "description": "The upstream cluster to connect to."}, "weighted_clusters": {"properties": {"clusters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Name of the upstream cluster."}, "weight": {"type": "integer", "description": "When a request matches the route, the choice of an upstream cluster is\n determined by its weight. The sum of weights across all entries in the\n clusters array determines the total weight."}, "metadata_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.api.v2.core/Metadata.jsonschema", "additionalProperties": true, "description": "Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints\n in the upstream cluster with metadata matching what is set in this field will be considered\n for load balancing. Note that this will be merged with what's provided in\n :ref:`TcpProxy.metadata_match\n <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.metadata_match>`, with values\n here taking precedence. The filter name should be specified as *envoy.lb*."}}, "additionalProperties": true, "type": "object"}, "type": "array", "description": "Specifies one or more upstream clusters associated with the route."}}, "additionalProperties": true, "type": "object", "description": "Multiple upstream clusters can be specified for a given route. The\n request is routed to one of the upstream clusters based on weights\n assigned to each cluster."}, "metadata_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.api.v2.core/Metadata.jsonschema", "additionalProperties": true, "description": "Optional endpoint metadata match criteria. Only endpoints in the upstream\n cluster with metadata matching that set in metadata_match will be\n considered. The filter name should be specified as *envoy.lb*."}, "idle_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The idle timeout for connections managed by the TCP proxy filter. The idle timeout\n is defined as the period in which there are no bytes sent or received on either\n the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set\n to 0s, the timeout will be disabled.\n\n .. warning::\n   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP\n   FIN packets, etc."}, "downstream_idle_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy\n filter. The idle timeout is defined as the period in which there is no\n active traffic. If not set, there is no idle timeout. When the idle timeout\n is reached the connection will be closed. The distinction between\n downstream_idle_timeout/upstream_idle_timeout provides a means to set\n timeout based on the last byte sent on the downstream/upstream connection."}, "upstream_idle_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}, "access_log": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the access log implementation to instantiate. The name must\n match a statically registered access log. Current built-in loggers include:\n\n #. \"envoy.access_loggers.file\"\n #. \"envoy.access_loggers.http_grpc\"\n #. \"envoy.access_loggers.tcp_grpc\""}, "filter": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.filter.accesslog.v2/AccessLogFilter.jsonschema", "additionalProperties": true, "description": "Filter which is used to determine if the access log needs to be written."}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Common access log types]"}, "type": "array", "description": "Configuration for :ref:`access logs <arch_overview_access_logs>`\n emitted by the this tcp_proxy."}, "deprecated_v1": {"properties": {"routes": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"cluster": {"type": "string", "description": "The cluster to connect to when a the downstream network connection\n matches the specified criteria."}, "destination_ip_list": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.api.v2.core/CidrRange.jsonschema"}, "type": "array", "description": "An optional list of IP address subnets in the form\n \u201cip_address/xx\u201d. The criteria is satisfied if the destination IP\n address of the downstream connection is contained in at least one of\n the specified subnets. If the parameter is not specified or the list\n is empty, the destination IP address is ignored. The destination IP\n address of the downstream connection might be different from the\n addresses on which the proxy is listening if the connection has been\n redirected."}, "destination_ports": {"type": "string", "description": "An optional string containing a comma-separated list of port numbers\n or ranges. The criteria is satisfied if the destination port of the\n downstream connection is contained in at least one of the specified\n ranges. If the parameter is not specified, the destination port is\n ignored. The destination port address of the downstream connection\n might be different from the port on which the proxy is listening if\n the connection has been redirected."}, "source_ip_list": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.api.v2.core/CidrRange.jsonschema"}, "type": "array", "description": "An optional list of IP address subnets in the form\n \u201cip_address/xx\u201d. The criteria is satisfied if the source IP address\n of the downstream connection is contained in at least one of the\n specified subnets. If the parameter is not specified or the list is\n empty, the source IP address is ignored."}, "source_ports": {"type": "string", "description": "An optional string containing a comma-separated list of port numbers\n or ranges. The criteria is satisfied if the source port of the\n downstream connection is contained in at least one of the specified\n ranges. If the parameter is not specified, the source port is\n ignored."}}, "additionalProperties": true, "type": "object", "description": "A TCP proxy route consists of a set of optional L4 criteria and the\n name of a cluster. If a downstream connection matches all the\n specified criteria, the cluster in the route is used for the\n corresponding upstream connection. Routes are tried in the order\n specified until a match is found. If no match is found, the connection\n is closed. A route with no criteria is valid and always produces a\n match.\n [#next-free-field: 6]"}, "type": "array", "description": "The route table for the filter. All filter instances must have a route\n table, even if it is empty."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] Deprecated."}, "max_connect_attempts": {"additionalProperties": true, "type": "integer", "description": "The maximum number of unsuccessful connection attempts that will be made before\n giving up. If the parameter is not specified, 1 connection attempt will be made."}, "hash_policy": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"source_ip": {"additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Hash Policy]\n\nSpecifies the hash policy"}, "type": "array", "description": "Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based\n load balancing algorithms will select a host randomly. Currently the number of hash policies is\n limited to 1."}, "tunneling_config": {"properties": {"hostname": {"type": "string", "description": "The hostname to send in the synthesized CONNECT headers to the upstream proxy."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] feature in progress\n If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP\n payloads over a shared HTTP/2 tunnel. If this message is absent, the payload\n will be proxied upstream as per usual."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: TCP Proxy]\n TCP Proxy :ref:`configuration overview <config_network_filters_tcp_proxy>`.\n [#extension: envoy.filters.network.tcp_proxy]\n\n[#next-free-field: 13]", "definitions": {"envoy.api.v2.core.CidrRange": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address_prefix": {"type": "string", "description": "IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``."}, "prefix_len": {"additionalProperties": true, "type": "integer", "description": "Length of prefix, e.g. 0, 32."}}, "additionalProperties": true, "type": "object", "description": "CidrRange specifies an IP Address and a prefix length to construct\n the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.", "id": "envoy.api.v2.core.CidrRange"}, "envoy.api.v2.core.Metadata": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter_metadata": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."}}, "additionalProperties": true, "type": "object", "description": "Metadata provides additional inputs to filters based on matched listeners,\n filter chains, routes and endpoints. It is structured as a map, usually from\n filter name (in reverse DNS format) to metadata specific to the filter. Metadata\n key-values for a filter are merged as connection and request handling occurs,\n with later values for the same key overriding earlier values.\n\n An example use of metadata is providing additional values to\n http_connection_manager in the envoy.http_connection_manager.access_log\n namespace.\n\n Another example use of metadata is to per service config info in cluster metadata, which may get\n consumed by multiple filters.\n\n For load balancing, Metadata provides a means to subset cluster endpoints.\n Endpoints have a Metadata object associated and routes contain a Metadata\n object to match against. There are some well defined metadata used today for\n this purpose:\n\n * ``{\"envoy.lb\": {\"canary\": <bool> }}`` This indicates the canary status of an\n   endpoint and is also used during header processing\n   (x-envoy-upstream-canary) and for stats purposes.\n [#next-major-version: move to type/metadata/v2]", "id": "envoy.api.v2.core.Metadata"}, "envoy.config.filter.accesslog.v2.AccessLogFilter": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"status_code_filter": {"properties": {"comparison": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.filter.accesslog.v2/ComparisonFilter.jsonschema", "additionalProperties": true, "description": "Comparison."}}, "additionalProperties": true, "type": "object", "description": "Status code filter."}, "duration_filter": {"properties": {"comparison": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.filter.accesslog.v2/ComparisonFilter.jsonschema", "additionalProperties": true, "description": "Comparison."}}, "additionalProperties": true, "type": "object", "description": "Duration filter."}, "not_health_check_filter": {"additionalProperties": true, "type": "object", "description": "Not health check filter."}, "traceable_filter": {"additionalProperties": true, "type": "object", "description": "Traceable filter."}, "runtime_filter": {"properties": {"runtime_key": {"type": "string", "description": "Runtime key to get an optional overridden numerator for use in the *percent_sampled* field.\n If found in runtime, this value will replace the default numerator."}, "percent_sampled": {"properties": {"numerator": {"type": "integer", "description": "Specifies the numerator. Defaults to 0."}, "denominator": {"enum": ["HUNDRED", 0, "TEN_THOUSAND", 1, "MILLION", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final\n fractional percentage is capped at 1 (100%)."}}, "additionalProperties": true, "type": "object", "description": "The default sampling percentage. If not specified, defaults to 0% with denominator of 100."}, "use_independent_randomness": {"type": "boolean", "description": "By default, sampling pivots on the header\n :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being present. If\n :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` is present, the filter will\n consistently sample across multiple hosts based on the runtime key value and the value\n extracted from :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is\n missing, or *use_independent_randomness* is set to true, the filter will randomly sample based\n on the runtime key value alone. *use_independent_randomness* can be used for logging kill\n switches within complex nested :ref:`AndFilter\n <envoy_api_msg_config.filter.accesslog.v2.AndFilter>` and :ref:`OrFilter\n <envoy_api_msg_config.filter.accesslog.v2.OrFilter>` blocks that are easier to reason about\n from a probability perspective (i.e., setting to true will cause the filter to behave like\n an independent random variable when composed within logical operator filters)."}}, "additionalProperties": true, "type": "object", "description": "Runtime filter."}, "and_filter": {"properties": {"filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.filter.accesslog.v2/AccessLogFilter.jsonschema"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "And filter."}, "or_filter": {"properties": {"filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.filter.accesslog.v2/AccessLogFilter.jsonschema"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Or filter."}, "header_filter": {"properties": {"header": {"properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "regex_match": {"type": "string", "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex. The regex grammar used in the value field is defined\n `here <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex_match` as it is not safe for use\n   with untrusted input in all cases."}, "safe_regex_match": {"properties": {"google_re2": {"properties": {"max_program_size": {"additionalProperties": true, "type": "integer", "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."}}, "additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": "Only requests with a header which matches the specified HeaderMatcher will pass the filter\n check."}}, "additionalProperties": true, "type": "object", "description": "Header filter."}, "response_flag_filter": {"properties": {"flags": {"items": {"type": "string"}, "type": "array", "description": "Only responses with the any of the flags listed in this field will be logged.\n This field is optional. If it is not specified, then any response flag will pass\n the filter check."}}, "additionalProperties": true, "type": "object", "description": "Response flag filter."}, "grpc_status_filter": {"properties": {"statuses": {"items": {"enum": ["OK", 0, "CANCELED", 1, "UNKNOWN", 2, "INVALID_ARGUMENT", 3, "DEADLINE_EXCEEDED", 4, "NOT_FOUND", 5, "ALREADY_EXISTS", 6, "PERMISSION_DENIED", 7, "RESOURCE_EXHAUSTED", 8, "FAILED_PRECONDITION", 9, "ABORTED", 10, "OUT_OF_RANGE", 11, "UNIMPLEMENTED", 12, "INTERNAL", 13, "UNAVAILABLE", 14, "DATA_LOSS", 15, "UNAUTHENTICATED", 16]}, "type": "array", "description": "Logs only responses that have any one of the gRPC statuses in this field."}, "exclude": {"type": "boolean", "description": "If included and set to true, the filter will instead block all responses with a gRPC status or\n inferred gRPC status enumerated in statuses, and allow all other responses."}}, "additionalProperties": true, "type": "object", "description": "gRPC status filter."}, "extension_filter": {"properties": {"name": {"type": "string", "description": "The name of the filter implementation to instantiate. The name must\n match a statically registered filter."}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Extension filter."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 12]", "id": "envoy.config.filter.accesslog.v2.AccessLogFilter"}, "envoy.config.filter.accesslog.v2.ComparisonFilter": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"op": {"enum": ["EQ", 0, "GE", 1, "LE", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Comparison operator."}, "value": {"properties": {"default_value": {"type": "integer", "description": "Default value if runtime value is not available."}, "runtime_key": {"type": "string", "description": "Runtime key to get value for comparison. This value is used if defined."}}, "additionalProperties": true, "type": "object", "description": "Value to compare against."}}, "additionalProperties": true, "type": "object", "description": "Filter on an integer comparison.", "id": "envoy.config.filter.accesslog.v2.ComparisonFilter"}}}