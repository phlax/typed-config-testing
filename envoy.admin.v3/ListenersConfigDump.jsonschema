{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version_info": {"type": "string", "description": "This is the :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` in the\n last processed LDS discovery response. If there are only static bootstrap listeners, this field\n will be \"\"."}, "static_listeners": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"listener": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The listener config."}, "last_updated": {"type": "string", "description": "The timestamp when the Listener was last successfully updated.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "description": "Describes a statically loaded listener."}, "type": "array", "description": "The statically loaded listener configs."}, "dynamic_listeners": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name or unique id of this listener, pulled from the DynamicListenerState config."}, "active_state": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.admin.v3.ListenersConfigDump/DynamicListenerState.jsonschema", "additionalProperties": true, "description": "The listener state for any active listener by this name.\n These are listeners that are available to service data plane traffic."}, "warming_state": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.admin.v3.ListenersConfigDump/DynamicListenerState.jsonschema", "additionalProperties": true, "description": "The listener state for any warming listener by this name.\n These are listeners that are currently undergoing warming in preparation to service data\n plane traffic. Note that if attempting to recreate an Envoy configuration from a\n configuration dump, the warming listeners should generally be discarded."}, "draining_state": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.admin.v3.ListenersConfigDump/DynamicListenerState.jsonschema", "additionalProperties": true, "description": "The listener state for any draining listener by this name.\n These are listeners that are currently undergoing draining in preparation to stop servicing\n data plane traffic. Note that if attempting to recreate an Envoy configuration from a\n configuration dump, the draining listeners should generally be discarded."}, "error_state": {"properties": {"failed_configuration": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "What the component configuration would have been if the update had succeeded."}, "last_update_attempt": {"type": "string", "description": "Time of the latest failed update attempt.", "format": "date-time"}, "details": {"type": "string", "description": "Details about the last failed update attempt."}}, "additionalProperties": true, "type": "object", "description": "Set if the last update failed, cleared after the next successful update."}}, "additionalProperties": true, "type": "object", "description": "Describes a dynamically loaded listener via the LDS API.\n [#next-free-field: 6]"}, "type": "array", "description": "State for any warming, active, or draining listeners."}}, "additionalProperties": true, "type": "object", "description": "Envoy's listener manager fills this message with all currently known listeners. Listener\n configuration information can be used to recreate an Envoy configuration by populating all\n listeners as static listeners or by returning them in a LDS response.", "definitions": {"envoy.admin.v3.ListenersConfigDump.DynamicListenerState": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version_info": {"type": "string", "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` field at the time\n that the listener was loaded. In the future, discrete per-listener versions may be supported\n by the API."}, "listener": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The listener config."}, "last_updated": {"type": "string", "description": "The timestamp when the Listener was last successfully updated.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "id": "envoy.admin.v3.ListenersConfigDump.DynamicListenerState"}}}