{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "static_route_configs": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "route_config": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "The route config."
                    },
                    "last_updated": {
                        "type": "string",
                        "description": "The timestamp when the Route was last updated.",
                        "format": "date-time"
                    }
                },
                "additionalProperties": true,
                "type": "object"
            },
            "type": "array",
            "description": "The statically loaded route configs."
        },
        "dynamic_route_configs": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "version_info": {
                        "type": "string",
                        "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info \u003cenvoy_api_field_service.discovery.v3.DiscoveryResponse.version_info\u003e` field at the time that\n the route configuration was loaded."
                    },
                    "route_config": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "The route config."
                    },
                    "last_updated": {
                        "type": "string",
                        "description": "The timestamp when the Route was last updated.",
                        "format": "date-time"
                    }
                },
                "additionalProperties": true,
                "type": "object"
            },
            "type": "array",
            "description": "The dynamically loaded route configs."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Envoy's RDS implementation fills this message with all currently loaded routes, as described by\n their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration\n or defined inline while configuring listeners are separated from those configured dynamically via RDS.\n Route configuration information can be used to recreate an Envoy configuration by populating all routes\n as static routes or by returning them in RDS responses."
}