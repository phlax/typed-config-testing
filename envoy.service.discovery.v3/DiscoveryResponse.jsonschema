{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version_info": {"type": "string", "description": "The version of the response data."}, "resources": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(&foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := &pb.Foo{...}\n      any, err := anypb.New(foo)\n      if err != nil {\n        ...\n      }\n      ...\n      foo := &pb.Foo{}\n      if err := any.UnmarshalTo(foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": <string>,\n       \"lastName\": <string>\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }"}, "type": "array", "description": "The response resources. These resources are typed and depend on the API being called."}, "canary": {"type": "boolean", "description": "[#not-implemented-hide:]\n Canary is used to support two Envoy command line flags:\n\n * --terminate-on-canary-transition-failure. When set, Envoy is able to\n   terminate if it detects that configuration is stuck at canary. Consider\n   this example sequence of updates:\n   - Management server applies a canary config successfully.\n   - Management server rolls back to a production config.\n   - Envoy rejects the new production config.\n   Since there is no sensible way to continue receiving configuration\n   updates, Envoy will then terminate and apply production config from a\n   clean slate.\n * --dry-run-canary. When set, a canary response will never be applied, only\n   validated via a dry run."}, "type_url": {"type": "string", "description": "Type URL for resources. Identifies the xDS API when muxing over ADS.\n Must be consistent with the type_url in the 'resources' repeated Any (if non-empty)."}, "nonce": {"type": "string", "description": "For gRPC based subscriptions, the nonce provides a way to explicitly ack a\n specific DiscoveryResponse in a following DiscoveryRequest. Additional\n messages may have been sent by Envoy to the management server for the\n previous version on the stream prior to this DiscoveryResponse, that were\n unprocessed at response send time. The nonce allows the management server\n to ignore any further DiscoveryRequests for the previous version until a\n DiscoveryRequest bearing the nonce. The nonce is optional and is not\n required for non-stream based xDS implementations."}, "control_plane": {"properties": {"identifier": {"type": "string", "description": "An opaque control plane identifier that uniquely identifies an instance\n of control plane. This can be used to identify which control plane instance,\n the Envoy is connected to."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n The control plane instance that sent the response."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 7]"}