{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version_info": {"type": "string", "description": "This is the :ref:`version_info <envoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info>` in the\n last processed CDS discovery response. If there are only static bootstrap clusters, this field\n will be \"\"."}, "static_clusters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"cluster": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The cluster config."}, "last_updated": {"type": "string", "description": "The timestamp when the Cluster was last updated.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "description": "Describes a statically loaded cluster."}, "type": "array", "description": "The statically loaded cluster configs."}, "dynamic_active_clusters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster"}, "type": "array", "description": "The dynamically loaded active clusters. These are clusters that are available to service\n data plane traffic."}, "dynamic_warming_clusters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster"}, "type": "array", "description": "The dynamically loaded warming clusters. These are clusters that are currently undergoing\n warming in preparation to service data plane traffic. Note that if attempting to recreate an\n Envoy configuration from a configuration dump, the warming clusters should generally be\n discarded."}}, "additionalProperties": true, "type": "object", "description": "Envoy's cluster manager fills this message with all currently known clusters. Cluster\n configuration information can be used to recreate an Envoy configuration by populating all\n clusters as static clusters or by returning them in a CDS response.", "definitions": {"envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version_info": {"type": "string", "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info <envoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info>` field at the time\n that the cluster was loaded. In the future, discrete per-cluster versions may be supported by\n the API."}, "cluster": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The cluster config."}, "last_updated": {"type": "string", "description": "The timestamp when the Cluster was last updated.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "description": "Describes a dynamically loaded cluster via the CDS API.", "id": "envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster"}}}