{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "prefix": {
            "type": "string",
            "description": "If specified, the route is a prefix rule meaning that the prefix must\n match the beginning of the *:path* header."
        },
        "path": {
            "type": "string",
            "description": "If specified, the route is an exact path rule meaning that the path must\n exactly match the *:path* header once the query string is removed."
        },
        "safe_regex": {
            "$ref": "envoy.type.matcher.v4alpha.RegexMatcher",
            "additionalProperties": true,
            "description": "If specified, the route is a regular expression rule meaning that the\n regex must match the *:path* header once the query string is removed. The entire path\n (without the query string) must match the regex. The rule will not match if only a\n subsequence of the *:path* header matches the regex.\n\n [#next-major-version: In the v3 API we should redo how path specification works such\n that we utilize StringMatcher, and additionally have consistent options around whether we\n strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive\n to deprecate the existing options. We should even consider whether we want to do away with\n path_specifier entirely and just rely on a set of header matchers which can already match\n on :path, etc. The issue with that is it is unclear how to generically deal with query string\n stripping. This needs more thought.]"
        },
        "connect_matcher": {
            "additionalProperties": true,
            "type": "object",
            "description": "If this is used as the matcher, the matcher will only match CONNECT requests.\n Note that this will not match HTTP/2 upgrade-style CONNECT requests\n (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style\n upgrades.\n This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,\n where Extended CONNECT requests may have a path, the path matchers will work if\n there is a path present.\n Note that CONNECT support is currently considered alpha in Envoy.\n [#comment:TODO(htuch): Replace the above comment with an alpha tag."
        },
        "case_sensitive": {
            "additionalProperties": true,
            "type": "boolean",
            "description": "Indicates that prefix/path matching should be case sensitive. The default\n is true."
        },
        "runtime_fraction": {
            "properties": {
                "default_value": {
                    "properties": {
                        "numerator": {
                            "type": "integer",
                            "description": "Specifies the numerator. Defaults to 0."
                        },
                        "denominator": {
                            "enum": [
                                "HUNDRED",
                                0,
                                "TEN_THOUSAND",
                                1,
                                "MILLION",
                                2
                            ],
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final\n fractional percentage is capped at 1 (100%)."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Default value if the runtime value's for the numerator/denominator keys are not available."
                },
                "runtime_key": {
                    "type": "string",
                    "description": "Runtime key for a YAML representation of a FractionalPercent."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Indicates that the route should additionally match on a runtime key. Every time the route\n is considered for a match, it must also fall under the percentage of matches indicated by\n this field. For some fraction N/D, a random number in the range [0,D) is selected. If the\n number is \u003c= the value of the numerator N, or if the key is not present, the default\n value, the router continues to evaluate the remaining match criteria. A runtime_fraction\n route configuration can be used to roll out route changes in a gradual manner without full\n code/config deploys. Refer to the :ref:`traffic shifting\n \u003cconfig_http_conn_man_route_table_traffic_splitting_shift\u003e` docs for additional documentation.\n\n .. note::\n\n    Parsing this field is implemented such that the runtime key's data may be represented\n    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an\n    integer with the assumption that the value is an integral percentage out of 100. For\n    instance, a runtime key lookup returning the value \"42\" would parse as a FractionalPercent\n    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics."
        },
        "headers": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the header in the request."
                    },
                    "exact_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on the value of the header."
                    },
                    "safe_regex_match": {
                        "$ref": "envoy.type.matcher.v4alpha.RegexMatcher",
                        "additionalProperties": true,
                        "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."
                    },
                    "range_match": {
                        "properties": {
                            "start": {
                                "type": "string",
                                "description": "start of the range (inclusive)"
                            },
                            "end": {
                                "type": "string",
                                "description": "end of the range (exclusive)"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""
                    },
                    "present_match": {
                        "type": "boolean",
                        "description": "If specified, header match will be performed based on whether the header is in the\n request."
                    },
                    "prefix_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."
                    },
                    "suffix_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."
                    },
                    "contains_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."
                    },
                    "invert_match": {
                        "type": "boolean",
                        "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   \u003cenvoy_api_field_config.route.v4alpha.HeaderMatcher.present_match\u003e`. i.e, a request that has the :ref:`name\n   \u003cenvoy_api_field_config.route.v4alpha.HeaderMatcher.name\u003e` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 13]"
            },
            "type": "array",
            "description": "Specifies a set of headers that the route should match on. The router will\n check the request’s headers against all the specified headers in the route\n config. A match will happen if all the headers in the route are present in\n the request with the same values (or based on presence if the value field\n is not in the config)."
        },
        "query_parameters": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of a key that must be present in the requested\n *path*'s query string."
                    },
                    "string_match": {
                        "properties": {
                            "exact": {
                                "type": "string",
                                "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                            },
                            "prefix": {
                                "type": "string",
                                "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                            },
                            "suffix": {
                                "type": "string",
                                "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                            },
                            "safe_regex": {
                                "$ref": "envoy.type.matcher.v4alpha.RegexMatcher",
                                "additionalProperties": true,
                                "description": "The input string must match the regular expression specified here."
                            },
                            "contains": {
                                "type": "string",
                                "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"
                            },
                            "ignore_case": {
                                "type": "boolean",
                                "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Specifies whether a query parameter value should match against a string."
                    },
                    "present_match": {
                        "type": "boolean",
                        "description": "Specifies whether a query parameter should be present."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": "Query parameter matching treats the query string of a request's :path header\n as an ampersand-separated list of keys and/or key=value elements.\n [#next-free-field: 7]"
            },
            "type": "array",
            "description": "Specifies a set of URL query parameters on which the route should\n match. The router will check the query string from the *path* header\n against all the specified query parameters. If the number of specified\n query parameters is nonzero, they all must match the *path* header's\n query string for a match to occur."
        },
        "grpc": {
            "additionalProperties": true,
            "type": "object",
            "description": "If specified, only gRPC requests will be matched. The router will check\n that the content-type header has a application/grpc or one of the various\n application/grpc+ values."
        },
        "tls_context": {
            "properties": {
                "presented": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "If specified, the route will match against whether or not a certificate is presented.\n If not specified, certificate presentation status (true or false) will not be considered when route matching."
                },
                "validated": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "If specified, the route will match against whether or not a certificate is validated.\n If not specified, certificate validation status (true or false) will not be considered when route matching."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "If specified, the client tls context will be matched against the defined\n match options.\n\n [#next-major-version: unify with RBAC]"
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#next-free-field: 13]",
    "definitions": {
        "envoy.type.matcher.v4alpha.RegexMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "google_re2": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Google's RE2 regex engine."
                },
                "regex": {
                    "type": "string",
                    "description": "The regex match string. The string must be supported by the configured engine."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.",
            "id": "envoy.type.matcher.v4alpha.RegexMatcher"
        }
    }
}