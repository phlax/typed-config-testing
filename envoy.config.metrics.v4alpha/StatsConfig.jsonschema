{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"stats_tags": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"tag_name": {"type": "string", "description": "Attaches an identifier to the tag values to identify the tag being in the\n sink. Envoy has a set of default names and regexes to extract dynamic\n portions of existing stats, which can be found in :repo:`well_known_names.h\n <source/common/config/well_known_names.h>` in the Envoy repository. If a :ref:`tag_name\n <envoy_api_field_config.metrics.v4alpha.TagSpecifier.tag_name>` is provided in the config and\n neither :ref:`regex <envoy_api_field_config.metrics.v4alpha.TagSpecifier.regex>` or\n :ref:`fixed_value <envoy_api_field_config.metrics.v4alpha.TagSpecifier.fixed_value>` were specified,\n Envoy will attempt to find that name in its set of defaults and use the accompanying regex.\n\n .. note::\n\n   It is invalid to specify the same tag name twice in a config."}, "regex": {"type": "string", "description": "Designates a tag to strip from the tag extracted name and provide as a named\n tag value for all statistics. This will only occur if any part of the name\n matches the regex provided with one or more capture groups.\n\n The first capture group identifies the portion of the name to remove. The\n second capture group (which will normally be nested inside the first) will\n designate the value of the tag for the statistic. If no second capture\n group is provided, the first will also be used to set the value of the tag.\n All other capture groups will be ignored.\n\n Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and\n one tag specifier:\n\n .. code-block:: json\n\n   {\n     \"tag_name\": \"envoy.cluster_name\",\n     \"regex\": \"^cluster\\\\.((.+?)\\\\.)\"\n   }\n\n Note that the regex will remove ``foo_cluster.`` making the tag extracted\n name ``cluster.upstream_rq_timeout`` and the tag value for\n ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no\n ``.`` character because of the second capture group).\n\n Example 2. a stat name\n ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two\n tag specifiers:\n\n .. code-block:: json\n\n   [\n     {\n       \"tag_name\": \"envoy.http_user_agent\",\n       \"regex\": \"^http(?=\\\\.).*?\\\\.user_agent\\\\.((.+?)\\\\.)\\\\w+?$\"\n     },\n     {\n       \"tag_name\": \"envoy.http_conn_manager_prefix\",\n       \"regex\": \"^http\\\\.((.*?)\\\\.)\"\n     }\n   ]\n\n The two regexes of the specifiers will be processed in the definition order.\n\n The first regex will remove ``ios.``, leaving the tag extracted name\n ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag\n ``envoy.http_user_agent`` will be added with tag value ``ios``.\n\n The second regex will remove ``connection_manager_1.`` from the tag\n extracted name produced by the first regex\n ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving\n ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag\n ``envoy.http_conn_manager_prefix`` will be added with the tag value\n ``connection_manager_1``."}, "fixed_value": {"type": "string", "description": "Specifies a fixed tag value for the ``tag_name``."}}, "additionalProperties": true, "type": "object", "description": "Designates a tag name and value pair. The value may be either a fixed value\n or a regex providing the value via capture groups. The specified tag will be\n unconditionally set if a fixed value, otherwise it will only be set if one\n or more capture groups in the regex match."}, "type": "array", "description": "Each stat name is iteratively processed through these tag specifiers.\n When a tag is matched, the first capture group is removed from the name so\n later :ref:`TagSpecifiers <envoy_api_msg_config.metrics.v4alpha.TagSpecifier>` cannot match that\n same portion of the match."}, "use_all_default_tags": {"additionalProperties": true, "type": "boolean", "description": "Use all default tag regexes specified in Envoy. These can be combined with\n custom tags specified in :ref:`stats_tags\n <envoy_api_field_config.metrics.v4alpha.StatsConfig.stats_tags>`. They will be processed before\n the custom tags.\n\n .. note::\n\n   If any default tags are specified twice, the config will be considered\n   invalid.\n\n See :repo:`well_known_names.h <source/common/config/well_known_names.h>` for a list of the\n default tags in Envoy.\n\n If not provided, the value is assumed to be true."}, "stats_matcher": {"properties": {"reject_all": {"type": "boolean", "description": "If `reject_all` is true, then all stats are disabled. If `reject_all` is false, then all\n stats are enabled."}, "exclusion_list": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/ListStringMatcher.jsonschema", "additionalProperties": true, "description": "Exclusive match. All stats are enabled except for those matching one of the supplied\n StringMatcher protos."}, "inclusion_list": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/ListStringMatcher.jsonschema", "additionalProperties": true, "description": "Inclusive match. No stats are enabled except for those matching one of the supplied\n StringMatcher protos."}}, "additionalProperties": true, "type": "object", "description": "Inclusion/exclusion matcher for stat name creation. If not provided, all stats are instantiated\n as normal. Preventing the instantiation of certain families of stats can improve memory\n performance for Envoys running especially large configs.\n\n .. warning::\n   Excluding stats may affect Envoy's behavior in undocumented ways. See\n   `issue #8771 <https://github.com/envoyproxy/envoy/issues/8771>`_ for more information.\n   If any unexpected behavior changes are observed, please open a new issue immediately."}, "histogram_bucket_settings": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/StringMatcher.jsonschema", "additionalProperties": true, "description": "The stats that this rule applies to. The match is applied to the original stat name\n before tag-extraction, for example `cluster.exampleclustername.upstream_cx_length_ms`."}, "buckets": {"items": {"type": "number"}, "type": "array", "description": "Each value is the upper bound of a bucket. Each bucket must be greater than 0 and unique.\n The order of the buckets does not matter."}}, "additionalProperties": true, "type": "object", "description": "Specifies a matcher for stats and the buckets that matching stats should use."}, "type": "array", "description": "Defines rules for setting the histogram buckets. Rules are evaluated in order, and the first\n match is applied. If no match is found (or if no rules are set), the following default buckets\n are used:\n\n   .. code-block:: json\n\n     [\n       0.5,\n       1,\n       5,\n       10,\n       25,\n       50,\n       100,\n       250,\n       500,\n       1000,\n       2500,\n       5000,\n       10000,\n       30000,\n       60000,\n       300000,\n       600000,\n       1800000,\n       3600000\n     ]"}}, "additionalProperties": true, "type": "object", "description": "Statistics configuration such as tagging.", "definitions": {"envoy.type.matcher.v4alpha.ListStringMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"patterns": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.type.matcher.v4alpha/StringMatcher.jsonschema"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Specifies a list of ways to match a string.", "id": "envoy.type.matcher.v4alpha.ListStringMatcher"}, "envoy.type.matcher.v4alpha.StringMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "safe_regex": {"properties": {"google_re2": {"additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "The input string must match the regular expression specified here."}, "contains": {"type": "string", "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 8]", "id": "envoy.type.matcher.v4alpha.StringMatcher"}}}