{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "node_matchers": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "node_id": {
                        "$ref": "envoy.type.matcher.v3.StringMatcher",
                        "additionalProperties": true,
                        "description": "Specifies match criteria on the node id."
                    },
                    "node_metadatas": {
                        "items": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "properties": {
                                "path": {
                                    "items": {
                                        "$schema": "http://json-schema.org/draft-04/schema#",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "If specified, use the key to retrieve the value in a Struct."
                                            }
                                        },
                                        "additionalProperties": true,
                                        "type": "object",
                                        "description": "Specifies the segment in a path to retrieve value from Struct."
                                    },
                                    "type": "array",
                                    "description": "The path to retrieve the Value from the Struct."
                                },
                                "value": {
                                    "$ref": "envoy.type.matcher.v3.ValueMatcher",
                                    "additionalProperties": true,
                                    "description": "The StructMatcher is matched if the value retrieved by path is matched to this value."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "[#protodoc-title: Struct matcher]\n\nStructMatcher provides a general interface to check if a given value is matched in\n google.protobuf.Struct. It uses `path` to retrieve the value\n from the struct and then check if it's matched to the specified value.\n\n For example, for the following Struct:\n\n .. code-block:: yaml\n\n        fields:\n          a:\n            struct_value:\n              fields:\n                b:\n                  struct_value:\n                    fields:\n                      c:\n                        string_value: pro\n                t:\n                  list_value:\n                    values:\n                      - string_value: m\n                      - string_value: n\n\n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value \"pro\"\n from the Metadata which is matched to the specified prefix match.\n\n .. code-block:: yaml\n\n    path:\n    - key: a\n    - key: b\n    - key: c\n    value:\n      string_match:\n        prefix: pr\n\n The following StructMatcher is matched as the code will match one of the string values in the\n list at the path [a, t].\n\n .. code-block:: yaml\n\n    path:\n    - key: a\n    - key: t\n    value:\n      list_match:\n        one_of:\n          string_match:\n            exact: m\n\n An example use of StructMatcher is to match metadata in envoy.v*.core.Node."
                        },
                        "type": "array",
                        "description": "Specifies match criteria on the node metadata."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": "[#protodoc-title: Node matcher]\n\nSpecifies the way to match a Node.\n The match follows AND semantics."
            },
            "type": "array",
            "description": "Management server can use these match criteria to identify clients.\n The match follows OR semantics."
        },
        "node": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An opaque node identifier for the Envoy node. This also provides the local\n service node name. It should be set if any of the following features are\n used: :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`CDS\n \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n \u003carch_overview_tracing\u003e`, either in this message or via\n :option:`--service-node`."
                },
                "cluster": {
                    "type": "string",
                    "description": "Defines the local service cluster name where Envoy is running. Though\n optional, it should be set if any of the following features are used:\n :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`health check cluster\n verification\n \u003cenvoy_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher\u003e`,\n :ref:`runtime override directory \u003cenvoy_api_msg_config.bootstrap.v3.Runtime\u003e`,\n :ref:`user agent addition\n \u003cenvoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent\u003e`,\n :ref:`HTTP global rate limiting \u003cconfig_http_filters_rate_limit\u003e`,\n :ref:`CDS \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n \u003carch_overview_tracing\u003e`, either in this message or via\n :option:`--service-cluster`."
                },
                "metadata": {
                    "properties": {
                        "fields": {
                            "additionalProperties": {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Unordered map of dynamically typed values."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Opaque metadata extending the node identifier. Envoy will pass this\n directly to the management server."
                },
                "locality": {
                    "properties": {
                        "region": {
                            "type": "string",
                            "description": "Region this :ref:`zone \u003cenvoy_api_field_config.core.v3.Locality.zone\u003e` belongs to."
                        },
                        "zone": {
                            "type": "string",
                            "description": "Defines the local service zone where Envoy is running. Though optional, it\n should be set if discovery service routing is used and the discovery\n service exposes :ref:`zone data \u003cenvoy_api_field_config.endpoint.v3.LocalityLbEndpoints.locality\u003e`,\n either in this message or via :option:`--service-zone`. The meaning of zone\n is context dependent, e.g. `Availability Zone (AZ)\n \u003chttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\u003e`_\n on AWS, `Zone \u003chttps://cloud.google.com/compute/docs/regions-zones/\u003e`_ on\n GCP, etc."
                        },
                        "sub_zone": {
                            "type": "string",
                            "description": "When used for locality of upstream hosts, this field further splits zone\n into smaller chunks of sub-zones so they can be load balanced\n independently."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Locality specifying where the Envoy instance is running."
                },
                "user_agent_name": {
                    "type": "string",
                    "description": "Free-form string that identifies the entity requesting config.\n E.g. \"envoy\" or \"grpc\""
                },
                "user_agent_version": {
                    "type": "string",
                    "description": "Free-form string that identifies the version of the entity requesting config.\n E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\""
                },
                "user_agent_build_version": {
                    "$ref": "envoy.config.core.v3.BuildVersion",
                    "additionalProperties": true,
                    "description": "Structured version of the entity requesting config."
                },
                "extensions": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "This is the name of the Envoy filter as specified in the Envoy\n configuration, e.g. envoy.filters.http.router, com.acme.widget."
                            },
                            "category": {
                                "type": "string",
                                "description": "Category of the extension.\n Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\"\n for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from\n acme.com vendor.\n [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]"
                            },
                            "type_descriptor": {
                                "type": "string",
                                "description": "[#not-implemented-hide:] Type descriptor of extension configuration proto.\n [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]\n [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]"
                            },
                            "version": {
                                "$ref": "envoy.config.core.v3.BuildVersion",
                                "additionalProperties": true,
                                "description": "The version is a property of the extension and maintained independently\n of other extensions and the Envoy API.\n This field is not set when extension did not provide version information."
                            },
                            "disabled": {
                                "type": "boolean",
                                "description": "Indicates that the extension is present but was disabled via dynamic configuration."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Version and identification for an Envoy extension.\n [#next-free-field: 6]"
                    },
                    "type": "array",
                    "description": "List of extensions and their versions supported by the node."
                },
                "client_features": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Client feature support list. These are well known features described\n in the Envoy API repository for a given major version of an API. Client features\n use reverse DNS naming scheme, for example `com.acme.feature`.\n See :ref:`the list of features \u003cclient_features\u003e` that xDS client may\n support."
                },
                "listening_addresses": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "socket_address": {
                                "properties": {
                                    "protocol": {
                                        "enum": [
                                            "TCP",
                                            0,
                                            "UDP",
                                            1
                                        ],
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer"
                                            }
                                        ]
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "The address for this socket. :ref:`Listeners \u003cconfig_listeners\u003e` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch \u003cenvoy_api_msg_config.listener.v3.FilterChainMatch\u003e`.] When used\n within an upstream :ref:`BindConfig \u003cenvoy_api_msg_config.core.v3.BindConfig\u003e`, the address\n controls the source address of outbound connections. For :ref:`clusters\n \u003cenvoy_api_msg_config.cluster.v3.Cluster\u003e`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name \u003cenvoy_api_field_config.core.v3.SocketAddress.resolver_name\u003e`."
                                    },
                                    "port_value": {
                                        "type": "integer"
                                    },
                                    "named_port": {
                                        "type": "string",
                                        "description": "This is only valid if :ref:`resolver_name\n \u003cenvoy_api_field_config.core.v3.SocketAddress.resolver_name\u003e` is specified below and the\n named resolver is capable of named port resolution."
                                    },
                                    "resolver_name": {
                                        "type": "string",
                                        "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."
                                    },
                                    "ipv4_compat": {
                                        "type": "boolean",
                                        "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n \u003chttps://tools.ietf.org/html/rfc3493#page-11\u003e`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:\u003cIPv4-address\u003e``."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "pipe": {
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."
                                    },
                                    "mode": {
                                        "type": "integer",
                                        "description": "The mode for the Pipe. Not applicable for abstract sockets."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "envoy_internal_address": {
                                "properties": {
                                    "server_listener_name": {
                                        "type": "string",
                                        "description": "[#not-implemented-hide:] The :ref:`listener name \u003cenvoy_api_field_config.listener.v3.Listener.name\u003e` of the destination internal listener."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "[#not-implemented-hide:]"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Addresses specify either a logical or physical address and port, which are\n used to tell Envoy where to bind/listen, connect to upstream and find\n management servers."
                    },
                    "type": "array",
                    "description": "Known listening ports on the node as a generic hint to the management server\n for filtering :ref:`listeners \u003cconfig_listeners\u003e` to be returned. For example,\n if there is a listener bound to port 80, the list can optionally contain the\n SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "The node making the csds request."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Request for client status of clients identified by a list of NodeMatchers.",
    "definitions": {
        "envoy.config.core.v3.BuildVersion": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "version": {
                    "properties": {
                        "major_number": {
                            "type": "integer"
                        },
                        "minor_number": {
                            "type": "integer"
                        },
                        "patch": {
                            "type": "integer"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "SemVer version of extension."
                },
                "metadata": {
                    "properties": {
                        "fields": {
                            "additionalProperties": {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Unordered map of dynamically typed values."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Free-form build information.\n Envoy defines several well known keys in the source/common/version/version.h file"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "BuildVersion combines SemVer version of extension with free-form build information\n (i.e. 'alpha', 'private-build') as a set of strings.",
            "id": "envoy.config.core.v3.BuildVersion"
        },
        "envoy.type.matcher.v3.StringMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                },
                "prefix": {
                    "type": "string",
                    "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                },
                "suffix": {
                    "type": "string",
                    "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                },
                "safe_regex": {
                    "properties": {
                        "google_re2": {
                            "properties": {
                                "max_program_size": {
                                    "additionalProperties": true,
                                    "type": "integer",
                                    "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Google's RE2 regex engine."
                        },
                        "regex": {
                            "type": "string",
                            "description": "The regex match string. The string must be supported by the configured engine."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The input string must match the regular expression specified here."
                },
                "contains": {
                    "type": "string",
                    "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"
                },
                "ignore_case": {
                    "type": "boolean",
                    "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 8]",
            "id": "envoy.type.matcher.v3.StringMatcher"
        },
        "envoy.type.matcher.v3.ValueMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "null_match": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a NullValue."
                },
                "double_match": {
                    "properties": {
                        "range": {
                            "properties": {
                                "start": {
                                    "type": "number",
                                    "description": "start of the range (inclusive)"
                                },
                                "end": {
                                    "type": "number",
                                    "description": "end of the range (exclusive)"
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "If specified, the input double value must be in the range specified here.\n Note: The range is using half-open interval semantics [start, end)."
                        },
                        "exact": {
                            "type": "number",
                            "description": "If specified, the input double value must be equal to the value specified here."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a double value and is\n matched to this field."
                },
                "string_match": {
                    "$ref": "envoy.type.matcher.v3.StringMatcher",
                    "additionalProperties": true,
                    "description": "If specified, a match occurs if and only if the target value is a string value and is\n matched to this field."
                },
                "bool_match": {
                    "type": "boolean",
                    "description": "If specified, a match occurs if and only if the target value is a bool value and is equal\n to this field."
                },
                "present_match": {
                    "type": "boolean",
                    "description": "If specified, value match will be performed based on whether the path is referring to a\n valid primitive value in the metadata. If the path is referring to a non-primitive value,\n the result is always not matched."
                },
                "list_match": {
                    "properties": {
                        "one_of": {
                            "$ref": "envoy.type.matcher.v3.ValueMatcher",
                            "additionalProperties": true,
                            "description": "If specified, at least one of the values in the list must match the value specified."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a list value and\n is matched to this field."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Value matcher]\n\nSpecifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.\n StructValue is not supported and is always not matched.\n [#next-free-field: 7]",
            "id": "envoy.type.matcher.v3.ValueMatcher"
        }
    }
}