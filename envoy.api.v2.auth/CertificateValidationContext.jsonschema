{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "trusted_ca": {
            "$ref": "envoy.api.v2.core.DataSource",
            "additionalProperties": true,
            "description": "TLS certificate data containing certificate authority certificates to use in verifying\n a presented peer certificate (e.g. server certificate for clusters or client certificate\n for listeners). If not specified and a peer certificate is presented it will not be\n verified. By default, a client certificate is optional, unless one of the additional\n options (:ref:`require_client_certificate\n \u003cenvoy_api_field_auth.DownstreamTlsContext.require_client_certificate\u003e`,\n :ref:`verify_certificate_spki\n \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_spki\u003e`,\n :ref:`verify_certificate_hash\n \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_hash\u003e`, or\n :ref:`match_subject_alt_names\n \u003cenvoy_api_field_auth.CertificateValidationContext.match_subject_alt_names\u003e`) is also\n specified.\n\n It can optionally contain certificate revocation lists, in which case Envoy will verify\n that the presented peer certificate has not been revoked by one of the included CRLs.\n\n See :ref:`the TLS overview \u003carch_overview_ssl_enabling_verification\u003e` for a list of common\n system CA locations."
        },
        "verify_certificate_spki": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "An optional list of base64-encoded SHA-256 hashes. If specified, Envoy will verify that the\n SHA-256 of the DER-encoded Subject Public Key Information (SPKI) of the presented certificate\n matches one of the specified values.\n\n A base64-encoded SHA-256 of the Subject Public Key Information (SPKI) of the certificate\n can be generated with the following command:\n\n .. code-block:: bash\n\n   $ openssl x509 -in path/to/client.crt -noout -pubkey\n     | openssl pkey -pubin -outform DER\n     | openssl dgst -sha256 -binary\n     | openssl enc -base64\n   NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\n\n This is the format used in HTTP Public Key Pinning.\n\n When both:\n :ref:`verify_certificate_hash\n \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_hash\u003e` and\n :ref:`verify_certificate_spki\n \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_spki\u003e` are specified,\n a hash matching value from either of the lists will result in the certificate being accepted.\n\n .. attention::\n\n   This option is preferred over :ref:`verify_certificate_hash\n   \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_hash\u003e`,\n   because SPKI is tied to a private key, so it doesn't change when the certificate\n   is renewed using the same private key."
        },
        "verify_certificate_hash": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "An optional list of hex-encoded SHA-256 hashes. If specified, Envoy will verify that\n the SHA-256 of the DER-encoded presented certificate matches one of the specified values.\n\n A hex-encoded SHA-256 of the certificate can be generated with the following command:\n\n .. code-block:: bash\n\n   $ openssl x509 -in path/to/client.crt -outform DER | openssl dgst -sha256 | cut -d\" \" -f2\n   df6ff72fe9116521268f6f2dd4966f51df479883fe7037b39f75916ac3049d1a\n\n A long hex-encoded and colon-separated SHA-256 (a.k.a. \"fingerprint\") of the certificate\n can be generated with the following command:\n\n .. code-block:: bash\n\n   $ openssl x509 -in path/to/client.crt -noout -fingerprint -sha256 | cut -d\"=\" -f2\n   DF:6F:F7:2F:E9:11:65:21:26:8F:6F:2D:D4:96:6F:51:DF:47:98:83:FE:70:37:B3:9F:75:91:6A:C3:04:9D:1A\n\n Both of those formats are acceptable.\n\n When both:\n :ref:`verify_certificate_hash\n \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_hash\u003e` and\n :ref:`verify_certificate_spki\n \u003cenvoy_api_field_auth.CertificateValidationContext.verify_certificate_spki\u003e` are specified,\n a hash matching value from either of the lists will result in the certificate being accepted."
        },
        "verify_subject_alt_name": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "An optional list of Subject Alternative Names. If specified, Envoy will verify that the\n Subject Alternative Name of the presented certificate matches one of the specified values.\n\n .. attention::\n\n   Subject Alternative Names are easily spoofable and verifying only them is insecure,\n   therefore this option must be used together with :ref:`trusted_ca\n   \u003cenvoy_api_field_auth.CertificateValidationContext.trusted_ca\u003e`."
        },
        "match_subject_alt_names": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "exact": {
                        "type": "string",
                        "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                    },
                    "suffix": {
                        "type": "string",
                        "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                    },
                    "regex": {
                        "type": "string",
                        "description": "The input string must match the regular expression specified here.\n The regex grammar is defined `here\n \u003chttps://en.cppreference.com/w/cpp/regex/ecmascript\u003e`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex` as it is not safe for use with\n   untrusted input in all cases."
                    },
                    "safe_regex": {
                        "properties": {
                            "google_re2": {
                                "properties": {
                                    "max_program_size": {
                                        "additionalProperties": true,
                                        "type": "integer",
                                        "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "Google's RE2 regex engine."
                            },
                            "regex": {
                                "type": "string",
                                "description": "The regex match string. The string must be supported by the configured engine."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "The input string must match the regular expression specified here."
                    },
                    "ignore_case": {
                        "type": "boolean",
                        "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 7]"
            },
            "type": "array",
            "description": "An optional list of Subject Alternative name matchers. Envoy will verify that the\n Subject Alternative Name of the presented certificate matches one of the specified matches.\n\n When a certificate has wildcard DNS SAN entries, to match a specific client, it should be\n configured with exact match type in the :ref:`string matcher \u003cenvoy_api_msg_type.matcher.StringMatcher\u003e`.\n For example if the certificate has \"\\*.example.com\" as DNS SAN entry, to allow only \"api.example.com\",\n it should be configured as shown below.\n\n .. code-block:: yaml\n\n  match_subject_alt_names:\n    exact: \"api.example.com\"\n\n .. attention::\n\n   Subject Alternative Names are easily spoofable and verifying only them is insecure,\n   therefore this option must be used together with :ref:`trusted_ca\n   \u003cenvoy_api_field_auth.CertificateValidationContext.trusted_ca\u003e`."
        },
        "require_ocsp_staple": {
            "additionalProperties": true,
            "type": "boolean",
            "description": "[#not-implemented-hide:] Must present a signed time-stamped OCSP response."
        },
        "require_signed_certificate_timestamp": {
            "additionalProperties": true,
            "type": "boolean",
            "description": "[#not-implemented-hide:] Must present signed certificate time-stamp."
        },
        "crl": {
            "$ref": "envoy.api.v2.core.DataSource",
            "additionalProperties": true,
            "description": "An optional `certificate revocation list\n \u003chttps://en.wikipedia.org/wiki/Certificate_revocation_list\u003e`_\n (in PEM format). If specified, Envoy will verify that the presented peer\n certificate has not been revoked by this CRL. If this DataSource contains\n multiple CRLs, all of them will be used."
        },
        "allow_expired_certificate": {
            "type": "boolean",
            "description": "If specified, Envoy will not reject expired certificates."
        },
        "trust_chain_verification": {
            "enum": [
                "VERIFY_TRUST_CHAIN",
                0,
                "ACCEPT_UNTRUSTED",
                1
            ],
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "integer"
                }
            ],
            "description": "Certificate trust chain verification mode."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#next-free-field: 11]",
    "definitions": {
        "envoy.api.v2.core.DataSource": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Local filesystem data source."
                },
                "inline_bytes": {
                    "type": "string",
                    "description": "Bytes inlined in the configuration."
                },
                "inline_string": {
                    "type": "string",
                    "description": "String inlined in the configuration."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Data source consisting of either a file or an inline value.",
            "id": "envoy.api.v2.core.DataSource"
        }
    }
}