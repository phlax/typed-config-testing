{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"memory_level": {"additionalProperties": true, "type": "integer", "description": "Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values\n use more memory, but are faster and produce better compression results. The default value is 5."}, "content_length": {"additionalProperties": true, "type": "integer", "description": "Minimum response length, in bytes, which will trigger compression. The default value is 30.\n .. attention:\n\n    **This field is deprecated**. Set the `compressor` field instead."}, "compression_level": {"enum": ["DEFAULT", 0, "BEST", 1, "SPEED", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "A value used for selecting the zlib compression level. This setting will affect speed and\n amount of compression applied to the content. \"BEST\" provides higher compression at the cost of\n higher latency, \"SPEED\" provides lower compression with minimum impact on response time.\n \"DEFAULT\" provides an optimal result between speed and compression. This field will be set to\n \"DEFAULT\" if not specified."}, "compression_strategy": {"enum": ["DEFAULT", 0, "FILTERED", 1, "HUFFMAN", 2, "RLE", 3], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "A value used for selecting the zlib compression strategy which is directly related to the\n characteristics of the content. Most of the time \"DEFAULT\" will be the best choice, though\n there are situations which changing this parameter might produce better results. For example,\n run-length encoding (RLE) is typically used when the content is known for having sequences\n which same data occurs many consecutive times. For more information about each strategy, please\n refer to zlib manual."}, "content_type": {"items": {"type": "string"}, "type": "array", "description": "Set of strings that allows specifying which mime-types yield compression; e.g.,\n application/json, text/html, etc. When this field is not defined, compression will be applied\n to the following mime-types: \"application/javascript\", \"application/json\",\n \"application/xhtml+xml\", \"image/svg+xml\", \"text/css\", \"text/html\", \"text/plain\", \"text/xml\".\n .. attention:\n\n    **This field is deprecated**. Set the `compressor` field instead."}, "disable_on_etag_header": {"type": "boolean", "description": "If true, disables compression when the response contains an etag header. When it is false, the\n filter will preserve weak etags and remove the ones that require strong validation.\n .. attention:\n\n    **This field is deprecated**. Set the `compressor` field instead."}, "remove_accept_encoding_header": {"type": "boolean", "description": "If true, removes accept-encoding from the request headers before dispatching it to the upstream\n so that responses do not get compressed before reaching the filter.\n .. attention:\n\n    **This field is deprecated**. Set the `compressor` field instead."}, "window_bits": {"additionalProperties": true, "type": "integer", "description": "Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.\n Larger window results in better compression at the expense of memory usage. The default is 12\n which will produce a 4096 bytes window. For more details about this parameter, please refer to\n zlib manual > deflateInit2."}, "compressor": {"properties": {"content_length": {"additionalProperties": true, "type": "integer", "description": "Minimum response length, in bytes, which will trigger compression. The default value is 30."}, "content_type": {"items": {"type": "string"}, "type": "array", "description": "Set of strings that allows specifying which mime-types yield compression; e.g.,\n application/json, text/html, etc. When this field is not defined, compression will be applied\n to the following mime-types: \"application/javascript\", \"application/json\",\n \"application/xhtml+xml\", \"image/svg+xml\", \"text/css\", \"text/html\", \"text/plain\", \"text/xml\"\n and their synonyms."}, "disable_on_etag_header": {"type": "boolean", "description": "If true, disables compression when the response contains an etag header. When it is false, the\n filter will preserve weak etags and remove the ones that require strong validation."}, "remove_accept_encoding_header": {"type": "boolean", "description": "If true, removes accept-encoding from the request headers before dispatching it to the upstream\n so that responses do not get compressed before reaching the filter.\n .. attention:\n\n    To avoid interfering with other compression filters in the same chain use this option in\n    the filter closest to the upstream."}, "runtime_enabled": {"properties": {"default_value": {"additionalProperties": true, "type": "boolean", "description": "Default value if runtime value is not available."}, "runtime_key": {"type": "string", "description": "Runtime key to get value for comparison. This value is used if defined. The boolean value must\n be represented via its\n `canonical JSON encoding <https://developers.google.com/protocol-buffers/docs/proto3#json>`_."}}, "additionalProperties": true, "type": "object", "description": "Runtime flag that controls whether the filter is enabled or not. If set to false, the\n filter will operate as a pass-through filter. If not specified, defaults to enabled."}}, "additionalProperties": true, "type": "object", "description": "Set of configuration parameters common for all compression filters. If this field is set then\n the fields `content_length`, `content_type`, `disable_on_etag_header` and\n `remove_accept_encoding_header` are ignored."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Gzip]\n Gzip :ref:`configuration overview <config_http_filters_gzip>`.\n [#extension: envoy.filters.http.gzip]\n\n[#next-free-field: 11]"}