{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"grpc_service": {"properties": {"envoy_grpc": {"properties": {"cluster_name": {"type": "string", "description": "The name of the upstream gRPC cluster. SSL credentials will be supplied\n in the :ref:`Cluster <envoy_api_msg_config.cluster.v3.Cluster>` :ref:`transport_socket\n <envoy_api_field_config.cluster.v3.Cluster.transport_socket>`."}, "authority": {"type": "string", "description": "The `:authority` header in the grpc request. If this field is not set, the authority header value will be `cluster_name`.\n Note that this authority does not override the SNI. The SNI is provided by the transport socket of the cluster."}}, "additionalProperties": true, "type": "object", "description": "Envoy's in-built gRPC client.\n See the :ref:`gRPC services overview <arch_overview_grpc_services>`\n documentation for discussion on gRPC client selection."}, "google_grpc": {"properties": {"target_uri": {"type": "string", "description": "The target URI when using the `Google C++ gRPC client\n <https://github.com/grpc/grpc>`_. SSL credentials will be supplied in\n :ref:`channel_credentials <envoy_api_field_config.core.v3.GrpcService.GoogleGrpc.channel_credentials>`."}, "channel_credentials": {"properties": {"ssl_credentials": {"properties": {"root_certs": {"$ref": "#/definitions/envoy.config.core.v3.DataSource", "additionalProperties": true, "description": "PEM encoded server root certificates."}, "private_key": {"$ref": "#/definitions/envoy.config.core.v3.DataSource", "additionalProperties": true, "description": "PEM encoded client private key."}, "cert_chain": {"$ref": "#/definitions/envoy.config.core.v3.DataSource", "additionalProperties": true, "description": "PEM encoded client certificate chain."}}, "additionalProperties": true, "type": "object"}, "google_default": {"additionalProperties": true, "type": "object", "description": "https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"}, "local_credentials": {"additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object"}, "call_credentials": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"access_token": {"type": "string", "description": "Access token credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#ad3a80da696ffdaea943f0f858d7a360d."}, "google_compute_engine": {"additionalProperties": true, "type": "object", "description": "Google Compute Engine credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"}, "google_refresh_token": {"type": "string", "description": "Google refresh token credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a96901c997b91bc6513b08491e0dca37c."}, "service_account_jwt_access": {"properties": {"json_key": {"type": "string"}, "token_lifetime_seconds": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "Service Account JWT Access credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a92a9f959d6102461f66ee973d8e9d3aa."}, "google_iam": {"properties": {"authorization_token": {"type": "string"}, "authority_selector": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "Google IAM credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a9fc1fc101b41e680d47028166e76f9d0."}, "from_plugin": {"properties": {"name": {"type": "string"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Custom authenticator credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a823c6a4b19ffc71fb33e90154ee2ad07.\n https://grpc.io/docs/guides/auth.html#extending-grpc-to-support-other-authentication-mechanisms."}, "sts_service": {"properties": {"token_exchange_service_uri": {"type": "string", "description": "URI of the token exchange service that handles token exchange requests.\n [#comment:TODO(asraa): Add URI validation when implemented. Tracked by\n https://github.com/envoyproxy/protoc-gen-validate/issues/303]"}, "resource": {"type": "string", "description": "Location of the target service or resource where the client\n intends to use the requested security token."}, "audience": {"type": "string", "description": "Logical name of the target service where the client intends to\n use the requested security token."}, "scope": {"type": "string", "description": "The desired scope of the requested security token in the\n context of the service or resource where the token will be used."}, "requested_token_type": {"type": "string", "description": "Type of the requested security token."}, "subject_token_path": {"type": "string", "description": "The path of subject token, a security token that represents the\n identity of the party on behalf of whom the request is being made."}, "subject_token_type": {"type": "string", "description": "Type of the subject token."}, "actor_token_path": {"type": "string", "description": "The path of actor token, a security token that represents the identity\n of the acting party. The acting party is authorized to use the\n requested security token and act on behalf of the subject."}, "actor_token_type": {"type": "string", "description": "Type of the actor token."}}, "additionalProperties": true, "type": "object", "description": "Custom security token service which implements OAuth 2.0 token exchange.\n https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16\n See https://github.com/grpc/grpc/pull/19587."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 8]"}, "type": "array", "description": "A set of call credentials that can be composed with `channel credentials\n <https://grpc.io/docs/guides/auth.html#credential-types>`_."}, "stat_prefix": {"type": "string", "description": "The human readable prefix to use when emitting statistics for the gRPC\n service.\n\n .. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    streams_total, Counter, Total number of streams opened\n    streams_closed_<gRPC status code>, Counter, Total streams closed with <gRPC status code>"}, "credentials_factory_name": {"type": "string", "description": "The name of the Google gRPC credentials factory to use. This must have been registered with\n Envoy. If this is empty, a default credentials factory will be used that sets up channel\n credentials based on other configuration parameters."}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Additional configuration for site-specific customizations of the Google\n gRPC library."}, "per_stream_buffer_limit_bytes": {"additionalProperties": true, "type": "integer", "description": "How many bytes each stream can buffer internally.\n If not set an implementation defined default is applied (1MiB)."}, "channel_args": {"properties": {"args": {"additionalProperties": {"properties": {"string_value": {"type": "string"}, "int_value": {"type": "string"}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "See grpc_types.h GRPC_ARG #defines for keys that work here."}}, "additionalProperties": true, "type": "object", "description": "Custom channels args."}}, "additionalProperties": true, "type": "object", "description": "`Google C++ gRPC client <https://github.com/grpc/grpc>`_\n See the :ref:`gRPC services overview <arch_overview_grpc_services>`\n documentation for discussion on gRPC client selection."}, "timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The timeout for the gRPC request. This is the timeout for a specific\n request."}, "initial_metadata": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "Header name."}, "value": {"type": "string", "description": "Header value.\n\n The same :ref:`format specifier <config_access_log_format>` as used for\n :ref:`HTTP access logging <config_access_log>` applies here, however\n unknown header values are replaced with the empty string instead of `-`."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair."}, "type": "array", "description": "Additional metadata to include in streams initiated to the GrpcService. This can be used for\n scenarios in which additional ad hoc authorization headers (e.g. ``x-foo-bar: baz-key``) are to\n be injected. For more information, including details on header value syntax, see the\n documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}}, "additionalProperties": true, "type": "object", "description": "Configuration for the gRPC service that the filter will communicate with.\n The filter supports both the \"Envoy\" and \"Google\" gRPC clients."}, "failure_mode_allow": {"type": "boolean", "description": "[#not-implemented-hide:]\n By default, if the gRPC stream cannot be established, or if it is closed\n prematurely with an error, the filter will fail. Specifically, if the\n response headers have not yet been delivered, then it will return a 500\n error downstream. If they have been delivered, then instead the HTTP stream to the\n downstream client will be reset.\n With this parameter set to true, however, then if the gRPC stream is prematurely closed\n or could not be opened, processing continues without error."}, "processing_mode": {"properties": {"request_header_mode": {"enum": ["DEFAULT", 0, "SEND", 1, "SKIP", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "How to handle the request header. Default is \"SEND\"."}, "response_header_mode": {"enum": ["DEFAULT", 0, "SEND", 1, "SKIP", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "How to handle the response header. Default is \"SEND\"."}, "request_body_mode": {"enum": ["NONE", 0, "STREAMED", 1, "BUFFERED", 2, "BUFFERED_PARTIAL", 3], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "How to handle the request body. Default is \"NONE\"."}, "response_body_mode": {"enum": ["NONE", 0, "STREAMED", 1, "BUFFERED", 2, "BUFFERED_PARTIAL", 3], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "How do handle the response body. Default is \"NONE\"."}, "request_trailer_mode": {"enum": ["DEFAULT", 0, "SEND", 1, "SKIP", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "How to handle the request trailers. Default is \"SKIP\"."}, "response_trailer_mode": {"enum": ["DEFAULT", 0, "SEND", 1, "SKIP", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "How to handle the response trailers. Default is \"SKIP\"."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n Specifies default options for how HTTP headers, trailers, and bodies are\n sent. See ProcessingMode for details."}, "async_mode": {"type": "boolean", "description": "[#not-implemented-hide:]\n If true, send each part of the HTTP request or response specified by ProcessingMode\n asynchronously -- in other words, send the message on the gRPC stream and then continue\n filter processing. If false, which is the default, suspend filter execution after\n each message is sent to the remote service and wait up to \"message_timeout\"\n for a reply."}, "request_attributes": {"items": {"type": "string"}, "type": "array", "description": "[#not-implemented-hide:]\n Envoy provides a number of :ref:`attributes <arch_overview_attributes>`\n for expressive policies. Each attribute name provided in this field will be\n matched against that list and populated in the request_headers message.\n See the :ref:`attribute documentation <arch_overview_request_attributes>`\n for the list of supported attributes and their types."}, "response_attributes": {"items": {"type": "string"}, "type": "array", "description": "[#not-implemented-hide:]\n Envoy provides a number of :ref:`attributes <arch_overview_attributes>`\n for expressive policies. Each attribute name provided in this field will be\n matched against that list and populated in the response_headers message.\n See the :ref:`attribute documentation <arch_overview_attributes>`\n for the list of supported attributes and their types."}, "message_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n Specifies the timeout for each individual message sent on the stream and\n when the filter is running in synchronous mode. Whenever\n the proxy sends a message on the stream that requires a response, it will\n reset this timer, and will stop processing and return an error (subject\n to the processing mode) if the timer expires. There is no timeout when\n the filter is running in asynchronous mode. Default is 200 ms."}, "stat_prefix": {"type": "string", "description": "[#not-implemented-hide:]\n Optional additional prefix to use when emitting statistics. This allows to distinguish\n emitted statistics between configured *ext_proc* filters in an HTTP filter chain."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: External Processing Filter]\n External Processing Filter\n [#extension: envoy.filters.http.ext_proc]\n\nThe External Processing filter allows an external service to act on HTTP traffic in a flexible way.\n\n**Current Implementation Status:**\n At this time, the filter will send a \"request_headers\" message to the server when the\n filter is invoked from the downstream, and apply any header mutations returned by the\n server. No other part of the protocol is implemented yet.\n\nAs designed, the filter supports up to six different processing steps, which are in the\n process of being implemented:\n * Request headers: IMPLEMENTED\n * Request body: NOT IMPLEMENTED\n * Request trailers: NOT IMPLEMENTED\n * Response headers: NOT IMPLEMENTED\n * Response body: NOT IMPLEMENTED\n * Response trailers: NOT IMPLEMENTED\n\nThe filter communicates with an external gRPC service that can use it to do a variety of things\n with the request and response:\n\n * Access and modify the HTTP headers on the request, response, or both\n * Access and modify the HTTP request and response bodies\n * Access and modify the dynamic stream metadata\n * Immediately send an HTTP response downstream and terminate other processing\n\n The filter communicates with the server using a gRPC bidirectional stream. After the initial\n request, the external server is in control over what additional data is sent to it\n and how it should be processed.\n\n By implementing the protocol specified by the stream, the external server can choose:\n\n * Whether it receives the response message at all\n * Whether it receives the message body at all, in separate chunks, or as a single buffer\n * Whether subsequent HTTP requests are transmitted synchronously or whether they are\n   sent asynchronously.\n\n All of this together allows a server to process the filter traffic in fairly\n sophisticated ways. For example:\n\n * A server may choose to examine all or part of the HTTP message bodies depending\n   on the content of the headers.\n * A server may choose to immediately reject some messages based on their HTTP\n   headers (or other dynamic metadata) and more carefully examine others\n * A server may asynchronously monitor traffic coming through the filter by inspecting\n   headers, bodies, or both, and then decide to switch to a synchronous processing\n   mode, either permanently or temporarily.\n\n The protocol itself is based on a bidirectional gRPC stream. Envoy will send the\n server\n :ref:`ProcessingRequest <envoy_v3_api_msg_service.ext_proc.v3alpha.ProcessingRequest>`\n messages, and the server must reply with\n :ref:`ProcessingResponse <envoy_v3_api_msg_service.ext_proc.v3alpha.ProcessingResponse>`.\n\n[#next-free-field: 9]", "definitions": {"envoy.config.core.v3.DataSource": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filename": {"type": "string", "description": "Local filesystem data source."}, "inline_bytes": {"type": "string", "description": "Bytes inlined in the configuration."}, "inline_string": {"type": "string", "description": "String inlined in the configuration."}}, "additionalProperties": true, "type": "object", "description": "Data source consisting of either a file or an inline value.", "id": "envoy.config.core.v3.DataSource"}}}