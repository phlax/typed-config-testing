{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"descriptor_key": {"type": "string", "description": "The key to use in the descriptor entry."}, "skip_if_error": {"type": "boolean", "description": "If set to true, Envoy skips the descriptor if the expression evaluates to an error.\n By default, the rate limit is not applied when an expression produces an error."}, "text": {"type": "string", "description": "Expression in a text form, e.g. \"connection.requested_server_name\"."}, "parsed": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "Parsed expression in AST form."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Rate limit descriptor expression]\n [#extension: envoy.rate_limit_descriptors.expr]\n\nThe following descriptor entry is appended with a value computed\n from a symbolic Common Expression Language expression.\n See :ref:`attributes <arch_overview_attributes>` for the set of\n available attributes.\n\n .. code-block:: cpp\n\n   (\"<descriptor_key>\", \"<expression_value>\")", "definitions": {"google.api.expr.v1alpha1.Expr": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"id": {"type": "string", "description": "Required. An id assigned to this node by the parser which is unique in a\n given expression tree. This is used to associate type information and other\n attributes to a node in the parse tree."}, "const_expr": {"properties": {"null_value": {"enum": ["NULL_VALUE", 0], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "null value."}, "bool_value": {"type": "boolean", "description": "boolean value."}, "int64_value": {"type": "string", "description": "int64 value."}, "uint64_value": {"type": "string", "description": "uint64 value."}, "double_value": {"type": "number", "description": "double value."}, "string_value": {"type": "string", "description": "string value."}, "bytes_value": {"type": "string", "description": "bytes value."}, "duration_value": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "protobuf.Duration value.\n\n Deprecated: duration is no longer considered a builtin cel type."}, "timestamp_value": {"type": "string", "description": "protobuf.Timestamp value.\n\n Deprecated: timestamp is no longer considered a builtin cel type.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "description": "A literal expression."}, "ident_expr": {"properties": {"name": {"type": "string", "description": "Required. Holds a single, unqualified identifier, possibly preceded by a\n '.'.\n\n Qualified names are represented by the [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression."}}, "additionalProperties": true, "type": "object", "description": "An identifier expression."}, "select_expr": {"properties": {"operand": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "Required. The target of the selection expression.\n\n For example, in the select expression `request.auth`, the `request`\n portion of the expression is the `operand`."}, "field": {"type": "string", "description": "Required. The name of the field to select.\n\n For example, in the select expression `request.auth`, the `auth` portion\n of the expression would be the `field`."}, "test_only": {"type": "boolean", "description": "Whether the select is to be interpreted as a field presence test.\n\n This results from the macro `has(request.auth)`."}}, "additionalProperties": true, "type": "object", "description": "A field selection expression, e.g. `request.auth`."}, "call_expr": {"properties": {"target": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The target of an method call-style expression. For example, `x` in\n `x.f()`."}, "function": {"type": "string", "description": "Required. The name of the function or method being called."}, "args": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema"}, "type": "array", "description": "The arguments."}}, "additionalProperties": true, "type": "object", "description": "A call expression, including calls to predefined functions and operators."}, "list_expr": {"properties": {"elements": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema"}, "type": "array", "description": "The elements part of the list."}}, "additionalProperties": true, "type": "object", "description": "A list creation expression."}, "struct_expr": {"properties": {"message_name": {"type": "string", "description": "The type name of the message to be created, empty when creating map\n literals."}, "entries": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"id": {"type": "string", "description": "Required. An id assigned to this node by the parser which is unique\n in a given expression tree. This is used to associate type\n information and other attributes to the node."}, "field_key": {"type": "string", "description": "The field key for a message creator statement."}, "map_key": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The key expression for a map creation statement."}, "value": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "Required. The value assigned to the key."}}, "additionalProperties": true, "type": "object", "description": "Represents an entry."}, "type": "array", "description": "The entries in the creation expression."}}, "additionalProperties": true, "type": "object", "description": "A map or message creation expression."}, "comprehension_expr": {"properties": {"iter_var": {"type": "string", "description": "The name of the iteration variable."}, "iter_range": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The range over which var iterates."}, "accu_var": {"type": "string", "description": "The name of the variable used for accumulation of the result."}, "accu_init": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "The initial value of the accumulator."}, "loop_condition": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An expression which can contain iter_var and accu_var.\n\n Returns false when the result has been computed and may be used as\n a hint to short-circuit the remainder of the comprehension."}, "loop_step": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An expression which can contain iter_var and accu_var.\n\n Computes the next value of accu_var."}, "result": {"$ref": "https://phlax.github.io/typed-config-testing/google.api.expr.v1alpha1/Expr.jsonschema", "additionalProperties": true, "description": "An expression which can contain accu_var.\n\n Computes the result."}}, "additionalProperties": true, "type": "object", "description": "A comprehension expression."}}, "additionalProperties": true, "type": "object", "description": "An abstract representation of a common expression.\n\n Expressions are abstractly represented as a collection of identifiers,\n select statements, function calls, literals, and comprehensions. All\n operators with the exception of the '.' operator are modelled as function\n calls. This makes it easy to represent new operators into the existing AST.\n\n All references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at\n type-check for an expression to be valid. A reference may either be a bare\n identifier `name` or a qualified identifier `google.api.name`. References\n may either refer to a value or a function declaration.\n\n For example, the expression `google.api.name.startsWith('expr')` references\n the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and\n the function declaration `startsWith`.", "id": "google.api.expr.v1alpha1.Expr"}}}