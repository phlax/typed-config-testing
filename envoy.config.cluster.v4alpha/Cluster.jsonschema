{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"transport_socket_matches": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the match, used in stats generation."}, "match": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Optional endpoint metadata match criteria.\n The connection to the endpoint with metadata matching what is set in this field\n will use the transport socket configuration specified here.\n The endpoint's metadata entry in *envoy.transport_socket_match* is used to match\n against the values specified in this field."}, "transport_socket": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/TransportSocket.jsonschema", "additionalProperties": true, "description": "The configuration of the transport socket."}}, "additionalProperties": true, "type": "object", "description": "TransportSocketMatch specifies what transport socket config will be used\n when the match conditions are satisfied."}, "type": "array", "description": "Configuration to use different transport sockets for different endpoints.\n The entry of *envoy.transport_socket_match* in the\n :ref:`LbEndpoint.Metadata <envoy_api_field_config.endpoint.v3.LbEndpoint.metadata>`\n is used to match against the transport sockets as they appear in the list. The first\n :ref:`match <envoy_api_msg_config.cluster.v4alpha.Cluster.TransportSocketMatch>` is used.\n For example, with the following match\n\n .. code-block:: yaml\n\n  transport_socket_matches:\n  - name: \"enableMTLS\"\n    match:\n      acceptMTLS: true\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      config: { ... } # tls socket configuration\n  - name: \"defaultToPlaintext\"\n    match: {}\n    transport_socket:\n      name: envoy.transport_sockets.raw_buffer\n\n Connections to the endpoints whose metadata value under *envoy.transport_socket_match*\n having \"acceptMTLS\"/\"true\" key/value pair use the \"enableMTLS\" socket configuration.\n\n If a :ref:`socket match <envoy_api_msg_config.cluster.v4alpha.Cluster.TransportSocketMatch>` with empty match\n criteria is provided, that always match any endpoint. For example, the \"defaultToPlaintext\"\n socket match in case above.\n\n If an endpoint metadata's value under *envoy.transport_socket_match* does not match any\n *TransportSocketMatch*, socket configuration fallbacks to use the *tls_context* or\n *transport_socket* specified in this cluster.\n\n This field allows gradual and flexible transport socket configuration changes.\n\n The metadata of endpoints in EDS can indicate transport socket capabilities. For example,\n an endpoint's metadata can have two key value pairs as \"acceptMTLS\": \"true\",\n \"acceptPlaintext\": \"true\". While some other endpoints, only accepting plaintext traffic\n has \"acceptPlaintext\": \"true\" metadata information.\n\n Then the xDS server can configure the CDS to a client, Envoy A, to send mutual TLS\n traffic for endpoints with \"acceptMTLS\": \"true\", by adding a corresponding\n *TransportSocketMatch* in this field. Other client Envoys receive CDS without\n *transport_socket_match* set, and still send plain text traffic to the same cluster.\n\n This field can be used to specify custom transport socket configurations for health\n checks by adding matching key/value pairs in a health check's\n :ref:`transport socket match criteria <envoy_api_field_config.core.v4alpha.HealthCheck.transport_socket_match_criteria>` field.\n\n [#comment:TODO(incfly): add a detailed architecture doc on intended usage.]"}, "name": {"type": "string", "description": "Supplies the name of the cluster which must be unique across all clusters.\n The cluster name is used when emitting\n :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name\n <envoy_api_field_config.cluster.v4alpha.Cluster.alt_stat_name>` is not provided.\n Any ``:`` in the cluster name will be converted to ``_`` when emitting statistics."}, "alt_stat_name": {"type": "string", "description": "An optional alternative to the cluster name to be used while emitting stats.\n Any ``:`` in the name will be converted to ``_`` when emitting statistics. This should not be\n confused with :ref:`Router Filter Header\n <config_http_filters_router_x-envoy-upstream-alt-stat-name>`."}, "type": {"enum": ["STATIC", 0, "STRICT_DNS", 1, "LOGICAL_DNS", 2, "EDS", 3, "ORIGINAL_DST", 4], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The :ref:`service discovery type <arch_overview_service_discovery_types>`\n to use for resolving the cluster."}, "cluster_type": {"properties": {"name": {"type": "string", "description": "The type of the cluster to instantiate. The name must match a supported cluster type."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "Cluster specific configuration which depends on the cluster being instantiated.\n See the supported cluster for further documentation."}}, "additionalProperties": true, "type": "object", "description": "The custom cluster type."}, "eds_cluster_config": {"properties": {"eds_config": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/ConfigSource.jsonschema", "additionalProperties": true, "description": "Configuration for the source of EDS updates for this Cluster."}, "service_name": {"type": "string", "description": "Optional alternative to cluster name to present to EDS. This does not\n have the same restrictions as cluster name, i.e. it may be arbitrary\n length. This may be a xdstp:// URL."}}, "additionalProperties": true, "type": "object", "description": "Configuration to use for EDS updates for the Cluster."}, "connect_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The timeout for new network connections to hosts in the cluster."}, "per_connection_buffer_limit_bytes": {"additionalProperties": true, "type": "integer", "description": "Soft limit on size of the cluster\u2019s connections read and write buffers. If\n unspecified, an implementation defined default is applied (1MiB)."}, "lb_policy": {"enum": ["ROUND_ROBIN", 0, "LEAST_REQUEST", 1, "RING_HASH", 2, "RANDOM", 3, "MAGLEV", 5, "CLUSTER_PROVIDED", 6, "LOAD_BALANCING_POLICY_CONFIG", 7], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The :ref:`load balancer type <arch_overview_load_balancing_types>` to use\n when picking a host in the cluster.\n [#comment:TODO: Remove enum constraint :ref:`LOAD_BALANCING_POLICY_CONFIG<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbPolicy.LOAD_BALANCING_POLICY_CONFIG>` when implemented.]"}, "load_assignment": {"properties": {"cluster_name": {"type": "string", "description": "Name of the cluster. This will be the :ref:`service_name\n <envoy_api_field_config.cluster.v3.Cluster.EdsClusterConfig.service_name>` value if specified\n in the cluster :ref:`EdsClusterConfig\n <envoy_api_msg_config.cluster.v3.Cluster.EdsClusterConfig>`."}, "endpoints": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"locality": {"properties": {"region": {"type": "string", "description": "Region this :ref:`zone <envoy_api_field_config.core.v3.Locality.zone>` belongs to."}, "zone": {"type": "string", "description": "Defines the local service zone where Envoy is running. Though optional, it\n should be set if discovery service routing is used and the discovery\n service exposes :ref:`zone data <envoy_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,\n either in this message or via :option:`--service-zone`. The meaning of zone\n is context dependent, e.g. `Availability Zone (AZ)\n <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_\n on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on\n GCP, etc."}, "sub_zone": {"type": "string", "description": "When used for locality of upstream hosts, this field further splits zone\n into smaller chunks of sub-zones so they can be load balanced\n independently."}}, "additionalProperties": true, "type": "object", "description": "Identifies location of where the upstream hosts run."}, "lb_endpoints": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"endpoint": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.endpoint.v3/Endpoint.jsonschema", "additionalProperties": true}, "endpoint_name": {"type": "string", "description": "[#not-implemented-hide:]"}, "health_status": {"enum": ["UNKNOWN", 0, "HEALTHY", 1, "UNHEALTHY", 2, "DRAINING", 3, "TIMEOUT", 4, "DEGRADED", 5], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Optional health status when known and supplied by EDS server."}, "metadata": {"properties": {"filter_metadata": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."}}, "additionalProperties": true, "type": "object", "description": "The endpoint metadata specifies values that may be used by the load\n balancer to select endpoints in a cluster for a given request. The filter\n name should be specified as *envoy.lb*. An example boolean key-value pair\n is *canary*, providing the optional canary status of the upstream host.\n This may be matched against in a route's\n :ref:`RouteAction <envoy_api_msg_config.route.v3.RouteAction>` metadata_match field\n to subset the endpoints considered in cluster load balancing."}, "load_balancing_weight": {"additionalProperties": true, "type": "integer", "description": "The optional load balancing weight of the upstream host; at least 1.\n Envoy uses the load balancing weight in some of the built in load\n balancers. The load balancing weight for an endpoint is divided by the sum\n of the weights of all endpoints in the endpoint's locality to produce a\n percentage of traffic for the endpoint. This percentage is then further\n weighted by the endpoint's locality's load balancing weight from\n LocalityLbEndpoints. If unspecified, each host is presumed to have equal\n weight in a locality. The sum of the weights of all endpoints in the\n endpoint's locality must not exceed uint32_t maximal value (4294967295)."}}, "additionalProperties": true, "type": "object", "description": "An Endpoint that Envoy can route traffic to.\n [#next-free-field: 6]"}, "type": "array", "description": "The group of endpoints belonging to the locality specified."}, "load_balancing_weight": {"additionalProperties": true, "type": "integer", "description": "Optional: Per priority/region/zone/sub_zone weight; at least 1. The load\n balancing weight for a locality is divided by the sum of the weights of all\n localities  at the same priority level to produce the effective percentage\n of traffic for the locality. The sum of the weights of all localities at\n the same priority level must not exceed uint32_t maximal value (4294967295).\n\n Locality weights are only considered when :ref:`locality weighted load\n balancing <arch_overview_load_balancing_locality_weighted_lb>` is\n configured. These weights are ignored otherwise. If no weights are\n specified when locality weighted load balancing is enabled, the locality is\n assigned no load."}, "priority": {"type": "integer", "description": "Optional: the priority for this LocalityLbEndpoints. If unspecified this will\n default to the highest priority (0).\n\n Under usual circumstances, Envoy will only select endpoints for the highest\n priority (0). In the event all endpoints for a particular priority are\n unavailable/unhealthy, Envoy will fail over to selecting endpoints for the\n next highest priority group.\n\n Priorities should range from 0 (highest) to N (lowest) without skipping."}, "proximity": {"additionalProperties": true, "type": "integer", "description": "Optional: Per locality proximity value which indicates how close this\n locality is from the source locality. This value only provides ordering\n information (lower the value, closer it is to the source locality).\n This will be consumed by load balancing schemes that need proximity order\n to determine where to route the requests.\n [#not-implemented-hide:]"}}, "additionalProperties": true, "type": "object", "description": "A group of endpoints belonging to a Locality.\n One can have multiple LocalityLbEndpoints for a locality, but this is\n generally only done if the different groups need to have different load\n balancing weights or different priorities.\n [#next-free-field: 7]"}, "type": "array", "description": "List of endpoints to load balance to."}, "named_endpoints": {"additionalProperties": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.endpoint.v3/Endpoint.jsonschema", "additionalProperties": true}, "type": "object", "description": "Map of named endpoints that can be referenced in LocalityLbEndpoints.\n [#not-implemented-hide:]"}, "policy": {"properties": {"drop_overloads": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"category": {"type": "string", "description": "Identifier for the policy specifying the drop."}, "drop_percentage": {"properties": {"numerator": {"type": "integer", "description": "Specifies the numerator. Defaults to 0."}, "denominator": {"enum": ["HUNDRED", 0, "TEN_THOUSAND", 1, "MILLION", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final\n fractional percentage is capped at 1 (100%)."}}, "additionalProperties": true, "type": "object", "description": "Percentage of traffic that should be dropped for the category."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}, "type": "array", "description": "Action to trim the overall incoming traffic to protect the upstream\n hosts. This action allows protection in case the hosts are unable to\n recover from an outage, or unable to autoscale or unable to handle\n incoming traffic volume for any reason.\n\n At the client each category is applied one after the other to generate\n the 'actual' drop percentage on all outgoing traffic. For example:\n\n .. code-block:: json\n\n  { \"drop_overloads\": [\n      { \"category\": \"throttle\", \"drop_percentage\": 60 }\n      { \"category\": \"lb\", \"drop_percentage\": 50 }\n  ]}\n\n The actual drop percentages applied to the traffic at the clients will be\n    \"throttle\"_drop = 60%\n    \"lb\"_drop = 20%  // 50% of the remaining 'actual' load, which is 40%.\n    actual_outgoing_load = 20% // remaining after applying all categories.\n [#not-implemented-hide:]"}, "overprovisioning_factor": {"additionalProperties": true, "type": "integer", "description": "Priority levels and localities are considered overprovisioned with this\n factor (in percentage). This means that we don't consider a priority\n level or locality unhealthy until the fraction of healthy hosts\n multiplied by the overprovisioning factor drops below 100.\n With the default value 140(1.4), Envoy doesn't consider a priority level\n or a locality unhealthy until their percentage of healthy hosts drops\n below 72%. For example:\n\n .. code-block:: json\n\n  { \"overprovisioning_factor\": 100 }\n\n Read more at :ref:`priority levels <arch_overview_load_balancing_priority_levels>` and\n :ref:`localities <arch_overview_load_balancing_locality_weighted_lb>`."}, "endpoint_stale_after": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The max time until which the endpoints from this assignment can be used.\n If no new assignments are received before this time expires the endpoints\n are considered stale and should be marked unhealthy.\n Defaults to 0 which means endpoints never go stale."}}, "additionalProperties": true, "type": "object", "description": "Load balancing policy settings."}}, "additionalProperties": true, "type": "object", "description": "Setting this is required for specifying members of\n :ref:`STATIC<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STATIC>`,\n :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>`\n or :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>` clusters.\n This field supersedes the *hosts* field in the v2 API.\n\n .. attention::\n\n   Setting this allows non-EDS cluster types to contain embedded EDS equivalent\n   :ref:`endpoint assignments<envoy_api_msg_config.endpoint.v3.ClusterLoadAssignment>`."}, "health_checks": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The time to wait for a health check response. If the timeout is reached the\n health check attempt will be considered a failure."}, "interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The interval between health checks."}, "initial_jitter": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "An optional jitter amount in milliseconds. If specified, Envoy will start health\n checking after for a random time in ms between 0 and initial_jitter. This only\n applies to the first health check."}, "interval_jitter": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "An optional jitter amount in milliseconds. If specified, during every\n interval Envoy will add interval_jitter to the wait time."}, "interval_jitter_percent": {"type": "integer", "description": "An optional jitter amount as a percentage of interval_ms. If specified,\n during every interval Envoy will add interval_ms *\n interval_jitter_percent / 100 to the wait time.\n\n If interval_jitter_ms and interval_jitter_percent are both set, both of\n them will be used to increase the wait time."}, "unhealthy_threshold": {"additionalProperties": true, "type": "integer", "description": "The number of unhealthy health checks required before a host is marked\n unhealthy. Note that for *http* health checking if a host responds with 503\n this threshold is ignored and the host is considered unhealthy immediately."}, "healthy_threshold": {"additionalProperties": true, "type": "integer", "description": "The number of healthy health checks required before a host is marked\n healthy. Note that during startup, only a single successful health check is\n required to mark a host healthy."}, "alt_port": {"additionalProperties": true, "type": "integer", "description": "[#not-implemented-hide:] Non-serving port for health checking."}, "reuse_connection": {"additionalProperties": true, "type": "boolean", "description": "Reuse health check connection between health checks. Default is true."}, "http_health_check": {"properties": {"host": {"type": "string", "description": "The value of the host header in the HTTP health check request. If\n left empty (default value), the name of the cluster this health check is associated\n with will be used. The host header can be customized for a specific endpoint by setting the\n :ref:`hostname <envoy_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname>` field."}, "path": {"type": "string", "description": "Specifies the HTTP path that will be requested during health checking. For example\n */healthcheck*."}, "send": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha.HealthCheck/Payload.jsonschema", "additionalProperties": true, "description": "[#not-implemented-hide:] HTTP specific payload."}, "receive": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha.HealthCheck/Payload.jsonschema", "additionalProperties": true, "description": "[#not-implemented-hide:] HTTP specific response."}, "request_headers_to_add": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"header": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/HeaderValue.jsonschema", "additionalProperties": true, "description": "Header name/value pair that this option applies to."}, "append": {"additionalProperties": true, "type": "boolean", "description": "Should the value be appended? If true (default), the value is appended to\n existing values. Otherwise it replaces any existing values."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair plus option to control append behavior."}, "type": "array", "description": "Specifies a list of HTTP headers that should be added to each request that is sent to the\n health checked cluster. For more information, including details on header value syntax, see\n the documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}, "request_headers_to_remove": {"items": {"type": "string"}, "type": "array", "description": "Specifies a list of HTTP headers that should be removed from each request that is sent to the\n health checked cluster."}, "expected_statuses": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Range]\n\nSpecifies the int64 start and end of the range using half-open interval semantics [start,\n end)."}, "type": "array", "description": "Specifies a list of HTTP response statuses considered healthy. If provided, replaces default\n 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open\n semantics of :ref:`Int64Range <envoy_api_msg_type.v3.Int64Range>`. The start and end of each\n range are required. Only statuses in the range [100, 600) are allowed."}, "codec_client_type": {"enum": ["HTTP1", 0, "HTTP2", 1, "HTTP3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Use specified application protocol for health checks."}, "service_name_matcher": {"properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "safe_regex": {"properties": {"google_re2": {"additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "The input string must match the regular expression specified here."}, "contains": {"type": "string", "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "An optional service name parameter which is used to validate the identity of\n the health checked cluster using a :ref:`StringMatcher\n <envoy_api_msg_type.matcher.v4alpha.StringMatcher>`. See the :ref:`architecture overview\n <arch_overview_health_checking_identity>` for more information."}}, "additionalProperties": true, "type": "object", "description": "HTTP health check."}, "tcp_health_check": {"properties": {"send": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha.HealthCheck/Payload.jsonschema", "additionalProperties": true, "description": "Empty payloads imply a connect-only health check."}, "receive": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha.HealthCheck/Payload.jsonschema"}, "type": "array", "description": "When checking the response, \u201cfuzzy\u201d matching is performed such that each\n binary block must be found, and in the order specified, but not\n necessarily contiguous."}}, "additionalProperties": true, "type": "object", "description": "TCP health check."}, "grpc_health_check": {"properties": {"service_name": {"type": "string", "description": "An optional service name parameter which will be sent to gRPC service in\n `grpc.health.v1.HealthCheckRequest\n <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.\n message. See `gRPC health-checking overview\n <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information."}, "authority": {"type": "string", "description": "The value of the :authority header in the gRPC health check request. If\n left empty (default value), the name of the cluster this health check is associated\n with will be used. The authority header can be customized for a specific endpoint by setting\n the :ref:`hostname <envoy_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname>` field."}}, "additionalProperties": true, "type": "object", "description": "gRPC health check."}, "custom_health_check": {"properties": {"name": {"type": "string", "description": "The registered name of the custom health checker."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Custom health check."}, "no_traffic_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The \"no traffic interval\" is a special health check interval that is used when a cluster has\n never had traffic routed to it. This lower interval allows cluster information to be kept up to\n date, without sending a potentially large amount of active health checking traffic for no\n reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the\n standard health check interval that is defined. Note that this interval takes precedence over\n any other.\n\n The default value for \"no traffic interval\" is 60 seconds."}, "no_traffic_healthy_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The \"no traffic healthy interval\" is a special health check interval that\n is used for hosts that are currently passing active health checking\n (including new hosts) when the cluster has received no traffic.\n\n This is useful for when we want to send frequent health checks with\n `no_traffic_interval` but then revert to lower frequency `no_traffic_healthy_interval` once\n a host in the cluster is marked as healthy.\n\n Once a cluster has been used for traffic routing, Envoy will shift back to using the\n standard health check interval that is defined.\n\n If no_traffic_healthy_interval is not set, it will default to the\n no traffic interval and send that interval regardless of health state."}, "unhealthy_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The \"unhealthy interval\" is a health check interval that is used for hosts that are marked as\n unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the\n standard health check interval that is defined.\n\n The default value for \"unhealthy interval\" is the same as \"interval\"."}, "unhealthy_edge_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The \"unhealthy edge interval\" is a special health check interval that is used for the first\n health check right after a host is marked as unhealthy. For subsequent health checks\n Envoy will shift back to using either \"unhealthy interval\" if present or the standard health\n check interval that is defined.\n\n The default value for \"unhealthy edge interval\" is the same as \"unhealthy interval\"."}, "healthy_edge_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The \"healthy edge interval\" is a special health check interval that is used for the first\n health check right after a host is marked as healthy. For subsequent health checks\n Envoy will shift back to using the standard health check interval that is defined.\n\n The default value for \"healthy edge interval\" is the same as the default interval."}, "event_log_path": {"type": "string", "description": "Specifies the path to the :ref:`health check event log <arch_overview_health_check_logging>`.\n If empty, no event log will be written."}, "event_service": {"properties": {"grpc_service": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/GrpcService.jsonschema", "additionalProperties": true, "description": "Specifies the gRPC service that hosts the event reporting service."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n The gRPC service for the health check event service.\n If empty, health check events won't be sent to a remote endpoint."}, "always_log_health_check_failures": {"type": "boolean", "description": "If set to true, health check failure events will always be logged. If set to false, only the\n initial health check failure event will be logged.\n The default value is false."}, "tls_options": {"properties": {"alpn_protocols": {"items": {"type": "string"}, "type": "array", "description": "Specifies the ALPN protocols for health check connections. This is useful if the\n corresponding upstream is using ALPN-based :ref:`FilterChainMatch\n <envoy_api_msg_config.listener.v4alpha.FilterChainMatch>` along with different protocols for health checks\n versus data connections. If empty, no ALPN protocols will be set on health check connections."}}, "additionalProperties": true, "type": "object", "description": "This allows overriding the cluster TLS settings, just for health check connections."}, "transport_socket_match_criteria": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Optional key/value pairs that will be used to match a transport socket from those specified in the cluster's\n :ref:`tranport socket matches <envoy_api_field_config.cluster.v4alpha.Cluster.transport_socket_matches>`.\n For example, the following match criteria\n\n .. code-block:: yaml\n\n  transport_socket_match_criteria:\n    useMTLS: true\n\n Will match the following :ref:`cluster socket match <envoy_api_msg_config.cluster.v4alpha.Cluster.TransportSocketMatch>`\n\n .. code-block:: yaml\n\n  transport_socket_matches:\n  - name: \"useMTLS\"\n    match:\n      useMTLS: true\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      config: { ... } # tls socket configuration\n\n If this field is set, then for health checks it will supersede an entry of *envoy.transport_socket* in the\n :ref:`LbEndpoint.Metadata <envoy_api_field_config.endpoint.v3.LbEndpoint.metadata>`.\n This allows using different transport socket capabilities for health checking versus proxying to the\n endpoint.\n\n If the key/values pairs specified do not match any\n :ref:`transport socket matches <envoy_api_field_config.cluster.v4alpha.Cluster.transport_socket_matches>`,\n the cluster's :ref:`transport socket <envoy_api_field_config.cluster.v4alpha.Cluster.transport_socket>`\n will be used for health check socket configuration."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 25]"}, "type": "array", "description": "Optional :ref:`active health checking <arch_overview_health_checking>`\n configuration for the cluster. If no\n configuration is specified no health checking will be done and all cluster\n members will be considered healthy at all times."}, "max_requests_per_connection": {"additionalProperties": true, "type": "integer", "description": "Optional maximum requests for a single upstream connection. This parameter\n is respected by both the HTTP/1.1 and HTTP/2 connection pool\n implementations. If not specified, there is no limit. Setting this\n parameter to 1 will effectively disable keep alive."}, "circuit_breakers": {"properties": {"thresholds": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"priority": {"enum": ["DEFAULT", 0, "HIGH", 1], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The :ref:`RoutingPriority<envoy_api_enum_config.core.v4alpha.RoutingPriority>`\n the specified CircuitBreaker settings apply to."}, "max_connections": {"additionalProperties": true, "type": "integer", "description": "The maximum number of connections that Envoy will make to the upstream\n cluster. If not specified, the default is 1024."}, "max_pending_requests": {"additionalProperties": true, "type": "integer", "description": "The maximum number of pending requests that Envoy will allow to the\n upstream cluster. If not specified, the default is 1024."}, "max_requests": {"additionalProperties": true, "type": "integer", "description": "The maximum number of parallel requests that Envoy will make to the\n upstream cluster. If not specified, the default is 1024."}, "max_retries": {"additionalProperties": true, "type": "integer", "description": "The maximum number of parallel retries that Envoy will allow to the\n upstream cluster. If not specified, the default is 3."}, "retry_budget": {"properties": {"budget_percent": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.v3/Percent.jsonschema", "additionalProperties": true, "description": "Specifies the limit on concurrent retries as a percentage of the sum of active requests and\n active pending requests. For example, if there are 100 active requests and the\n budget_percent is set to 25, there may be 25 active retries.\n\n This parameter is optional. Defaults to 20%."}, "min_retry_concurrency": {"additionalProperties": true, "type": "integer", "description": "Specifies the minimum retry concurrency allowed for the retry budget. The limit on the\n number of active retries may never go below this number.\n\n This parameter is optional. Defaults to 3."}}, "additionalProperties": true, "type": "object", "description": "Specifies a limit on concurrent retries in relation to the number of active requests. This\n parameter is optional.\n\n .. note::\n\n    If this field is set, the retry budget will override any configured retry circuit\n    breaker."}, "track_remaining": {"type": "boolean", "description": "If track_remaining is true, then stats will be published that expose\n the number of resources remaining until the circuit breakers open. If\n not specified, the default is false.\n\n .. note::\n\n    If a retry budget is used in lieu of the max_retries circuit breaker,\n    the remaining retry resources remaining will not be tracked."}, "max_connection_pools": {"additionalProperties": true, "type": "integer", "description": "The maximum number of connection pools per cluster that Envoy will concurrently support at\n once. If not specified, the default is unlimited. Set this for clusters which create a\n large number of connection pools. See\n :ref:`Circuit Breaking <arch_overview_circuit_break_cluster_maximum_connection_pools>` for\n more details."}}, "additionalProperties": true, "type": "object", "description": "A Thresholds defines CircuitBreaker settings for a\n :ref:`RoutingPriority<envoy_api_enum_config.core.v4alpha.RoutingPriority>`.\n [#next-free-field: 9]"}, "type": "array", "description": "If multiple :ref:`Thresholds<envoy_api_msg_config.cluster.v4alpha.CircuitBreakers.Thresholds>`\n are defined with the same :ref:`RoutingPriority<envoy_api_enum_config.core.v4alpha.RoutingPriority>`,\n the first one in the list is used. If no Thresholds is defined for a given\n :ref:`RoutingPriority<envoy_api_enum_config.core.v4alpha.RoutingPriority>`, the default values\n are used."}}, "additionalProperties": true, "type": "object", "description": "Optional :ref:`circuit breaking <arch_overview_circuit_break>` for the cluster."}, "typed_extension_protocol_options": {"additionalProperties": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "The extension_protocol_options field is used to provide extension-specific protocol options\n for upstream connections. The key should match the extension filter name, such as\n \"envoy.filters.network.thrift_proxy\". See the extension's documentation for details on\n specific options.\n [#next-major-version: make this a list of typed extensions.]"}, "dns_refresh_rate": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "If the DNS refresh rate is specified and the cluster type is either\n :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>`,\n or :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>`,\n this value is used as the cluster\u2019s DNS refresh\n rate. The value configured must be at least 1ms. If this setting is not specified, the\n value defaults to 5000ms. For cluster types other than\n :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>`\n and :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>`\n this setting is ignored."}, "dns_failure_refresh_rate": {"properties": {"base_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the base interval between refreshes. This parameter is required and must be greater\n than zero and less than\n :ref:`max_interval <envoy_api_field_config.cluster.v4alpha.Cluster.RefreshRate.max_interval>`."}, "max_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the maximum interval between refreshes. This parameter is optional, but must be\n greater than or equal to the\n :ref:`base_interval <envoy_api_field_config.cluster.v4alpha.Cluster.RefreshRate.base_interval>`  if set. The default\n is 10 times the :ref:`base_interval <envoy_api_field_config.cluster.v4alpha.Cluster.RefreshRate.base_interval>`."}}, "additionalProperties": true, "type": "object", "description": "If the DNS failure refresh rate is specified and the cluster type is either\n :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>`,\n or :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>`,\n this is used as the cluster\u2019s DNS refresh rate when requests are failing. If this setting is\n not specified, the failure refresh rate defaults to the DNS refresh rate. For cluster types\n other than :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>` and\n :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>` this setting is\n ignored."}, "respect_dns_ttl": {"type": "boolean", "description": "Optional configuration for setting cluster's DNS refresh rate. If the value is set to true,\n cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS\n resolution."}, "dns_lookup_family": {"enum": ["AUTO", 0, "V4_ONLY", 1, "V6_ONLY", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The DNS IP address resolution policy. If this setting is not specified, the\n value defaults to\n :ref:`AUTO<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DnsLookupFamily.AUTO>`."}, "dns_resolvers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"socket_address": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/SocketAddress.jsonschema", "additionalProperties": true}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}, "envoy_internal_address": {"properties": {"server_listener_name": {"type": "string", "description": "[#not-implemented-hide:] The :ref:`listener name <envoy_api_field_config.listener.v4alpha.Listener.name>` of the destination internal listener."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}}, "additionalProperties": true, "type": "object", "description": "Addresses specify either a logical or physical address and port, which are\n used to tell Envoy where to bind/listen, connect to upstream and find\n management servers."}, "type": "array", "description": "If DNS resolvers are specified and the cluster type is either\n :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>`,\n or :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>`,\n this value is used to specify the cluster\u2019s dns resolvers.\n If this setting is not specified, the value defaults to the default\n resolver, which uses /etc/resolv.conf for configuration. For cluster types\n other than\n :ref:`STRICT_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STRICT_DNS>`\n and :ref:`LOGICAL_DNS<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.LOGICAL_DNS>`\n this setting is ignored.\n Setting this value causes failure if the\n ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during\n server startup. Apple's API only allows overriding DNS resolvers via system settings."}, "use_tcp_for_dns_lookups": {"type": "boolean", "description": "[#next-major-version: Reconcile DNS options in a single message.]\n Always use TCP queries instead of UDP queries for DNS lookups.\n Setting this value causes failure if the\n ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during\n server startup. Apple' API only uses UDP for DNS resolution."}, "outlier_detection": {"properties": {"consecutive_5xx": {"additionalProperties": true, "type": "integer", "description": "The number of consecutive 5xx responses or local origin errors that are mapped\n to 5xx error codes before a consecutive 5xx ejection\n occurs. Defaults to 5."}, "interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The time interval between ejection analysis sweeps. This can result in\n both new ejections as well as hosts being returned to service. Defaults\n to 10000ms or 10s."}, "base_ejection_time": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The base time that a host is ejected for. The real time is equal to the\n base time multiplied by the number of times the host has been ejected and is\n capped by :ref:`max_ejection_time<envoy_api_field_config.cluster.v4alpha.OutlierDetection.max_ejection_time>`.\n Defaults to 30000ms or 30s."}, "max_ejection_percent": {"additionalProperties": true, "type": "integer", "description": "The maximum % of an upstream cluster that can be ejected due to outlier\n detection. Defaults to 10% but will eject at least one host regardless of the value."}, "enforcing_consecutive_5xx": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status\n is detected through consecutive 5xx. This setting can be used to disable\n ejection or to ramp it up slowly. Defaults to 100."}, "enforcing_success_rate": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status\n is detected through success rate statistics. This setting can be used to\n disable ejection or to ramp it up slowly. Defaults to 100."}, "success_rate_minimum_hosts": {"additionalProperties": true, "type": "integer", "description": "The number of hosts in a cluster that must have enough request volume to\n detect success rate outliers. If the number of hosts is less than this\n setting, outlier detection via success rate statistics is not performed\n for any host in the cluster. Defaults to 5."}, "success_rate_request_volume": {"additionalProperties": true, "type": "integer", "description": "The minimum number of total requests that must be collected in one\n interval (as defined by the interval duration above) to include this host\n in success rate based outlier detection. If the volume is lower than this\n setting, outlier detection via success rate statistics is not performed\n for that host. Defaults to 100."}, "success_rate_stdev_factor": {"additionalProperties": true, "type": "integer", "description": "This factor is used to determine the ejection threshold for success rate\n outlier ejection. The ejection threshold is the difference between the\n mean success rate, and the product of this factor and the standard\n deviation of the mean success rate: mean - (stdev *\n success_rate_stdev_factor). This factor is divided by a thousand to get a\n double. That is, if the desired factor is 1.9, the runtime value should\n be 1900. Defaults to 1900."}, "consecutive_gateway_failure": {"additionalProperties": true, "type": "integer", "description": "The number of consecutive gateway failures (502, 503, 504 status codes)\n before a consecutive gateway failure ejection occurs. Defaults to 5."}, "enforcing_consecutive_gateway_failure": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status\n is detected through consecutive gateway failures. This setting can be\n used to disable ejection or to ramp it up slowly. Defaults to 0."}, "split_external_local_origin_errors": {"type": "boolean", "description": "Determines whether to distinguish local origin failures from external errors. If set to true\n the following configuration parameters are taken into account:\n :ref:`consecutive_local_origin_failure<envoy_api_field_config.cluster.v4alpha.OutlierDetection.consecutive_local_origin_failure>`,\n :ref:`enforcing_consecutive_local_origin_failure<envoy_api_field_config.cluster.v4alpha.OutlierDetection.enforcing_consecutive_local_origin_failure>`\n and\n :ref:`enforcing_local_origin_success_rate<envoy_api_field_config.cluster.v4alpha.OutlierDetection.enforcing_local_origin_success_rate>`.\n Defaults to false."}, "consecutive_local_origin_failure": {"additionalProperties": true, "type": "integer", "description": "The number of consecutive locally originated failures before ejection\n occurs. Defaults to 5. Parameter takes effect only when\n :ref:`split_external_local_origin_errors<envoy_api_field_config.cluster.v4alpha.OutlierDetection.split_external_local_origin_errors>`\n is set to true."}, "enforcing_consecutive_local_origin_failure": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status\n is detected through consecutive locally originated failures. This setting can be\n used to disable ejection or to ramp it up slowly. Defaults to 100.\n Parameter takes effect only when\n :ref:`split_external_local_origin_errors<envoy_api_field_config.cluster.v4alpha.OutlierDetection.split_external_local_origin_errors>`\n is set to true."}, "enforcing_local_origin_success_rate": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status\n is detected through success rate statistics for locally originated errors.\n This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.\n Parameter takes effect only when\n :ref:`split_external_local_origin_errors<envoy_api_field_config.cluster.v4alpha.OutlierDetection.split_external_local_origin_errors>`\n is set to true."}, "failure_percentage_threshold": {"additionalProperties": true, "type": "integer", "description": "The failure percentage to use when determining failure percentage-based outlier detection. If\n the failure percentage of a given host is greater than or equal to this value, it will be\n ejected. Defaults to 85."}, "enforcing_failure_percentage": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status is detected through\n failure percentage statistics. This setting can be used to disable ejection or to ramp it up\n slowly. Defaults to 0.\n\n [#next-major-version: setting this without setting failure_percentage_threshold should be\n invalid in v4.]"}, "enforcing_failure_percentage_local_origin": {"additionalProperties": true, "type": "integer", "description": "The % chance that a host will be actually ejected when an outlier status is detected through\n local-origin failure percentage statistics. This setting can be used to disable ejection or to\n ramp it up slowly. Defaults to 0."}, "failure_percentage_minimum_hosts": {"additionalProperties": true, "type": "integer", "description": "The minimum number of hosts in a cluster in order to perform failure percentage-based ejection.\n If the total number of hosts in the cluster is less than this value, failure percentage-based\n ejection will not be performed. Defaults to 5."}, "failure_percentage_request_volume": {"additionalProperties": true, "type": "integer", "description": "The minimum number of total requests that must be collected in one interval (as defined by the\n interval duration above) to perform failure percentage-based ejection for this host. If the\n volume is lower than this setting, failure percentage-based ejection will not be performed for\n this host. Defaults to 50."}, "max_ejection_time": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The maximum time that a host is ejected for. See :ref:`base_ejection_time<envoy_api_field_config.cluster.v4alpha.OutlierDetection.base_ejection_time>`\n for more information.\n Defaults to 300000ms or 300s."}}, "additionalProperties": true, "type": "object", "description": "If specified, outlier detection will be enabled for this upstream cluster.\n Each of the configuration values can be overridden via\n :ref:`runtime values <config_cluster_manager_cluster_runtime_outlier_detection>`."}, "cleanup_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The interval for removing stale hosts from a cluster type\n :ref:`ORIGINAL_DST<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.ORIGINAL_DST>`.\n Hosts are considered stale if they have not been used\n as upstream destinations during this interval. New hosts are added\n to original destination clusters on demand as new connections are\n redirected to Envoy, causing the number of hosts in the cluster to\n grow over time. Hosts that are not stale (they are actively used as\n destinations) are kept in the cluster, which allows connections to\n them remain open, saving the latency that would otherwise be spent\n on opening new connections. If this setting is not specified, the\n value defaults to 5000ms. For cluster types other than\n :ref:`ORIGINAL_DST<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.ORIGINAL_DST>`\n this setting is ignored."}, "upstream_bind_config": {"properties": {"source_address": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/SocketAddress.jsonschema", "additionalProperties": true, "description": "The address to bind to when creating a socket."}, "freebind": {"additionalProperties": true, "type": "boolean", "description": "Whether to set the *IP_FREEBIND* option when creating the socket. When this\n flag is set to true, allows the :ref:`source_address\n <envoy_api_field_config.cluster.v4alpha.UpstreamBindConfig.source_address>` to be an IP address\n that is not configured on the system running Envoy. When this flag is set\n to false, the option *IP_FREEBIND* is disabled on the socket. When this\n flag is not set (default), the socket is not modified, i.e. the option is\n neither enabled nor disabled."}, "socket_options": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"description": {"type": "string", "description": "An optional name to give this socket option for debugging, etc.\n Uniqueness is not required and no special meaning is assumed."}, "level": {"type": "string", "description": "Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP"}, "name": {"type": "string", "description": "The numeric name as passed to setsockopt"}, "int_value": {"type": "string", "description": "Because many sockopts take an int value."}, "buf_value": {"type": "string", "description": "Otherwise it's a byte buffer."}, "state": {"enum": ["STATE_PREBIND", 0, "STATE_BOUND", 1, "STATE_LISTENING", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The state in which the option will be applied. When used in BindConfig\n STATE_PREBIND is currently the only valid value."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Socket Option ]\n\nGeneric socket option message. This would be used to set socket options that\n might not exist in upstream kernels or precompiled Envoy binaries.\n [#next-free-field: 7]"}, "type": "array", "description": "Additional socket options that may not be present in Envoy source code or\n precompiled binaries."}}, "additionalProperties": true, "type": "object", "description": "Optional configuration used to bind newly established upstream connections.\n This overrides any bind_config specified in the bootstrap proto.\n If the address and port are empty, no bind will be performed."}, "lb_subset_config": {"properties": {"fallback_policy": {"enum": ["NO_FALLBACK", 0, "ANY_ENDPOINT", 1, "DEFAULT_SUBSET", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The behavior used when no endpoint subset matches the selected route's\n metadata. The value defaults to\n :ref:`NO_FALLBACK<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`."}, "default_subset": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Specifies the default subset of endpoints used during fallback if\n fallback_policy is\n :ref:`DEFAULT_SUBSET<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET>`.\n Each field in default_subset is\n compared to the matching LbEndpoint.Metadata under the *envoy.lb*\n namespace. It is valid for no hosts to match, in which case the behavior\n is the same as a fallback_policy of\n :ref:`NO_FALLBACK<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`."}, "subset_selectors": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"keys": {"items": {"type": "string"}, "type": "array", "description": "List of keys to match with the weighted cluster metadata."}, "single_host_per_subset": {"type": "boolean", "description": "Selects a mode of operation in which each subset has only one host. This mode uses the same rules for\n choosing a host, but updating hosts is faster, especially for large numbers of hosts.\n\n If a match is found to a host, that host will be used regardless of priority levels, unless the host is unhealthy.\n\n Currently, this mode is only supported if `subset_selectors` has only one entry, and `keys` contains\n only one entry.\n\n When this mode is enabled, configurations that contain more than one host with the same metadata value for the single key in `keys`\n will use only one of the hosts with the given key; no requests will be routed to the others. The cluster gauge\n :ref:`lb_subsets_single_host_per_subset_duplicate<config_cluster_manager_cluster_stats_subset_lb>` indicates how many duplicates are\n present in the current configuration."}, "fallback_policy": {"enum": ["NOT_DEFINED", 0, "NO_FALLBACK", 1, "ANY_ENDPOINT", 2, "DEFAULT_SUBSET", 3, "KEYS_SUBSET", 4], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The behavior used when no endpoint subset matches the selected route's\n metadata."}, "fallback_keys_subset": {"items": {"type": "string"}, "type": "array", "description": "Subset of\n :ref:`keys<envoy_api_field_config.cluster.v4alpha.Cluster.LbSubsetConfig.LbSubsetSelector.keys>` used by\n :ref:`KEYS_SUBSET<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy.KEYS_SUBSET>`\n fallback policy.\n It has to be a non empty list if KEYS_SUBSET fallback policy is selected.\n For any other fallback policy the parameter is not used and should not be set.\n Only values also present in\n :ref:`keys<envoy_api_field_config.cluster.v4alpha.Cluster.LbSubsetConfig.LbSubsetSelector.keys>` are allowed, but\n `fallback_keys_subset` cannot be equal to `keys`."}}, "additionalProperties": true, "type": "object", "description": "Specifications for subsets."}, "type": "array", "description": "For each entry, LbEndpoint.Metadata's\n *envoy.lb* namespace is traversed and a subset is created for each unique\n combination of key and value. For example:\n\n .. code-block:: json\n\n   { \"subset_selectors\": [\n       { \"keys\": [ \"version\" ] },\n       { \"keys\": [ \"stage\", \"hardware_type\" ] }\n   ]}\n\n A subset is matched when the metadata from the selected route and\n weighted cluster contains the same keys and values as the subset's\n metadata. The same host may appear in multiple subsets."}, "locality_weight_aware": {"type": "boolean", "description": "If true, routing to subsets will take into account the localities and locality weights of the\n endpoints when making the routing decision.\n\n There are some potential pitfalls associated with enabling this feature, as the resulting\n traffic split after applying both a subset match and locality weights might be undesirable.\n\n Consider for example a situation in which you have 50/50 split across two localities X/Y\n which have 100 hosts each without subsetting. If the subset LB results in X having only 1\n host selected but Y having 100, then a lot more load is being dumped on the single host in X\n than originally anticipated in the load balancing assignment delivered via EDS."}, "scale_locality_weight": {"type": "boolean", "description": "When used with locality_weight_aware, scales the weight of each locality by the ratio\n of hosts in the subset vs hosts in the original subset. This aims to even out the load\n going to an individual locality if said locality is disproportionately affected by the\n subset predicate."}, "panic_mode_any": {"type": "boolean", "description": "If true, when a fallback policy is configured and its corresponding subset fails to find\n a host this will cause any host to be selected instead.\n\n This is useful when using the default subset as the fallback policy, given the default\n subset might become empty. With this option enabled, if that happens the LB will attempt\n to select a host from the entire cluster."}, "list_as_any": {"type": "boolean", "description": "If true, metadata specified for a metadata key will be matched against the corresponding\n endpoint metadata if the endpoint metadata matches the value exactly OR it is a list value\n and any of the elements in the list matches the criteria."}}, "additionalProperties": true, "type": "object", "description": "Configuration for load balancing subsetting."}, "ring_hash_lb_config": {"properties": {"minimum_ring_size": {"additionalProperties": true, "type": "integer", "description": "Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each\n provided host) the better the request distribution will reflect the desired weights. Defaults\n to 1024 entries, and limited to 8M entries. See also\n :ref:`maximum_ring_size<envoy_api_field_config.cluster.v4alpha.Cluster.RingHashLbConfig.maximum_ring_size>`."}, "hash_function": {"enum": ["XX_HASH", 0, "MURMUR_HASH_2", 1], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The hash function used to hash hosts onto the ketama ring. The value defaults to\n :ref:`XX_HASH<envoy_api_enum_value_config.cluster.v4alpha.Cluster.RingHashLbConfig.HashFunction.XX_HASH>`."}, "maximum_ring_size": {"additionalProperties": true, "type": "integer", "description": "Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered\n to further constrain resource use. See also\n :ref:`minimum_ring_size<envoy_api_field_config.cluster.v4alpha.Cluster.RingHashLbConfig.minimum_ring_size>`."}}, "additionalProperties": true, "type": "object", "description": "Optional configuration for the Ring Hash load balancing policy."}, "maglev_lb_config": {"properties": {"table_size": {"additionalProperties": true, "type": "integer", "description": "The table size for Maglev hashing. The Maglev aims for \u2018minimal disruption\u2019 rather than an absolute guarantee.\n Minimal disruption means that when the set of upstreams changes, a connection will likely be sent to the same\n upstream as it was before. Increasing the table size reduces the amount of disruption.\n The table size must be prime number. If it is not specified, the default is 65537."}}, "additionalProperties": true, "type": "object", "description": "Optional configuration for the Maglev load balancing policy."}, "original_dst_lb_config": {"properties": {"use_http_header": {"type": "boolean", "description": "When true, :ref:`x-envoy-original-dst-host\n <config_http_conn_man_headers_x-envoy-original-dst-host>` can be used to override destination\n address.\n\n .. attention::\n\n   This header isn't sanitized by default, so enabling this feature allows HTTP clients to\n   route traffic to arbitrary hosts and/or ports, which may have serious security\n   consequences.\n\n .. note::\n\n   If the header appears multiple times only the first value is used."}}, "additionalProperties": true, "type": "object", "description": "Optional configuration for the Original Destination load balancing policy."}, "least_request_lb_config": {"properties": {"choice_count": {"additionalProperties": true, "type": "integer", "description": "The number of random healthy hosts from which the host with the fewest active requests will\n be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set."}, "active_request_bias": {"properties": {"default_value": {"type": "number", "description": "Default value if runtime value is not available."}, "runtime_key": {"type": "string", "description": "Runtime key to get value for comparison. This value is used if defined."}}, "additionalProperties": true, "type": "object", "description": "The following formula is used to calculate the dynamic weights when hosts have different load\n balancing weights:\n\n `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`\n\n The larger the active request bias is, the more aggressively active requests will lower the\n effective weight when all host weights are not equal.\n\n `active_request_bias` must be greater than or equal to 0.0.\n\n When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number\n of active requests at the time it picks a host and behaves like the Round Robin Load\n Balancer.\n\n When `active_request_bias > 0.0` the Least Request Load Balancer scales the load balancing\n weight by the number of active requests at the time it does a pick.\n\n The value is cached for performance reasons and refreshed whenever one of the Load Balancer's\n host sets changes, e.g., whenever there is a host membership update or a host load balancing\n weight change.\n\n .. note::\n   This setting only takes effect if all host weights are not equal."}}, "additionalProperties": true, "type": "object", "description": "Optional configuration for the LeastRequest load balancing policy."}, "common_lb_config": {"properties": {"healthy_panic_threshold": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.v3/Percent.jsonschema", "additionalProperties": true, "description": "Configures the :ref:`healthy panic threshold <arch_overview_load_balancing_panic_threshold>`.\n If not specified, the default is 50%.\n To disable panic mode, set to 0%.\n\n .. note::\n   The specified percent will be truncated to the nearest 1%."}, "zone_aware_lb_config": {"properties": {"routing_enabled": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.v3/Percent.jsonschema", "additionalProperties": true, "description": "Configures percentage of requests that will be considered for zone aware routing\n if zone aware routing is configured. If not specified, the default is 100%.\n * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.\n * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`."}, "min_cluster_size": {"additionalProperties": true, "type": "integer", "description": "Configures minimum upstream cluster size required for zone aware routing\n If upstream cluster size is less than specified, zone aware routing is not performed\n even if zone aware routing is configured. If not specified, the default is 6.\n * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.\n * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`."}, "fail_traffic_on_panic": {"type": "boolean", "description": "If set to true, Envoy will not consider any hosts when the cluster is in :ref:`panic\n mode<arch_overview_load_balancing_panic_threshold>`. Instead, the cluster will fail all\n requests as if all hosts are unhealthy. This can help avoid potentially overwhelming a\n failing service."}}, "additionalProperties": true, "type": "object"}, "locality_weighted_lb_config": {"additionalProperties": true, "type": "object"}, "update_merge_window": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "If set, all health check/weight/metadata updates that happen within this duration will be\n merged and delivered in one shot when the duration expires. The start of the duration is when\n the first update happens. This is useful for big clusters, with potentially noisy deploys\n that might trigger excessive CPU usage due to a constant stream of healthcheck state changes\n or metadata updates. The first set of updates to be seen apply immediately (e.g.: a new\n cluster). Please always keep in mind that the use of sandbox technologies may change this\n behavior.\n\n If this is not set, we default to a merge window of 1000ms. To disable it, set the merge\n window to 0.\n\n Note: merging does not apply to cluster membership changes (e.g.: adds/removes); this is\n because merging those updates isn't currently safe. See\n https://github.com/envoyproxy/envoy/pull/3941."}, "ignore_new_hosts_until_first_hc": {"type": "boolean", "description": "If set to true, Envoy will not consider new hosts when computing load balancing weights until\n they have been health checked for the first time. This will have no effect unless\n active health checking is also configured.\n\n Ignoring a host means that for any load balancing calculations that adjust weights based\n on the ratio of eligible hosts and total hosts (priority spillover, locality weighting and\n panic mode) Envoy will exclude these hosts in the denominator.\n\n For example, with hosts in two priorities P0 and P1, where P0 looks like\n {healthy, unhealthy (new), unhealthy (new)}\n and where P1 looks like\n {healthy, healthy}\n all traffic will still hit P0, as 1 / (3 - 2) = 1.\n\n Enabling this will allow scaling up the number of hosts for a given cluster without entering\n panic mode or triggering priority spillover, assuming the hosts pass the first health check.\n\n If panic mode is triggered, new hosts are still eligible for traffic; they simply do not\n contribute to the calculation when deciding whether panic mode is enabled or not."}, "close_connections_on_host_set_change": {"type": "boolean", "description": "If set to `true`, the cluster manager will drain all existing\n connections to upstream hosts whenever hosts are added or removed from the cluster."}, "consistent_hashing_lb_config": {"properties": {"use_hostname_for_hashing": {"type": "boolean", "description": "If set to `true`, the cluster will use hostname instead of the resolved\n address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address."}, "hash_balance_factor": {"additionalProperties": true, "type": "integer", "description": "Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150\n no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.\n If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.\n Minimum is 100.\n\n Applies to both Ring Hash and Maglev load balancers.\n\n This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified\n `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests\n across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing\n is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify\n the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the\n cascading overflow effect when choosing the next host in the ring/table).\n\n If weights are specified on the hosts, they are respected.\n\n This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts\n being probed, so use a higher value if you require better performance."}}, "additionalProperties": true, "type": "object", "description": "Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)"}}, "additionalProperties": true, "type": "object", "description": "Common configuration for all load balancer implementations."}, "transport_socket": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/TransportSocket.jsonschema", "additionalProperties": true, "description": "Optional custom transport socket implementation to use for upstream connections.\n To setup TLS, set a transport socket with name `tls` and\n :ref:`UpstreamTlsContexts <envoy_api_msg_extensions.transport_sockets.tls.v4alpha.UpstreamTlsContext>` in the `typed_config`.\n If no transport socket configuration is specified, new connections\n will be set up with plaintext."}, "metadata": {"properties": {"filter_metadata": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."}}, "additionalProperties": true, "type": "object", "description": "The Metadata field can be used to provide additional information about the\n cluster. It can be used for stats, logging, and varying filter behavior.\n Fields should use reverse DNS notation to denote which entity within Envoy\n will need the information. For instance, if the metadata is intended for\n the Router filter, the filter name should be specified as *envoy.filters.http.router*."}, "upstream_connection_options": {"properties": {"tcp_keepalive": {"properties": {"keepalive_probes": {"additionalProperties": true, "type": "integer", "description": "Maximum number of keepalive probes to send without response before deciding\n the connection is dead. Default is to use the OS level configuration (unless\n overridden, Linux defaults to 9.)"}, "keepalive_time": {"additionalProperties": true, "type": "integer", "description": "The number of seconds a connection needs to be idle before keep-alive probes\n start being sent. Default is to use the OS level configuration (unless\n overridden, Linux defaults to 7200s (i.e., 2 hours.)"}, "keepalive_interval": {"additionalProperties": true, "type": "integer", "description": "The number of seconds between keep-alive probes. Default is to use the OS\n level configuration (unless overridden, Linux defaults to 75s.)"}}, "additionalProperties": true, "type": "object", "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives."}}, "additionalProperties": true, "type": "object", "description": "Optional options for upstream connections."}, "close_connections_on_host_health_failure": {"type": "boolean", "description": "If an upstream host becomes unhealthy (as determined by the configured health checks\n or outlier detection), immediately close all connections to the failed host.\n\n .. note::\n\n   This is currently only supported for connections created by tcp_proxy.\n\n .. note::\n\n   The current implementation of this feature closes all connections immediately when\n   the unhealthy status is detected. If there are a large number of connections open\n   to an upstream host that becomes unhealthy, Envoy may spend a substantial amount of\n   time exclusively closing these connections, and not processing any other traffic."}, "ignore_health_on_host_removal": {"type": "boolean", "description": "If set to true, Envoy will ignore the health value of a host when processing its removal\n from service discovery. This means that if active health checking is used, Envoy will *not*\n wait for the endpoint to go unhealthy before removing it."}, "filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the filter to instantiate. The name must match a\n :ref:`supported filter <config_network_filters>`."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "Filter specific configuration which depends on the filter being\n instantiated. See the supported filters for further documentation."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Upstream filters]\n Upstream filters apply to the connections to the upstream cluster hosts."}, "type": "array", "description": "An (optional) network filter chain, listed in the order the filters should be applied.\n The chain will be applied to all outgoing connections that Envoy makes to the upstream\n servers of this cluster."}, "load_balancing_policy": {"properties": {"policies": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Required. The name of the LB policy."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object"}, "type": "array", "description": "Each client will iterate over the list in order and stop at the first policy that it\n supports. This provides a mechanism for starting to use new LB policies that are not yet\n supported by all clients."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] New mechanism for LB policy configuration. Used only if the\n :ref:`lb_policy<envoy_api_field_config.cluster.v4alpha.Cluster.lb_policy>` field has the value\n :ref:`LOAD_BALANCING_POLICY_CONFIG<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbPolicy.LOAD_BALANCING_POLICY_CONFIG>`."}, "lrs_server": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/ConfigSource.jsonschema", "additionalProperties": true, "description": "[#not-implemented-hide:]\n If present, tells the client where to send load reports via LRS. If not present, the\n client will fall back to a client-side default, which may be either (a) don't send any\n load reports or (b) send load reports for all clusters to a single default server\n (which may be configured in the bootstrap file).\n\n Note that if multiple clusters point to the same LRS server, the client may choose to\n create a separate stream for each cluster or it may choose to coalesce the data for\n multiple clusters onto a single stream. Either way, the client must make sure to send\n the data for any given cluster on no more than one stream.\n\n [#next-major-version: In the v3 API, we should consider restructuring this somehow,\n maybe by allowing LRS to go on the ADS stream, or maybe by moving some of the negotiation\n from the LRS stream here.]"}, "upstream_config": {"properties": {"name": {"type": "string", "description": "The name of an extension. This is not used to select the extension, instead\n it serves the role of an opaque identifier."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The typed config for the extension. The type URL will be used to identify\n the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,\n the inner type URL of *TypedStruct* will be utilized. See the\n :ref:`extension configuration overview\n <config_overview_extension_configuration>` for further details."}}, "additionalProperties": true, "type": "object", "description": "Optional customization and configuration of upstream connection pool, and upstream type.\n\n Currently this field only applies for HTTP traffic but is designed for eventual use for custom\n TCP upstreams.\n\n For HTTP traffic, Envoy will generally take downstream HTTP and send it upstream as upstream\n HTTP, using the http connection pool and the codec from `http2_protocol_options`\n\n For routes where CONNECT termination is configured, Envoy will take downstream CONNECT\n requests and forward the CONNECT payload upstream over raw TCP using the tcp connection pool.\n\n The default pool used is the generic connection pool which creates the HTTP upstream for most\n HTTP requests, and the TCP upstream if CONNECT termination is configured.\n\n If users desire custom connection pool or upstream behavior, for example terminating\n CONNECT only if a custom filter indicates it is appropriate, the custom factories\n can be registered and configured here."}, "track_cluster_stats": {"properties": {"timeout_budgets": {"type": "boolean", "description": "If timeout_budgets is true, the :ref:`timeout budget histograms\n <config_cluster_manager_cluster_stats_timeout_budgets>` will be published for each\n request. These show what percentage of a request's per try and global timeout was used. A value\n of 0 would indicate that none of the timeout was used or that the timeout was infinite. A value\n of 100 would indicate that the request took the entirety of the timeout given to it."}, "request_response_sizes": {"type": "boolean", "description": "If request_response_sizes is true, then the :ref:`histograms\n <config_cluster_manager_cluster_stats_request_response_sizes>`  tracking header and body sizes\n of requests and responses will be published."}}, "additionalProperties": true, "type": "object", "description": "Configuration to track optional cluster stats."}, "preconnect_policy": {"properties": {"per_upstream_preconnect_ratio": {"additionalProperties": true, "type": "number", "description": "Indicates how many streams (rounded up) can be anticipated per-upstream for each\n incoming stream. This is useful for high-QPS or latency-sensitive services. Preconnecting\n will only be done if the upstream is healthy and the cluster has traffic.\n\n For example if this is 2, for an incoming HTTP/1.1 stream, 2 connections will be\n established, one for the new incoming stream, and one for a presumed follow-up stream. For\n HTTP/2, only one connection would be established by default as one connection can\n serve both the original and presumed follow-up stream.\n\n In steady state for non-multiplexed connections a value of 1.5 would mean if there were 100\n active streams, there would be 100 connections in use, and 50 connections preconnected.\n This might be a useful value for something like short lived single-use connections,\n for example proxying HTTP/1.1 if keep-alive were false and each stream resulted in connection\n termination. It would likely be overkill for long lived connections, such as TCP proxying SMTP\n or regular HTTP/1.1 with keep-alive. For long lived traffic, a value of 1.05 would be more\n reasonable, where for every 100 connections, 5 preconnected connections would be in the queue\n in case of unexpected disconnects where the connection could not be reused.\n\n If this value is not set, or set explicitly to one, Envoy will fetch as many connections\n as needed to serve streams in flight. This means in steady state if a connection is torn down,\n a subsequent streams will pay an upstream-rtt latency penalty waiting for a new connection.\n\n This is limited somewhat arbitrarily to 3 because preconnecting too aggressively can\n harm latency more than the preconnecting helps."}, "predictive_preconnect_ratio": {"additionalProperties": true, "type": "number", "description": "Indicates how many many streams (rounded up) can be anticipated across a cluster for each\n stream, useful for low QPS services. This is currently supported for a subset of\n deterministic non-hash-based load-balancing algorithms (weighted round robin, random).\n Unlike *per_upstream_preconnect_ratio* this preconnects across the upstream instances in a\n cluster, doing best effort predictions of what upstream would be picked next and\n pre-establishing a connection.\n\n Preconnecting will be limited to one preconnect per configured upstream in the cluster and will\n only be done if there are healthy upstreams and the cluster has traffic.\n\n For example if preconnecting is set to 2 for a round robin HTTP/2 cluster, on the first\n incoming stream, 2 connections will be preconnected - one to the first upstream for this\n cluster, one to the second on the assumption there will be a follow-up stream.\n\n If this value is not set, or set explicitly to one, Envoy will fetch as many connections\n as needed to serve streams in flight, so during warm up and in steady state if a connection\n is closed (and per_upstream_preconnect_ratio is not set), there will be a latency hit for\n connection establishment.\n\n If both this and preconnect_ratio are set, Envoy will make sure both predicted needs are met,\n basically preconnecting max(predictive-preconnect, per-upstream-preconnect), for each\n upstream."}}, "additionalProperties": true, "type": "object", "description": "Preconnect configuration for this cluster."}, "connection_pool_per_downstream_connection": {"type": "boolean", "description": "If `connection_pool_per_downstream_connection` is true, the cluster will use a separate\n connection pool for every downstream connection"}}, "additionalProperties": true, "type": "object", "description": "Configuration for a single upstream cluster.\n [#next-free-field: 53]", "definitions": {"envoy.config.core.v4alpha.ConfigSource": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"authorities": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "xDS authority information."}, "type": "array", "description": "Authorities that this config source may be used for. An authority specified in a xdstp:// URL\n is resolved to a *ConfigSource* prior to configuration fetch. This field provides the\n association between authority name and configuration source.\n [#not-implemented-hide:]"}, "path": {"type": "string", "description": "Path on the filesystem to source and watch for configuration updates.\n When sourcing configuration for :ref:`secret <envoy_api_msg_extensions.transport_sockets.tls.v4alpha.Secret>`,\n the certificate and key files are also watched for updates.\n\n .. note::\n\n  The path to the source must exist at config load time.\n\n .. note::\n\n   Envoy will only watch the file path for *moves.* This is because in general only moves\n   are atomic. The same method of swapping files as is demonstrated in the\n   :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be used here also."}, "api_config_source": {"properties": {"api_type": {"enum": ["DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE", 0, "REST", 1, "GRPC", 2, "DELTA_GRPC", 3, "AGGREGATED_GRPC", 5, "AGGREGATED_DELTA_GRPC", 6], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API type (gRPC, REST, delta gRPC)"}, "transport_api_version": {"enum": ["DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE", 0, "V3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API version for xDS transport protocol. This describes the xDS gRPC/REST\n endpoint and version of [Delta]DiscoveryRequest/Response used on the wire."}, "cluster_names": {"items": {"type": "string"}, "type": "array", "description": "Cluster names should be used only with REST. If > 1\n cluster is defined, clusters will be cycled through if any kind of failure\n occurs.\n\n .. note::\n\n  The cluster with name ``cluster_name`` must be statically defined and its\n  type must not be ``EDS``."}, "grpc_services": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/GrpcService.jsonschema"}, "type": "array", "description": "Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,\n services will be cycled through if any kind of failure occurs."}, "refresh_delay": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "For REST APIs, the delay between successive polls."}, "request_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "For REST APIs, the request timeout. If not set, a default value of 1s will be used."}, "rate_limit_settings": {"properties": {"max_tokens": {"additionalProperties": true, "type": "integer", "description": "Maximum number of tokens to be used for rate limiting discovery request calls. If not set, a\n default value of 100 will be used."}, "fill_rate": {"additionalProperties": true, "type": "number", "description": "Rate at which tokens will be filled per second. If not set, a default fill rate of 10 tokens\n per second will be used."}}, "additionalProperties": true, "type": "object", "description": "For GRPC APIs, the rate limit settings. If present, discovery requests made by Envoy will be\n rate limited."}, "set_node_on_first_message_only": {"type": "boolean", "description": "Skip the node identifier in subsequent discovery requests for streaming gRPC config types."}}, "additionalProperties": true, "type": "object", "description": "API configuration source."}, "ads": {"additionalProperties": true, "type": "object", "description": "When set, ADS will be used to fetch resources. The ADS API configuration\n source in the bootstrap configuration is used."}, "self": {"properties": {"transport_api_version": {"enum": ["DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE", 0, "V3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API version for xDS transport protocol. This describes the xDS gRPC/REST\n endpoint and version of [Delta]DiscoveryRequest/Response used on the wire."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n When set, the client will access the resources from the same server it got the\n ConfigSource from, although not necessarily from the same stream. This is similar to the\n :ref:`ads<envoy_api_field.ConfigSource.ads>` field, except that the client may use a\n different stream to the same server. As a result, this field can be used for things\n like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)\n LDS to RDS on the same server without requiring the management server to know its name\n or required credentials.\n [#next-major-version: In xDS v3, consider replacing the ads field with this one, since\n this field can implicitly mean to use the same stream in the case where the ConfigSource\n is provided via ADS and the specified data can also be obtained via ADS.]"}, "initial_fetch_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "When this timeout is specified, Envoy will wait no longer than the specified time for first\n config response on this xDS subscription during the :ref:`initialization process\n <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next\n initialization phase, even if the first config is not delivered yet. The timer is activated\n when the xDS API subscription starts, and is disarmed on first config update or on error. 0\n means no timeout - Envoy will wait indefinitely for the first xDS config (unless another\n timeout applies). The default is 15s."}, "resource_api_version": {"enum": ["DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE", 0, "V3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API version for xDS resources. This implies the type URLs that the client\n will request for resources and the resource type that the client will in\n turn expect to be delivered."}}, "additionalProperties": true, "type": "object", "description": "Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters\n <config_cluster_manager>`, :ref:`routes\n <envoy_api_msg_config.route.v4alpha.RouteConfiguration>`, :ref:`endpoints\n <arch_overview_service_discovery>` etc. may either be sourced from the\n filesystem or from an xDS API source. Filesystem configs are watched with\n inotify for updates.\n [#next-free-field: 8]", "id": "envoy.config.core.v4alpha.ConfigSource"}, "envoy.config.core.v4alpha.DataSource": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filename": {"type": "string", "description": "Local filesystem data source."}, "inline_bytes": {"type": "string", "description": "Bytes inlined in the configuration."}, "inline_string": {"type": "string", "description": "String inlined in the configuration."}}, "additionalProperties": true, "type": "object", "description": "Data source consisting of either a file or an inline value.", "id": "envoy.config.core.v4alpha.DataSource"}, "envoy.config.core.v4alpha.GrpcService": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"envoy_grpc": {"properties": {"cluster_name": {"type": "string", "description": "The name of the upstream gRPC cluster. SSL credentials will be supplied\n in the :ref:`Cluster <envoy_api_msg_config.cluster.v4alpha.Cluster>` :ref:`transport_socket\n <envoy_api_field_config.cluster.v4alpha.Cluster.transport_socket>`."}, "authority": {"type": "string", "description": "The `:authority` header in the grpc request. If this field is not set, the authority header value will be `cluster_name`.\n Note that this authority does not override the SNI. The SNI is provided by the transport socket of the cluster."}}, "additionalProperties": true, "type": "object", "description": "Envoy's in-built gRPC client.\n See the :ref:`gRPC services overview <arch_overview_grpc_services>`\n documentation for discussion on gRPC client selection."}, "google_grpc": {"properties": {"target_uri": {"type": "string", "description": "The target URI when using the `Google C++ gRPC client\n <https://github.com/grpc/grpc>`_. SSL credentials will be supplied in\n :ref:`channel_credentials <envoy_api_field_config.core.v4alpha.GrpcService.GoogleGrpc.channel_credentials>`."}, "channel_credentials": {"properties": {"ssl_credentials": {"properties": {"root_certs": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/DataSource.jsonschema", "additionalProperties": true, "description": "PEM encoded server root certificates."}, "private_key": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/DataSource.jsonschema", "additionalProperties": true, "description": "PEM encoded client private key."}, "cert_chain": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/DataSource.jsonschema", "additionalProperties": true, "description": "PEM encoded client certificate chain."}}, "additionalProperties": true, "type": "object"}, "google_default": {"additionalProperties": true, "type": "object", "description": "https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"}, "local_credentials": {"additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object"}, "call_credentials": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"access_token": {"type": "string", "description": "Access token credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#ad3a80da696ffdaea943f0f858d7a360d."}, "google_compute_engine": {"additionalProperties": true, "type": "object", "description": "Google Compute Engine credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"}, "google_refresh_token": {"type": "string", "description": "Google refresh token credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a96901c997b91bc6513b08491e0dca37c."}, "service_account_jwt_access": {"properties": {"json_key": {"type": "string"}, "token_lifetime_seconds": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "Service Account JWT Access credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a92a9f959d6102461f66ee973d8e9d3aa."}, "google_iam": {"properties": {"authorization_token": {"type": "string"}, "authority_selector": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "Google IAM credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a9fc1fc101b41e680d47028166e76f9d0."}, "from_plugin": {"properties": {"name": {"type": "string"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Custom authenticator credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a823c6a4b19ffc71fb33e90154ee2ad07.\n https://grpc.io/docs/guides/auth.html#extending-grpc-to-support-other-authentication-mechanisms."}, "sts_service": {"properties": {"token_exchange_service_uri": {"type": "string", "description": "URI of the token exchange service that handles token exchange requests.\n [#comment:TODO(asraa): Add URI validation when implemented. Tracked by\n https://github.com/envoyproxy/protoc-gen-validate/issues/303]"}, "resource": {"type": "string", "description": "Location of the target service or resource where the client\n intends to use the requested security token."}, "audience": {"type": "string", "description": "Logical name of the target service where the client intends to\n use the requested security token."}, "scope": {"type": "string", "description": "The desired scope of the requested security token in the\n context of the service or resource where the token will be used."}, "requested_token_type": {"type": "string", "description": "Type of the requested security token."}, "subject_token_path": {"type": "string", "description": "The path of subject token, a security token that represents the\n identity of the party on behalf of whom the request is being made."}, "subject_token_type": {"type": "string", "description": "Type of the subject token."}, "actor_token_path": {"type": "string", "description": "The path of actor token, a security token that represents the identity\n of the acting party. The acting party is authorized to use the\n requested security token and act on behalf of the subject."}, "actor_token_type": {"type": "string", "description": "Type of the actor token."}}, "additionalProperties": true, "type": "object", "description": "Custom security token service which implements OAuth 2.0 token exchange.\n https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16\n See https://github.com/grpc/grpc/pull/19587."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 8]"}, "type": "array", "description": "A set of call credentials that can be composed with `channel credentials\n <https://grpc.io/docs/guides/auth.html#credential-types>`_."}, "stat_prefix": {"type": "string", "description": "The human readable prefix to use when emitting statistics for the gRPC\n service.\n\n .. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    streams_total, Counter, Total number of streams opened\n    streams_closed_<gRPC status code>, Counter, Total streams closed with <gRPC status code>"}, "credentials_factory_name": {"type": "string", "description": "The name of the Google gRPC credentials factory to use. This must have been registered with\n Envoy. If this is empty, a default credentials factory will be used that sets up channel\n credentials based on other configuration parameters."}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Additional configuration for site-specific customizations of the Google\n gRPC library."}, "per_stream_buffer_limit_bytes": {"additionalProperties": true, "type": "integer", "description": "How many bytes each stream can buffer internally.\n If not set an implementation defined default is applied (1MiB)."}, "channel_args": {"properties": {"args": {"additionalProperties": {"properties": {"string_value": {"type": "string"}, "int_value": {"type": "string"}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "See grpc_types.h GRPC_ARG #defines for keys that work here."}}, "additionalProperties": true, "type": "object", "description": "Custom channels args."}}, "additionalProperties": true, "type": "object", "description": "`Google C++ gRPC client <https://github.com/grpc/grpc>`_\n See the :ref:`gRPC services overview <arch_overview_grpc_services>`\n documentation for discussion on gRPC client selection."}, "timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The timeout for the gRPC request. This is the timeout for a specific\n request."}, "initial_metadata": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v4alpha/HeaderValue.jsonschema"}, "type": "array", "description": "Additional metadata to include in streams initiated to the GrpcService. This can be used for\n scenarios in which additional ad hoc authorization headers (e.g. ``x-foo-bar: baz-key``) are to\n be injected. For more information, including details on header value syntax, see the\n documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: gRPC services]\n\ngRPC service configuration. This is used by :ref:`ApiConfigSource\n <envoy_api_msg_config.core.v4alpha.ApiConfigSource>` and filter configurations.\n [#next-free-field: 6]", "id": "envoy.config.core.v4alpha.GrpcService"}, "envoy.config.core.v4alpha.HeaderValue": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "Header name."}, "value": {"type": "string", "description": "Header value.\n\n The same :ref:`format specifier <config_access_log_format>` as used for\n :ref:`HTTP access logging <config_access_log>` applies here, however\n unknown header values are replaced with the empty string instead of `-`."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair.", "id": "envoy.config.core.v4alpha.HeaderValue"}, "envoy.config.core.v4alpha.HealthCheck.Payload": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"text": {"type": "string", "description": "Hex encoded payload. E.g., \"000000FF\"."}, "binary": {"type": "string", "description": "[#not-implemented-hide:] Binary payload."}}, "additionalProperties": true, "type": "object", "description": "Describes the encoding of the payload bytes in the payload.", "id": "envoy.config.core.v4alpha.HealthCheck.Payload"}, "envoy.config.core.v4alpha.SocketAddress": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_config.listener.v4alpha.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_config.core.v4alpha.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_config.cluster.v4alpha.Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_config.core.v4alpha.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_config.core.v4alpha.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 7]", "id": "envoy.config.core.v4alpha.SocketAddress"}, "envoy.config.core.v4alpha.TransportSocket": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the transport socket to instantiate. The name must match a supported transport\n socket implementation."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Configuration for transport socket in :ref:`listeners <config_listeners>` and\n :ref:`clusters <envoy_api_msg_config.cluster.v4alpha.Cluster>`. If the configuration is\n empty, a default transport socket implementation and configuration will be\n chosen based on the platform and existence of tls_context.", "id": "envoy.config.core.v4alpha.TransportSocket"}, "envoy.config.endpoint.v3.Endpoint": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address": {"properties": {"socket_address": {"properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_config.listener.v3.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_config.core.v3.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_config.cluster.v3.Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_config.core.v3.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object"}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}, "envoy_internal_address": {"properties": {"server_listener_name": {"type": "string", "description": "[#not-implemented-hide:] The :ref:`listener name <envoy_api_field_config.listener.v3.Listener.name>` of the destination internal listener."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}}, "additionalProperties": true, "type": "object", "description": "The upstream host address.\n\n .. attention::\n\n   The form of host address depends on the given cluster type. For STATIC or EDS,\n   it is expected to be a direct IP address (or something resolvable by the\n   specified :ref:`resolver <envoy_api_field_config.core.v3.SocketAddress.resolver_name>`\n   in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,\n   and will be resolved via DNS."}, "health_check_config": {"properties": {"port_value": {"type": "integer", "description": "Optional alternative health check port value.\n\n By default the health check address port of an upstream host is the same\n as the host's serving address port. This provides an alternative health\n check port. Setting this with a non-zero value allows an upstream host\n to have different health check address port."}, "hostname": {"type": "string", "description": "By default, the host header for L7 health checks is controlled by cluster level configuration\n (see: :ref:`host <envoy_api_field_config.core.v3.HealthCheck.HttpHealthCheck.host>` and\n :ref:`authority <envoy_api_field_config.core.v3.HealthCheck.GrpcHealthCheck.authority>`). Setting this\n to a non-empty value allows overriding the cluster level configuration for a specific\n endpoint."}}, "additionalProperties": true, "type": "object", "description": "The optional health check configuration is used as configuration for the\n health checker to contact the health checked host.\n\n .. attention::\n\n   This takes into effect only for upstream clusters with\n   :ref:`active health checking <arch_overview_health_checking>` enabled."}, "hostname": {"type": "string", "description": "The hostname associated with this endpoint. This hostname is not used for routing or address\n resolution. If provided, it will be associated with the endpoint, and can be used for features\n that require a hostname, like\n :ref:`auto_host_rewrite <envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite>`."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Endpoints]\n\nUpstream host identifier.", "id": "envoy.config.endpoint.v3.Endpoint"}, "envoy.type.v3.Percent": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"value": {"type": "number"}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Percent]\n\nIdentifies a percentage, in the range [0.0, 100.0].", "id": "envoy.type.v3.Percent"}}}