{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "policies": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Required. The name of the LB policy."
                    },
                    "typed_config": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "additionalProperties": true,
                "type": "object"
            },
            "type": "array",
            "description": "Each client will iterate over the list in order and stop at the first policy that it\n supports. This provides a mechanism for starting to use new LB policies that are not yet\n supported by all clients."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#not-implemented-hide:] Extensible load balancing policy configuration.\n\n Every LB policy defined via this mechanism will be identified via a unique name using reverse\n DNS notation. If the policy needs configuration parameters, it must define a message for its\n own configuration, which will be stored in the config field. The name of the policy will tell\n clients which type of message they should expect to see in the config field.\n\n Note that there are cases where it is useful to be able to independently select LB policies\n for choosing a locality and for choosing an endpoint within that locality. For example, a\n given deployment may always use the same policy to choose the locality, but for choosing the\n endpoint within the locality, some clusters may use weighted-round-robin, while others may\n use some sort of session-based balancing.\n\n This can be accomplished via hierarchical LB policies, where the parent LB policy creates a\n child LB policy for each locality. For each request, the parent chooses the locality and then\n delegates to the child policy for that locality to choose the endpoint within the locality.\n\n To facilitate this, the config message for the top-level LB policy may include a field of\n type LoadBalancingPolicy that specifies the child policy."
}