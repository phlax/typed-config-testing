{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "name": {
            "type": "string",
            "description": "The name of the filter to instantiate. The name must match a\n :ref:`supported filter \u003cconfig_listener_filters\u003e`."
        },
        "typed_config": {
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type."
                }
            },
            "additionalProperties": true,
            "type": "object"
        },
        "filter_disabled": {
            "$ref": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate",
            "additionalProperties": true,
            "description": "Optional match predicate used to disable the filter. The filter is enabled when this field is empty.\n See :ref:`ListenerFilterChainMatchPredicate \u003cenvoy_api_msg_config.listener.v4alpha.ListenerFilterChainMatchPredicate\u003e`\n for further examples."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "definitions": {
        "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "or_match": {
                    "$ref": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate.MatchSet",
                    "additionalProperties": true,
                    "description": "A set that describes a logical OR. If any member of the set matches, the match configuration\n matches."
                },
                "and_match": {
                    "$ref": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate.MatchSet",
                    "additionalProperties": true,
                    "description": "A set that describes a logical AND. If all members of the set match, the match configuration\n matches."
                },
                "not_match": {
                    "$ref": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate",
                    "additionalProperties": true,
                    "description": "A negation match. The match configuration will match if the negated match condition matches."
                },
                "any_match": {
                    "type": "boolean",
                    "description": "The match configuration will always match."
                },
                "destination_port_range": {
                    "properties": {
                        "start": {
                            "type": "integer",
                            "description": "start of the range (inclusive)"
                        },
                        "end": {
                            "type": "integer",
                            "description": "end of the range (exclusive)"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Match destination port. Particularly, the match evaluation must use the recovered local port if\n the owning listener filter is after :ref:`an original_dst listener filter \u003cconfig_listener_filters_original_dst\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Listener filter chain match configuration. This is a recursive structure which allows complex\n nested match configurations to be built using various logical operators.\n\n Examples:\n\n * Matches if the destination port is 3306.\n\n .. code-block:: yaml\n\n  destination_port_range:\n   start: 3306\n   end: 3307\n\n * Matches if the destination port is 3306 or 15000.\n\n .. code-block:: yaml\n\n  or_match:\n    rules:\n      - destination_port_range:\n          start: 3306\n          end: 3306\n      - destination_port_range:\n          start: 15000\n          end: 15001\n\n [#next-free-field: 6]",
            "id": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate"
        },
        "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate.MatchSet": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "rules": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate"
                    },
                    "type": "array",
                    "description": "The list of rules that make up the set."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "A set of match configurations used for logical operations.",
            "id": "envoy.config.listener.v4alpha.ListenerFilterChainMatchPredicate.MatchSet"
        }
    }
}