{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "status": {
            "enum": [
                "UNKNOWN",
                0,
                "SYNCED",
                1,
                "NOT_SENT",
                2,
                "STALE",
                3,
                "ERROR",
                4
            ],
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "integer"
                }
            ],
            "description": "Config status generated by management servers. Will not be present if the\n CSDS server is an xDS client."
        },
        "client_status": {
            "enum": [
                "CLIENT_UNKNOWN",
                0,
                "CLIENT_REQUESTED",
                1,
                "CLIENT_ACKED",
                2,
                "CLIENT_NACKED",
                3
            ],
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "integer"
                }
            ],
            "description": "Client config status is populated by xDS clients. Will not be present if\n the CSDS server is an xDS server. No matter what the client config status\n is, xDS clients should always dump the most recent accepted xDS config."
        },
        "listener_config": {
            "properties": {
                "version_info": {
                    "type": "string",
                    "description": "This is the :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` in the\n last processed LDS discovery response. If there are only static bootstrap listeners, this field\n will be \"\"."
                },
                "static_listeners": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "listener": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The listener config."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The timestamp when the Listener was last successfully updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Describes a statically loaded listener."
                    },
                    "type": "array",
                    "description": "The statically loaded listener configs."
                },
                "dynamic_listeners": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name or unique id of this listener, pulled from the DynamicListenerState config."
                            },
                            "active_state": {
                                "$ref": "envoy.admin.v4alpha.ListenersConfigDump.DynamicListenerState",
                                "additionalProperties": true,
                                "description": "The listener state for any active listener by this name.\n These are listeners that are available to service data plane traffic."
                            },
                            "warming_state": {
                                "$ref": "envoy.admin.v4alpha.ListenersConfigDump.DynamicListenerState",
                                "additionalProperties": true,
                                "description": "The listener state for any warming listener by this name.\n These are listeners that are currently undergoing warming in preparation to service data\n plane traffic. Note that if attempting to recreate an Envoy configuration from a\n configuration dump, the warming listeners should generally be discarded."
                            },
                            "draining_state": {
                                "$ref": "envoy.admin.v4alpha.ListenersConfigDump.DynamicListenerState",
                                "additionalProperties": true,
                                "description": "The listener state for any draining listener by this name.\n These are listeners that are currently undergoing draining in preparation to stop servicing\n data plane traffic. Note that if attempting to recreate an Envoy configuration from a\n configuration dump, the draining listeners should generally be discarded."
                            },
                            "error_state": {
                                "properties": {
                                    "failed_configuration": {
                                        "properties": {
                                            "type_url": {
                                                "type": "string",
                                                "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                            },
                                            "value": {
                                                "type": "string",
                                                "description": "Must be a valid serialized protocol buffer of the above specified type."
                                            }
                                        },
                                        "additionalProperties": true,
                                        "type": "object",
                                        "description": "What the component configuration would have been if the update had succeeded."
                                    },
                                    "last_update_attempt": {
                                        "type": "string",
                                        "description": "Time of the latest failed update attempt.",
                                        "format": "date-time"
                                    },
                                    "details": {
                                        "type": "string",
                                        "description": "Details about the last failed update attempt."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "Set if the last update failed, cleared after the next successful update."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Describes a dynamically loaded listener via the LDS API.\n [#next-free-field: 6]"
                    },
                    "type": "array",
                    "description": "State for any warming, active, or draining listeners."
                }
            },
            "additionalProperties": true,
            "type": "object"
        },
        "cluster_config": {
            "properties": {
                "version_info": {
                    "type": "string",
                    "description": "This is the :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` in the\n last processed CDS discovery response. If there are only static bootstrap clusters, this field\n will be \"\"."
                },
                "static_clusters": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "cluster": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The cluster config."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The timestamp when the Cluster was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Describes a statically loaded cluster."
                    },
                    "type": "array",
                    "description": "The statically loaded cluster configs."
                },
                "dynamic_active_clusters": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster"
                    },
                    "type": "array",
                    "description": "The dynamically loaded active clusters. These are clusters that are available to service\n data plane traffic."
                },
                "dynamic_warming_clusters": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster"
                    },
                    "type": "array",
                    "description": "The dynamically loaded warming clusters. These are clusters that are currently undergoing\n warming in preparation to service data plane traffic. Note that if attempting to recreate an\n Envoy configuration from a configuration dump, the warming clusters should generally be\n discarded."
                }
            },
            "additionalProperties": true,
            "type": "object"
        },
        "route_config": {
            "properties": {
                "static_route_configs": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "route_config": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The route config."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The timestamp when the Route was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "The statically loaded route configs."
                },
                "dynamic_route_configs": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "version_info": {
                                "type": "string",
                                "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` field at the time that\n the route configuration was loaded."
                            },
                            "route_config": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The route config."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The timestamp when the Route was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "The dynamically loaded route configs."
                }
            },
            "additionalProperties": true,
            "type": "object"
        },
        "scoped_route_config": {
            "properties": {
                "inline_scoped_route_configs": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name assigned to the scoped route configurations."
                            },
                            "scoped_route_configs": {
                                "items": {
                                    "$schema": "http://json-schema.org/draft-04/schema#",
                                    "properties": {
                                        "type_url": {
                                            "type": "string",
                                            "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Must be a valid serialized protocol buffer of the above specified type."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(\u0026foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := \u0026pb.Foo{...}\n      any, err := anypb.New(foo)\n      if err != nil {\n        ...\n      }\n      ...\n      foo := \u0026pb.Foo{}\n      if err := any.UnmarshalTo(foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": \u003cstring\u003e,\n       \"lastName\": \u003cstring\u003e\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }"
                                },
                                "type": "array",
                                "description": "The scoped route configurations."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The timestamp when the scoped route config set was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "The statically loaded scoped route configs."
                },
                "dynamic_scoped_route_configs": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name assigned to the scoped route configurations."
                            },
                            "version_info": {
                                "type": "string",
                                "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` field at the time that\n the scoped routes configuration was loaded."
                            },
                            "scoped_route_configs": {
                                "items": {
                                    "$schema": "http://json-schema.org/draft-04/schema#",
                                    "properties": {
                                        "type_url": {
                                            "type": "string",
                                            "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Must be a valid serialized protocol buffer of the above specified type."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(\u0026foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := \u0026pb.Foo{...}\n      any, err := anypb.New(foo)\n      if err != nil {\n        ...\n      }\n      ...\n      foo := \u0026pb.Foo{}\n      if err := any.UnmarshalTo(foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": \u003cstring\u003e,\n       \"lastName\": \u003cstring\u003e\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }"
                                },
                                "type": "array",
                                "description": "The scoped route configurations."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The timestamp when the scoped route config set was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "The dynamically loaded scoped route configs."
                }
            },
            "additionalProperties": true,
            "type": "object"
        },
        "endpoint_config": {
            "properties": {
                "static_endpoint_configs": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "endpoint_config": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The endpoint config."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "[#not-implemented-hide:] The timestamp when the Endpoint was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "The statically loaded endpoint configs."
                },
                "dynamic_endpoint_configs": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "version_info": {
                                "type": "string",
                                "description": "[#not-implemented-hide:] This is the per-resource version information. This version is currently taken from the\n :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` field at the time that\n the endpoint configuration was loaded."
                            },
                            "endpoint_config": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The endpoint config."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "[#not-implemented-hide:] The timestamp when the Endpoint was last updated.",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "The dynamically loaded endpoint configs."
                }
            },
            "additionalProperties": true,
            "type": "object"
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Detailed config (per xDS) with status.\n [#next-free-field: 8]",
    "definitions": {
        "envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "version_info": {
                    "type": "string",
                    "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` field at the time\n that the cluster was loaded. In the future, discrete per-cluster versions may be supported by\n the API."
                },
                "cluster": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The cluster config."
                },
                "last_updated": {
                    "type": "string",
                    "description": "The timestamp when the Cluster was last updated.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Describes a dynamically loaded cluster via the CDS API.",
            "id": "envoy.admin.v4alpha.ClustersConfigDump.DynamicCluster"
        },
        "envoy.admin.v4alpha.ListenersConfigDump.DynamicListenerState": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "version_info": {
                    "type": "string",
                    "description": "This is the per-resource version information. This version is currently taken from the\n :ref:`version_info \u003cenvoy_api_field_service.discovery.v4alpha.DiscoveryResponse.version_info\u003e` field at the time\n that the listener was loaded. In the future, discrete per-listener versions may be supported\n by the API."
                },
                "listener": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The listener config."
                },
                "last_updated": {
                    "type": "string",
                    "description": "The timestamp when the Listener was last successfully updated.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "id": "envoy.admin.v4alpha.ListenersConfigDump.DynamicListenerState"
        }
    }
}