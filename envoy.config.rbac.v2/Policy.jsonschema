{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"permissions": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.rbac.v2.Permission"}, "type": "array", "description": "Required. The set of permissions that define a role. Each permission is matched with OR\n semantics. To match all actions for this policy, a single Permission with the `any` field set\n to true should be used."}, "principals": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.rbac.v2.Principal"}, "type": "array", "description": "Required. The set of principals that are assigned/denied the role based on \u201caction\u201d. Each\n principal is matched with OR semantics. To match all downstreams for this policy, a single\n Principal with the `any` field set to true should be used."}, "condition": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "An optional symbolic expression specifying an access control\n :ref:`condition <arch_overview_condition>`. The condition is combined\n with the permissions and the principals as a clause with AND semantics."}}, "additionalProperties": true, "type": "object", "description": "Policy specifies a role and the principals that are assigned/denied the role. A policy matches if\n and only if at least one of its permissions match the action taking place AND at least one of its\n principals match the downstream AND the condition is true if specified.", "definitions": {"envoy.api.v2.core.CidrRange": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address_prefix": {"type": "string", "description": "IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``."}, "prefix_len": {"additionalProperties": true, "type": "integer", "description": "Length of prefix, e.g. 0, 32."}}, "additionalProperties": true, "type": "object", "description": "CidrRange specifies an IP Address and a prefix length to construct\n the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.", "id": "envoy.api.v2.core.CidrRange"}, "envoy.api.v2.route.HeaderMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "regex_match": {"type": "string", "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex. The regex grammar used in the value field is defined\n `here <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex_match` as it is not safe for use\n   with untrusted input in all cases."}, "safe_regex_match": {"$ref": "#/definitions/envoy.type.matcher.RegexMatcher", "additionalProperties": true, "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   <envoy_api_field_route.HeaderMatcher.present_match>`. i.e, a request that has the :ref:`name\n   <envoy_api_field_route.HeaderMatcher.name>` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 12]", "id": "envoy.api.v2.route.HeaderMatcher"}, "envoy.config.rbac.v2.Permission": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"and_rules": {"$ref": "#/definitions/envoy.config.rbac.v2.Permission.Set", "additionalProperties": true, "description": "A set of rules that all must match in order to define the action."}, "or_rules": {"$ref": "#/definitions/envoy.config.rbac.v2.Permission.Set", "additionalProperties": true, "description": "A set of rules where at least one must match in order to define the action."}, "any": {"type": "boolean", "description": "When any is set, it matches any action."}, "header": {"$ref": "#/definitions/envoy.api.v2.route.HeaderMatcher", "additionalProperties": true, "description": "A header (or pseudo-header such as :path or :method) on the incoming HTTP request. Only\n available for HTTP request.\n Note: the pseudo-header :path includes the query and fragment string. Use the `url_path`\n field if you want to match the URL path without the query and fragment string."}, "url_path": {"$ref": "#/definitions/envoy.type.matcher.PathMatcher", "additionalProperties": true, "description": "A URL path on the incoming HTTP request. Only available for HTTP."}, "destination_ip": {"$ref": "#/definitions/envoy.api.v2.core.CidrRange", "additionalProperties": true, "description": "A CIDR block that describes the destination IP."}, "destination_port": {"type": "integer", "description": "A port number that describes the destination port connecting to."}, "metadata": {"$ref": "#/definitions/envoy.type.matcher.MetadataMatcher", "additionalProperties": true, "description": "Metadata that describes additional information about the action."}, "not_rule": {"$ref": "#/definitions/envoy.config.rbac.v2.Permission", "additionalProperties": true, "description": "Negates matching the provided permission. For instance, if the value of `not_rule` would\n match, this permission would not match. Conversely, if the value of `not_rule` would not\n match, this permission would match."}, "requested_server_name": {"$ref": "#/definitions/envoy.type.matcher.StringMatcher", "additionalProperties": true, "description": "The request server from the client's connection request. This is\n typically TLS SNI.\n\n .. attention::\n\n   The behavior of this field may be affected by how Envoy is configured\n   as explained below.\n\n   * If the :ref:`TLS Inspector <config_listener_filters_tls_inspector>`\n     filter is not added, and if a `FilterChainMatch` is not defined for\n     the :ref:`server name <envoy_api_field_listener.FilterChainMatch.server_names>`,\n     a TLS connection's requested SNI server name will be treated as if it\n     wasn't present.\n\n   * A :ref:`listener filter <arch_overview_listener_filters>` may\n     overwrite a connection's requested server name within Envoy.\n\n Please refer to :ref:`this FAQ entry <faq_how_to_setup_sni>` to learn to\n setup SNI."}}, "additionalProperties": true, "type": "object", "description": "Permission defines an action (or actions) that a principal can take.\n [#next-free-field: 11]", "id": "envoy.config.rbac.v2.Permission"}, "envoy.config.rbac.v2.Permission.Set": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"rules": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.rbac.v2.Permission"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,\n each are applied with the associated behavior.", "id": "envoy.config.rbac.v2.Permission.Set"}, "envoy.config.rbac.v2.Principal": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"and_ids": {"$ref": "#/definitions/envoy.config.rbac.v2.Principal.Set", "additionalProperties": true, "description": "A set of identifiers that all must match in order to define the downstream."}, "or_ids": {"$ref": "#/definitions/envoy.config.rbac.v2.Principal.Set", "additionalProperties": true, "description": "A set of identifiers at least one must match in order to define the downstream."}, "any": {"type": "boolean", "description": "When any is set, it matches any downstream."}, "authenticated": {"properties": {"principal_name": {"$ref": "#/definitions/envoy.type.matcher.StringMatcher", "additionalProperties": true, "description": "The name of the principal. If set, The URI SAN or DNS SAN in that order is used from the\n certificate, otherwise the subject field is used. If unset, it applies to any user that is\n authenticated."}}, "additionalProperties": true, "type": "object", "description": "Authenticated attributes that identify the downstream."}, "source_ip": {"$ref": "#/definitions/envoy.api.v2.core.CidrRange", "additionalProperties": true, "description": "A CIDR block that describes the downstream IP.\n This address will honor proxy protocol, but will not honor XFF."}, "direct_remote_ip": {"$ref": "#/definitions/envoy.api.v2.core.CidrRange", "additionalProperties": true, "description": "A CIDR block that describes the downstream remote/origin address.\n Note: This is always the physical peer even if the\n :ref:`remote_ip <envoy_api_field_config.rbac.v2.Principal.remote_ip>` is inferred\n from for example the x-forwarder-for header, proxy protocol, etc."}, "remote_ip": {"$ref": "#/definitions/envoy.api.v2.core.CidrRange", "additionalProperties": true, "description": "A CIDR block that describes the downstream remote/origin address.\n Note: This may not be the physical peer and could be different from the\n :ref:`direct_remote_ip <envoy_api_field_config.rbac.v2.Principal.direct_remote_ip>`.\n E.g, if the remote ip is inferred from for example the x-forwarder-for header,\n proxy protocol, etc."}, "header": {"$ref": "#/definitions/envoy.api.v2.route.HeaderMatcher", "additionalProperties": true, "description": "A header (or pseudo-header such as :path or :method) on the incoming HTTP request. Only\n available for HTTP request.\n Note: the pseudo-header :path includes the query and fragment string. Use the `url_path`\n field if you want to match the URL path without the query and fragment string."}, "url_path": {"$ref": "#/definitions/envoy.type.matcher.PathMatcher", "additionalProperties": true, "description": "A URL path on the incoming HTTP request. Only available for HTTP."}, "metadata": {"$ref": "#/definitions/envoy.type.matcher.MetadataMatcher", "additionalProperties": true, "description": "Metadata that describes additional information about the principal."}, "not_id": {"$ref": "#/definitions/envoy.config.rbac.v2.Principal", "additionalProperties": true, "description": "Negates matching the provided principal. For instance, if the value of `not_id` would match,\n this principal would not match. Conversely, if the value of `not_id` would not match, this\n principal would match."}}, "additionalProperties": true, "type": "object", "description": "Principal defines an identity or a group of identities for a downstream subject.\n [#next-free-field: 12]", "id": "envoy.config.rbac.v2.Principal"}, "envoy.config.rbac.v2.Principal.Set": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"ids": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.rbac.v2.Principal"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Used in the `and_ids` and `or_ids` fields in the `identifier` oneof. Depending on the context,\n each are applied with the associated behavior.", "id": "envoy.config.rbac.v2.Principal.Set"}, "envoy.type.matcher.MetadataMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter": {"type": "string", "description": "The filter name to retrieve the Struct from the Metadata."}, "path": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "If specified, use the key to retrieve the value in a Struct."}}, "additionalProperties": true, "type": "object", "description": "Specifies the segment in a path to retrieve value from Metadata.\n Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that\n if the segment key refers to a list, it has to be the last segment in a path."}, "type": "array", "description": "The path to retrieve the Value from the Struct."}, "value": {"$ref": "#/definitions/envoy.type.matcher.ValueMatcher", "additionalProperties": true, "description": "The MetadataMatcher is matched if the value retrieved by path is matched to this value."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Metadata matcher]\n\nMetadataMatcher provides a general interface to check if a given value is matched in\n :ref:`Metadata <envoy_api_msg_core.Metadata>`. It uses `filter` and `path` to retrieve the value\n from the Metadata and then check if it's matched to the specified value.\n\n For example, for the following Metadata:\n\n .. code-block:: yaml\n\n    filter_metadata:\n      envoy.filters.http.rbac:\n        fields:\n          a:\n            struct_value:\n              fields:\n                b:\n                  struct_value:\n                    fields:\n                      c:\n                        string_value: pro\n                t:\n                  list_value:\n                    values:\n                      - string_value: m\n                      - string_value: n\n\n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value \"pro\"\n from the Metadata which is matched to the specified prefix match.\n\n .. code-block:: yaml\n\n    filter: envoy.filters.http.rbac\n    path:\n    - key: a\n    - key: b\n    - key: c\n    value:\n      string_match:\n        prefix: pr\n\n The following MetadataMatcher is matched as the code will match one of the string values in the\n list at the path [a, t].\n\n .. code-block:: yaml\n\n    filter: envoy.filters.http.rbac\n    path:\n    - key: a\n    - key: t\n    value:\n      list_match:\n        one_of:\n          string_match:\n            exact: m\n\n An example use of MetadataMatcher is specifying additional metadata in envoy.filters.http.rbac to\n enforce access control based on dynamic metadata in a request. See :ref:`Permission\n <envoy_api_msg_config.rbac.v2.Permission>` and :ref:`Principal\n <envoy_api_msg_config.rbac.v2.Principal>`.\n\n[#next-major-version: MetadataMatcher should use StructMatcher]", "id": "envoy.type.matcher.MetadataMatcher"}, "envoy.type.matcher.PathMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"path": {"$ref": "#/definitions/envoy.type.matcher.StringMatcher", "additionalProperties": true, "description": "The `path` must match the URL path portion of the :path header. The query and fragment\n string (if present) are removed in the URL path portion.\n For example, the path */data* will match the *:path* header */data#fragment?param=value*."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Path matcher]\n\nSpecifies the way to match a path on HTTP request.", "id": "envoy.type.matcher.PathMatcher"}, "envoy.type.matcher.RegexMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"google_re2": {"properties": {"max_program_size": {"additionalProperties": true, "type": "integer", "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."}}, "additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.", "id": "envoy.type.matcher.RegexMatcher"}, "envoy.type.matcher.StringMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "regex": {"type": "string", "description": "The input string must match the regular expression specified here.\n The regex grammar is defined `here\n <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex` as it is not safe for use with\n   untrusted input in all cases."}, "safe_regex": {"$ref": "#/definitions/envoy.type.matcher.RegexMatcher", "additionalProperties": true, "description": "The input string must match the regular expression specified here."}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 7]", "id": "envoy.type.matcher.StringMatcher"}, "envoy.type.matcher.ValueMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"null_match": {"additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a NullValue."}, "double_match": {"properties": {"range": {"properties": {"start": {"type": "number", "description": "start of the range (inclusive)"}, "end": {"type": "number", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, the input double value must be in the range specified here.\n Note: The range is using half-open interval semantics [start, end)."}, "exact": {"type": "number", "description": "If specified, the input double value must be equal to the value specified here."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a double value and is\n matched to this field."}, "string_match": {"$ref": "#/definitions/envoy.type.matcher.StringMatcher", "additionalProperties": true, "description": "If specified, a match occurs if and only if the target value is a string value and is\n matched to this field."}, "bool_match": {"type": "boolean", "description": "If specified, a match occurs if and only if the target value is a bool value and is equal\n to this field."}, "present_match": {"type": "boolean", "description": "If specified, value match will be performed based on whether the path is referring to a\n valid primitive value in the metadata. If the path is referring to a non-primitive value,\n the result is always not matched."}, "list_match": {"properties": {"one_of": {"$ref": "#/definitions/envoy.type.matcher.ValueMatcher", "additionalProperties": true, "description": "If specified, at least one of the values in the list must match the value specified."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a list value and\n is matched to this field."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Value matcher]\n\nSpecifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.\n StructValue is not supported and is always not matched.\n [#next-free-field: 7]", "id": "envoy.type.matcher.ValueMatcher"}, "google.api.expr.v1alpha1.Expr": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"id": {"type": "string", "description": "Required. An id assigned to this node by the parser which is unique in a\n given expression tree. This is used to associate type information and other\n attributes to a node in the parse tree."}, "const_expr": {"properties": {"null_value": {"enum": ["NULL_VALUE", 0], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "null value."}, "bool_value": {"type": "boolean", "description": "boolean value."}, "int64_value": {"type": "string", "description": "int64 value."}, "uint64_value": {"type": "string", "description": "uint64 value."}, "double_value": {"type": "number", "description": "double value."}, "string_value": {"type": "string", "description": "string value."}, "bytes_value": {"type": "string", "description": "bytes value."}, "duration_value": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "protobuf.Duration value.\n\n Deprecated: duration is no longer considered a builtin cel type."}, "timestamp_value": {"type": "string", "description": "protobuf.Timestamp value.\n\n Deprecated: timestamp is no longer considered a builtin cel type.", "format": "date-time"}}, "additionalProperties": true, "type": "object", "description": "A literal expression."}, "ident_expr": {"properties": {"name": {"type": "string", "description": "Required. Holds a single, unqualified identifier, possibly preceded by a\n '.'.\n\n Qualified names are represented by the [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression."}}, "additionalProperties": true, "type": "object", "description": "An identifier expression."}, "select_expr": {"properties": {"operand": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "Required. The target of the selection expression.\n\n For example, in the select expression `request.auth`, the `request`\n portion of the expression is the `operand`."}, "field": {"type": "string", "description": "Required. The name of the field to select.\n\n For example, in the select expression `request.auth`, the `auth` portion\n of the expression would be the `field`."}, "test_only": {"type": "boolean", "description": "Whether the select is to be interpreted as a field presence test.\n\n This results from the macro `has(request.auth)`."}}, "additionalProperties": true, "type": "object", "description": "A field selection expression, e.g. `request.auth`."}, "call_expr": {"properties": {"target": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "The target of an method call-style expression. For example, `x` in\n `x.f()`."}, "function": {"type": "string", "description": "Required. The name of the function or method being called."}, "args": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/google.api.expr.v1alpha1.Expr"}, "type": "array", "description": "The arguments."}}, "additionalProperties": true, "type": "object", "description": "A call expression, including calls to predefined functions and operators."}, "list_expr": {"properties": {"elements": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/google.api.expr.v1alpha1.Expr"}, "type": "array", "description": "The elements part of the list."}}, "additionalProperties": true, "type": "object", "description": "A list creation expression."}, "struct_expr": {"properties": {"message_name": {"type": "string", "description": "The type name of the message to be created, empty when creating map\n literals."}, "entries": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"id": {"type": "string", "description": "Required. An id assigned to this node by the parser which is unique\n in a given expression tree. This is used to associate type\n information and other attributes to the node."}, "field_key": {"type": "string", "description": "The field key for a message creator statement."}, "map_key": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "The key expression for a map creation statement."}, "value": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "Required. The value assigned to the key."}}, "additionalProperties": true, "type": "object", "description": "Represents an entry."}, "type": "array", "description": "The entries in the creation expression."}}, "additionalProperties": true, "type": "object", "description": "A map or message creation expression."}, "comprehension_expr": {"properties": {"iter_var": {"type": "string", "description": "The name of the iteration variable."}, "iter_range": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "The range over which var iterates."}, "accu_var": {"type": "string", "description": "The name of the variable used for accumulation of the result."}, "accu_init": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "The initial value of the accumulator."}, "loop_condition": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "An expression which can contain iter_var and accu_var.\n\n Returns false when the result has been computed and may be used as\n a hint to short-circuit the remainder of the comprehension."}, "loop_step": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "An expression which can contain iter_var and accu_var.\n\n Computes the next value of accu_var."}, "result": {"$ref": "#/definitions/google.api.expr.v1alpha1.Expr", "additionalProperties": true, "description": "An expression which can contain accu_var.\n\n Computes the result."}}, "additionalProperties": true, "type": "object", "description": "A comprehension expression."}}, "additionalProperties": true, "type": "object", "description": "An abstract representation of a common expression.\n\n Expressions are abstractly represented as a collection of identifiers,\n select statements, function calls, literals, and comprehensions. All\n operators with the exception of the '.' operator are modelled as function\n calls. This makes it easy to represent new operators into the existing AST.\n\n All references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at\n type-check for an expression to be valid. A reference may either be a bare\n identifier `name` or a qualified identifier `google.api.name`. References\n may either refer to a value or a function declaration.\n\n For example, the expression `google.api.name.startsWith('expr')` references\n the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and\n the function declaration `startsWith`.", "id": "google.api.expr.v1alpha1.Expr"}}}