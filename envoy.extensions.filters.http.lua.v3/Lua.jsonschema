{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "inline_code": {
            "type": "string",
            "description": "The Lua code that Envoy will execute. This can be a very small script that\n further loads code from disk if desired. Note that if JSON configuration is used, the code must\n be properly escaped. YAML configuration may be easier to read since YAML supports multi-line\n strings so complex scripts can be easily expressed inline in the configuration."
        },
        "source_codes": {
            "additionalProperties": {
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "Local filesystem data source."
                    },
                    "inline_bytes": {
                        "type": "string",
                        "description": "Bytes inlined in the configuration."
                    },
                    "inline_string": {
                        "type": "string",
                        "description": "String inlined in the configuration."
                    }
                },
                "additionalProperties": true,
                "type": "object"
            },
            "type": "object",
            "description": "Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute\n \u003cenvoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute\u003e`. The Lua source codes can be\n loaded from inline string or local files.\n\n Example:\n\n .. code-block:: yaml\n\n   source_codes:\n     hello.lua:\n       inline_string: |\n         function envoy_on_response(response_handle)\n           -- Do something.\n         end\n     world.lua:\n       filename: /etc/lua/world.lua"
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: Lua]\n Lua :ref:`configuration overview \u003cconfig_http_filters_lua\u003e`.\n [#extension: envoy.filters.http.lua]"
}