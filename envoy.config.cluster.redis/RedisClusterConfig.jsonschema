{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"cluster_refresh_rate": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Interval between successive topology refresh requests. If not set, this defaults to 5s."}, "cluster_refresh_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Timeout for topology refresh request. If not set, this defaults to 3s."}, "redirect_refresh_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The minimum interval that must pass after triggering a topology refresh request before a new\n request can possibly be triggered again. Any errors received during one of these\n time intervals are ignored. If not set, this defaults to 5s."}, "redirect_refresh_threshold": {"additionalProperties": true, "type": "integer", "description": "The number of redirection errors that must be received before\n triggering a topology refresh request. If not set, this defaults to 5.\n If this is set to 0, topology refresh after redirect is disabled."}, "failure_refresh_threshold": {"type": "integer", "description": "The number of failures that must be received before triggering a topology refresh request.\n If not set, this defaults to 0, which disables the topology refresh due to failure."}, "host_degraded_refresh_threshold": {"type": "integer", "description": "The number of hosts became degraded or unhealthy before triggering a topology refresh request.\n If not set, this defaults to 0, which disables the topology refresh due to degraded or\n unhealthy host."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Redis Cluster Configuration]\n This cluster adds support for `Redis Cluster <https://redis.io/topics/cluster-spec>`_, as part\n of :ref:`Envoy's support for Redis Cluster <arch_overview_redis>`.\n\n Redis Cluster is an extension of Redis which supports sharding and high availability (where a\n shard that loses its primary fails over to a replica, and designates it as the new primary).\n However, as there is no unified frontend or proxy service in front of Redis Cluster, the client\n (in this case Envoy) must locally maintain the state of the Redis Cluster, specifically the\n topology. A random node in the cluster is queried for the topology using the `CLUSTER SLOTS\n command <https://redis.io/commands/cluster-slots>`_. This result is then stored locally, and\n updated at user-configured intervals.\n\n Additionally, if\n :ref:`enable_redirection<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.enable_redirection>`\n is true, then moved and ask redirection errors from upstream servers will trigger a topology\n refresh when they exceed a user-configured error threshold.\n\n Example:\n\n .. code-block:: yaml\n\n     name: name\n     connect_timeout: 0.25s\n     dns_lookup_family: V4_ONLY\n     hosts:\n     - socket_address:\n       address: foo.bar.com\n       port_value: 22120\n     cluster_type:\n     name: envoy.clusters.redis\n     typed_config:\n       \"@type\": type.googleapis.com/google.protobuf.Struct\n       value:\n         cluster_refresh_rate: 30s\n         cluster_refresh_timeout: 0.5s\n         redirect_refresh_interval: 10s\n         redirect_refresh_threshold: 10\n [#extension: envoy.clusters.redis]\n\n[#next-free-field: 7]"}