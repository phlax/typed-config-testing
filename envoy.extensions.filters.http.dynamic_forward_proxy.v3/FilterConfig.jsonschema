{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"dns_cache_config": {"properties": {"name": {"type": "string", "description": "The name of the cache. Multiple named caches allow independent dynamic forward proxy\n configurations to operate within a single Envoy process using different configurations. All\n configurations with the same name *must* otherwise have the same settings when referenced\n from different configuration components. Configuration will fail to load if this is not\n the case."}, "dns_lookup_family": {"enum": ["AUTO", 0, "V4_ONLY", 1, "V6_ONLY", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The DNS lookup family to use during resolution.\n\n [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 \"happy eyeballs\" mode. The\n way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and\n then configures a host to have a primary and fall back address. With this, we could very\n likely build a \"happy eyeballs\" connection pool which would race the primary / fall back\n address and return the one that wins. This same method could potentially also be used for\n QUIC to TCP fall back.]"}, "dns_refresh_rate": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.\n\n .. note:\n\n  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be\n  added in a future change.\n\n .. note:\n\n The refresh rate is rounded to the closest millisecond, and must be at least 1ms."}, "host_ttl": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The TTL for hosts that are unused. Hosts that have not been used in the configured time\n interval will be purged. If not specified defaults to 5m.\n\n .. note:\n\n   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This\n   means that if the configured TTL is shorter than the refresh rate the host may not be removed\n   immediately.\n\n  .. note:\n\n   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage."}, "max_hosts": {"additionalProperties": true, "type": "integer", "description": "The maximum number of hosts that the cache will hold. If not specified defaults to 1024.\n\n .. note:\n\n   The implementation is approximate and enforced independently on each worker thread, thus\n   it is possible for the maximum hosts in the cache to go slightly above the configured\n   value depending on timing. This is similar to how other circuit breakers work."}, "dns_failure_refresh_rate": {"properties": {"base_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the base interval between refreshes. This parameter is required and must be greater\n than zero and less than\n :ref:`max_interval <envoy_api_field_config.cluster.v3.Cluster.RefreshRate.max_interval>`."}, "max_interval": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "Specifies the maximum interval between refreshes. This parameter is optional, but must be\n greater than or equal to the\n :ref:`base_interval <envoy_api_field_config.cluster.v3.Cluster.RefreshRate.base_interval>`  if set. The default\n is 10 times the :ref:`base_interval <envoy_api_field_config.cluster.v3.Cluster.RefreshRate.base_interval>`."}}, "additionalProperties": true, "type": "object", "description": "If the DNS failure refresh rate is specified,\n this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is\n not specified, the failure refresh rate defaults to the dns_refresh_rate."}, "dns_cache_circuit_breaker": {"properties": {"max_pending_requests": {"additionalProperties": true, "type": "integer", "description": "The maximum number of pending requests that Envoy will allow to the\n resolver. If not specified, the default is 1024."}}, "additionalProperties": true, "type": "object", "description": "The config of circuit breakers for resolver. It provides a configurable threshold.\n If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,\n envoy will use dns cache circuit breakers with default settings even if this value is not set."}, "use_tcp_for_dns_lookups": {"type": "boolean", "description": "[#next-major-version: Reconcile DNS options in a single message.]\n Always use TCP queries instead of UDP queries for DNS lookups.\n Setting this value causes failure if the\n ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during\n server startup. Apple' API only uses UDP for DNS resolution."}}, "additionalProperties": true, "type": "object", "description": "The DNS cache configuration that the filter will attach to. Note this configuration must\n match that of associated :ref:`dynamic forward proxy cluster configuration\n <envoy_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Dynamic forward proxy]\n\nConfiguration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview\n <arch_overview_http_dynamic_forward_proxy>` for more information.\n [#extension: envoy.filters.http.dynamic_forward_proxy]"}