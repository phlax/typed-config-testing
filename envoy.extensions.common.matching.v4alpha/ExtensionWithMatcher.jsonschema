{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "matcher": {
            "$ref": "envoy.config.common.matcher.v4alpha.Matcher",
            "additionalProperties": true,
            "description": "The associated matcher."
        },
        "extension_config": {
            "$ref": "envoy.config.core.v4alpha.TypedExtensionConfig",
            "additionalProperties": true,
            "description": "The underlying extension config."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: Extension Matcher]\n\nWrapper around an existing extension that provides an associated matcher. This allows\n decorating an existing extension with a matcher, which can be used to match against\n relevant protocol data.",
    "definitions": {
        "envoy.config.common.matcher.v4alpha.Matcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "matcher_list": {
                    "properties": {
                        "matchers": {
                            "items": {
                                "$schema": "http://json-schema.org/draft-04/schema#",
                                "properties": {
                                    "predicate": {
                                        "$ref": "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate",
                                        "additionalProperties": true,
                                        "description": "Determines if the match succeeds."
                                    },
                                    "on_match": {
                                        "$ref": "envoy.config.common.matcher.v4alpha.Matcher.OnMatch",
                                        "additionalProperties": true,
                                        "description": "What to do if the match succeeds."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "An individual matcher."
                            },
                            "type": "array",
                            "description": "A list of matchers. First match wins."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "A linear list of matchers to evaluate."
                },
                "matcher_tree": {
                    "properties": {
                        "input": {
                            "$ref": "envoy.config.core.v4alpha.TypedExtensionConfig",
                            "additionalProperties": true,
                            "description": "Protocol-specific specification of input field to match on."
                        },
                        "exact_match_map": {
                            "$ref": "envoy.config.common.matcher.v4alpha.Matcher.MatcherTree.MatchMap",
                            "additionalProperties": true
                        },
                        "prefix_match_map": {
                            "$ref": "envoy.config.common.matcher.v4alpha.Matcher.MatcherTree.MatchMap",
                            "additionalProperties": true,
                            "description": "Longest matching prefix wins."
                        },
                        "custom_match": {
                            "$ref": "envoy.config.core.v4alpha.TypedExtensionConfig",
                            "additionalProperties": true,
                            "description": "Extension for custom matching logic."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "A match tree to evaluate."
                },
                "on_no_match": {
                    "$ref": "envoy.config.common.matcher.v4alpha.Matcher.OnMatch",
                    "additionalProperties": true,
                    "description": "Optional OnMatch to use if the matcher failed.\n If specified, the OnMatch is used, and the matcher is considered\n to have matched.\n If not specified, the matcher is considered not to have matched."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Unified Matcher API]\n\nA matcher, which may traverse a matching tree in order to result in a match action.\n During matching, the tree will be traversed until a match is found, or if no match\n is found the action specified by the most specific on_no_match will be evaluated.\n As an on_no_match might result in another matching tree being evaluated, this process\n might repeat several times until the final OnMatch (or no match) is decided.\n\n This API is a work in progress.",
            "id": "envoy.config.common.matcher.v4alpha.Matcher"
        },
        "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "single_predicate": {
                    "properties": {
                        "input": {
                            "$ref": "envoy.config.core.v4alpha.TypedExtensionConfig",
                            "additionalProperties": true,
                            "description": "Protocol-specific specification of input field to match on."
                        },
                        "value_match": {
                            "properties": {
                                "exact": {
                                    "type": "string",
                                    "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                                },
                                "prefix": {
                                    "type": "string",
                                    "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                                },
                                "suffix": {
                                    "type": "string",
                                    "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                                },
                                "safe_regex": {
                                    "properties": {
                                        "google_re2": {
                                            "additionalProperties": true,
                                            "type": "object",
                                            "description": "Google's RE2 regex engine."
                                        },
                                        "regex": {
                                            "type": "string",
                                            "description": "The regex match string. The string must be supported by the configured engine."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "The input string must match the regular expression specified here."
                                },
                                "contains": {
                                    "type": "string",
                                    "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"
                                },
                                "ignore_case": {
                                    "type": "boolean",
                                    "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Built-in string matcher."
                        },
                        "custom_match": {
                            "$ref": "envoy.config.core.v4alpha.TypedExtensionConfig",
                            "additionalProperties": true,
                            "description": "Extension for custom matching logic."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "A single predicate to evaluate."
                },
                "or_matcher": {
                    "$ref": "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate.PredicateList",
                    "additionalProperties": true,
                    "description": "A list of predicates to be OR-ed together."
                },
                "and_matcher": {
                    "$ref": "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate.PredicateList",
                    "additionalProperties": true,
                    "description": "A list of predicates to be AND-ed together."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Predicate to determine if a match is successful.",
            "id": "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate"
        },
        "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate.PredicateList": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "predicate": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "A list of two or more matchers. Used to allow using a list within a oneof.",
            "id": "envoy.config.common.matcher.v4alpha.Matcher.MatcherList.Predicate.PredicateList"
        },
        "envoy.config.common.matcher.v4alpha.Matcher.MatcherTree.MatchMap": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "map": {
                    "additionalProperties": {
                        "$ref": "envoy.config.common.matcher.v4alpha.Matcher.OnMatch",
                        "additionalProperties": true
                    },
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "A map of configured matchers. Used to allow using a map within a oneof.",
            "id": "envoy.config.common.matcher.v4alpha.Matcher.MatcherTree.MatchMap"
        },
        "envoy.config.common.matcher.v4alpha.Matcher.OnMatch": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "matcher": {
                    "$ref": "envoy.config.common.matcher.v4alpha.Matcher",
                    "additionalProperties": true,
                    "description": "Nested matcher to evaluate.\n If the nested matcher does not match and does not specify\n on_no_match, then this matcher is considered not to have\n matched, even if a predicate at this level or above returned\n true."
                },
                "action": {
                    "$ref": "envoy.config.core.v4alpha.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "Protocol-specific action to take."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "What to do if a match is successful.",
            "id": "envoy.config.common.matcher.v4alpha.Matcher.OnMatch"
        },
        "envoy.config.core.v4alpha.TypedExtensionConfig": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of an extension. This is not used to select the extension, instead\n it serves the role of an opaque identifier."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The typed config for the extension. The type URL will be used to identify\n the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,\n the inner type URL of *TypedStruct* will be utilized. See the\n :ref:`extension configuration overview\n \u003cconfig_overview_extension_configuration\u003e` for further details."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Extension configuration]\n\nMessage type for extension configuration.\n [#next-major-version: revisit all existing typed_config that doesn't use this wrapper.].",
            "id": "envoy.config.core.v4alpha.TypedExtensionConfig"
        }
    }
}