{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "tag_name": {
            "type": "string",
            "description": "Attaches an identifier to the tag values to identify the tag being in the\n sink. Envoy has a set of default names and regexes to extract dynamic\n portions of existing stats, which can be found in :repo:`well_known_names.h\n \u003csource/common/config/well_known_names.h\u003e` in the Envoy repository. If a :ref:`tag_name\n \u003cenvoy_api_field_config.metrics.v3.TagSpecifier.tag_name\u003e` is provided in the config and\n neither :ref:`regex \u003cenvoy_api_field_config.metrics.v3.TagSpecifier.regex\u003e` or\n :ref:`fixed_value \u003cenvoy_api_field_config.metrics.v3.TagSpecifier.fixed_value\u003e` were specified,\n Envoy will attempt to find that name in its set of defaults and use the accompanying regex.\n\n .. note::\n\n   It is invalid to specify the same tag name twice in a config."
        },
        "regex": {
            "type": "string",
            "description": "Designates a tag to strip from the tag extracted name and provide as a named\n tag value for all statistics. This will only occur if any part of the name\n matches the regex provided with one or more capture groups.\n\n The first capture group identifies the portion of the name to remove. The\n second capture group (which will normally be nested inside the first) will\n designate the value of the tag for the statistic. If no second capture\n group is provided, the first will also be used to set the value of the tag.\n All other capture groups will be ignored.\n\n Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and\n one tag specifier:\n\n .. code-block:: json\n\n   {\n     \"tag_name\": \"envoy.cluster_name\",\n     \"regex\": \"^cluster\\\\.((.+?)\\\\.)\"\n   }\n\n Note that the regex will remove ``foo_cluster.`` making the tag extracted\n name ``cluster.upstream_rq_timeout`` and the tag value for\n ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no\n ``.`` character because of the second capture group).\n\n Example 2. a stat name\n ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two\n tag specifiers:\n\n .. code-block:: json\n\n   [\n     {\n       \"tag_name\": \"envoy.http_user_agent\",\n       \"regex\": \"^http(?=\\\\.).*?\\\\.user_agent\\\\.((.+?)\\\\.)\\\\w+?$\"\n     },\n     {\n       \"tag_name\": \"envoy.http_conn_manager_prefix\",\n       \"regex\": \"^http\\\\.((.*?)\\\\.)\"\n     }\n   ]\n\n The two regexes of the specifiers will be processed in the definition order.\n\n The first regex will remove ``ios.``, leaving the tag extracted name\n ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag\n ``envoy.http_user_agent`` will be added with tag value ``ios``.\n\n The second regex will remove ``connection_manager_1.`` from the tag\n extracted name produced by the first regex\n ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving\n ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag\n ``envoy.http_conn_manager_prefix`` will be added with the tag value\n ``connection_manager_1``."
        },
        "fixed_value": {
            "type": "string",
            "description": "Specifies a fixed tag value for the ``tag_name``."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Designates a tag name and value pair. The value may be either a fixed value\n or a regex providing the value via capture groups. The specified tag will be\n unconditionally set if a fixed value, otherwise it will only be set if one\n or more capture groups in the regex match."
}