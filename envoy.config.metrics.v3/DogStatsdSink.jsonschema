{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "address": {
            "properties": {
                "socket_address": {
                    "properties": {
                        "protocol": {
                            "enum": [
                                "TCP",
                                0,
                                "UDP",
                                1
                            ],
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "address": {
                            "type": "string",
                            "description": "The address for this socket. :ref:`Listeners \u003cconfig_listeners\u003e` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch \u003cenvoy_api_msg_config.listener.v3.FilterChainMatch\u003e`.] When used\n within an upstream :ref:`BindConfig \u003cenvoy_api_msg_config.core.v3.BindConfig\u003e`, the address\n controls the source address of outbound connections. For :ref:`clusters\n \u003cenvoy_api_msg_config.cluster.v3.Cluster\u003e`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name \u003cenvoy_api_field_config.core.v3.SocketAddress.resolver_name\u003e`."
                        },
                        "port_value": {
                            "type": "integer"
                        },
                        "named_port": {
                            "type": "string",
                            "description": "This is only valid if :ref:`resolver_name\n \u003cenvoy_api_field_config.core.v3.SocketAddress.resolver_name\u003e` is specified below and the\n named resolver is capable of named port resolution."
                        },
                        "resolver_name": {
                            "type": "string",
                            "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."
                        },
                        "ipv4_compat": {
                            "type": "boolean",
                            "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n \u003chttps://tools.ietf.org/html/rfc3493#page-11\u003e`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:\u003cIPv4-address\u003e``."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                },
                "pipe": {
                    "properties": {
                        "path": {
                            "type": "string",
                            "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."
                        },
                        "mode": {
                            "type": "integer",
                            "description": "The mode for the Pipe. Not applicable for abstract sockets."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                },
                "envoy_internal_address": {
                    "properties": {
                        "server_listener_name": {
                            "type": "string",
                            "description": "[#not-implemented-hide:] The :ref:`listener name \u003cenvoy_api_field_config.listener.v3.Listener.name\u003e` of the destination internal listener."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "[#not-implemented-hide:]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "The UDP address of a running DogStatsD compliant listener. If specified,\n statistics will be flushed to this address."
        },
        "prefix": {
            "type": "string",
            "description": "Optional custom metric name prefix. See :ref:`StatsdSink's prefix field\n \u003cenvoy_api_field_config.metrics.v3.StatsdSink.prefix\u003e` for more details."
        },
        "max_bytes_per_datagram": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Optional max datagram size to use when sending UDP messages. By default Envoy\n will emit one metric per datagram. By specifying a max-size larger than a single\n metric, Envoy will emit multiple, new-line separated metrics. The max datagram\n size should not exceed your network's MTU.\n\n Note that this value may not be respected if smaller than a single metric."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Stats configuration proto schema for built-in *envoy.stat_sinks.dog_statsd* sink.\n The sink emits stats with `DogStatsD \u003chttps://docs.datadoghq.com/guides/dogstatsd/\u003e`_\n compatible tags. Tags are configurable via :ref:`StatsConfig\n \u003cenvoy_api_msg_config.metrics.v3.StatsConfig\u003e`.\n [#extension: envoy.stat_sinks.dog_statsd]"
}