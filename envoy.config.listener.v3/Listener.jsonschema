{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The unique name by which this listener is known. If no name is provided,\n Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically\n updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided."}, "address": {"properties": {"socket_address": {"properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_config.listener.v3.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_config.core.v3.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_config.cluster.v3.Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_config.core.v3.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object"}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}, "envoy_internal_address": {"properties": {"server_listener_name": {"type": "string", "description": "[#not-implemented-hide:] The :ref:`listener name <envoy_api_field_config.listener.v3.Listener.name>` of the destination internal listener."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}}, "additionalProperties": true, "type": "object", "description": "The address that the listener should listen on. In general, the address must be unique, though\n that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on\n Linux as the actual port will be allocated by the OS."}, "filter_chains": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.listener.v3.FilterChain"}, "type": "array", "description": "A list of filter chains to consider for this listener. The\n :ref:`FilterChain <envoy_api_msg_config.listener.v3.FilterChain>` with the most specific\n :ref:`FilterChainMatch <envoy_api_msg_config.listener.v3.FilterChainMatch>` criteria is used on a\n connection.\n\n Example using SNI for filter chain selection can be found in the\n :ref:`FAQ entry <faq_how_to_setup_sni>`."}, "use_original_dst": {"additionalProperties": true, "type": "boolean", "description": "If a connection is redirected using *iptables*, the port on which the proxy\n receives it might be different from the original destination address. When this flag is set to\n true, the listener hands off redirected connections to the listener associated with the\n original destination address. If there is no listener associated with the original destination\n address, the connection is handled by the listener that receives it. Defaults to false."}, "default_filter_chain": {"$ref": "#/definitions/envoy.config.listener.v3.FilterChain", "additionalProperties": true, "description": "The default filter chain if none of the filter chain matches. If no default filter chain is supplied,\n the connection will be closed. The filter chain match is ignored in this field."}, "per_connection_buffer_limit_bytes": {"additionalProperties": true, "type": "integer", "description": "Soft limit on size of the listener\u2019s new connection read and write buffers.\n If unspecified, an implementation defined default is applied (1MiB)."}, "metadata": {"$ref": "#/definitions/envoy.config.core.v3.Metadata", "additionalProperties": true, "description": "Listener metadata."}, "deprecated_v1": {"properties": {"bind_to_port": {"additionalProperties": true, "type": "boolean", "description": "Whether the listener should bind to the port. A listener that doesn't\n bind can only receive connections redirected from other listeners that\n set use_original_dst parameter to true. Default is true.\n\n This is deprecated. Use :ref:`Listener.bind_to_port\n <envoy_api_field_config.listener.v3.Listener.bind_to_port>`"}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}, "drain_type": {"enum": ["DEFAULT", 0, "MODIFY_ONLY", 1], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The type of draining to perform at a listener-wide level."}, "listener_filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the filter to instantiate. The name must match a\n :ref:`supported filter <config_listener_filters>`."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}, "filter_disabled": {"$ref": "#/definitions/envoy.config.listener.v3.ListenerFilterChainMatchPredicate", "additionalProperties": true, "description": "Optional match predicate used to disable the filter. The filter is enabled when this field is empty.\n See :ref:`ListenerFilterChainMatchPredicate <envoy_api_msg_config.listener.v3.ListenerFilterChainMatchPredicate>`\n for further examples."}}, "additionalProperties": true, "type": "object"}, "type": "array", "description": "Listener filters have the opportunity to manipulate and augment the connection metadata that\n is used in connection filter chain matching, for example. These filters are run before any in\n :ref:`filter_chains <envoy_api_field_config.listener.v3.Listener.filter_chains>`. Order matters as the\n filters are processed sequentially right after a socket has been accepted by the listener, and\n before a connection is created.\n UDP Listener filters can be specified when the protocol in the listener socket address in\n :ref:`protocol <envoy_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP\n <envoy_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>`.\n UDP listeners currently support a single filter."}, "listener_filters_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The timeout to wait for all listener filters to complete operation. If the timeout is reached,\n the accepted socket is closed without a connection being created unless\n `continue_on_listener_filters_timeout` is set to true. Specify 0 to disable the\n timeout. If not specified, a default timeout of 15s is used."}, "continue_on_listener_filters_timeout": {"type": "boolean", "description": "Whether a connection should be created when listener filters timeout. Default is false.\n\n .. attention::\n\n   Some listener filters, such as :ref:`Proxy Protocol filter\n   <config_listener_filters_proxy_protocol>`, should not be used with this option. It will cause\n   unexpected behavior when a connection is created."}, "transparent": {"additionalProperties": true, "type": "boolean", "description": "Whether the listener should be set as a transparent socket.\n When this flag is set to true, connections can be redirected to the listener using an\n *iptables* *TPROXY* target, in which case the original source and destination addresses and\n ports are preserved on accepted connections. This flag should be used in combination with\n :ref:`an original_dst <config_listener_filters_original_dst>` :ref:`listener filter\n <envoy_api_field_config.listener.v3.Listener.listener_filters>` to mark the connections' local addresses as\n \"restored.\" This can be used to hand off each redirected connection to another listener\n associated with the connection's destination address. Direct connections to the socket without\n using *TPROXY* cannot be distinguished from connections redirected using *TPROXY* and are\n therefore treated as if they were redirected.\n When this flag is set to false, the listener's socket is explicitly reset as non-transparent.\n Setting this flag requires Envoy to run with the *CAP_NET_ADMIN* capability.\n When this flag is not set (default), the socket is not modified, i.e. the transparent option\n is neither set nor reset."}, "freebind": {"additionalProperties": true, "type": "boolean", "description": "Whether the listener should set the *IP_FREEBIND* socket option. When this\n flag is set to true, listeners can be bound to an IP address that is not\n configured on the system running Envoy. When this flag is set to false, the\n option *IP_FREEBIND* is disabled on the socket. When this flag is not set\n (default), the socket is not modified, i.e. the option is neither enabled\n nor disabled."}, "socket_options": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"description": {"type": "string", "description": "An optional name to give this socket option for debugging, etc.\n Uniqueness is not required and no special meaning is assumed."}, "level": {"type": "string", "description": "Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP"}, "name": {"type": "string", "description": "The numeric name as passed to setsockopt"}, "int_value": {"type": "string", "description": "Because many sockopts take an int value."}, "buf_value": {"type": "string", "description": "Otherwise it's a byte buffer."}, "state": {"enum": ["STATE_PREBIND", 0, "STATE_BOUND", 1, "STATE_LISTENING", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "The state in which the option will be applied. When used in BindConfig\n STATE_PREBIND is currently the only valid value."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Socket Option ]\n\nGeneric socket option message. This would be used to set socket options that\n might not exist in upstream kernels or precompiled Envoy binaries.\n [#next-free-field: 7]"}, "type": "array", "description": "Additional socket options that may not be present in Envoy source code or\n precompiled binaries."}, "tcp_fast_open_queue_length": {"additionalProperties": true, "type": "integer", "description": "Whether the listener should accept TCP Fast Open (TFO) connections.\n When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on\n the socket, with a queue length of the specified size\n (see `details in RFC7413 <https://tools.ietf.org/html/rfc7413#section-5.1>`_).\n When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.\n When this flag is not set (default), the socket is not modified,\n i.e. the option is neither enabled nor disabled.\n\n On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable\n TCP_FASTOPEN.\n See `ip-sysctl.txt <https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt>`_.\n\n On macOS, only values of 0, 1, and unset are valid; other values may result in an error.\n To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter."}, "traffic_direction": {"enum": ["UNSPECIFIED", 0, "INBOUND", 1, "OUTBOUND", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the intended direction of the traffic relative to the local Envoy."}, "udp_listener_config": {"properties": {"udp_listener_name": {"type": "string", "description": "Used to look up UDP listener factory, matches \"raw_udp_listener\" or\n \"quic_listener\" to create a specific udp listener.\n If not specified, treat as \"raw_udp_listener\"."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "If the protocol in the listener socket address in :ref:`protocol\n <envoy_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP\n <envoy_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>`, this field specifies the actual udp\n listener to create, i.e. :ref:`udp_listener_name\n <envoy_api_field_config.listener.v3.UdpListenerConfig.udp_listener_name>` = \"raw_udp_listener\" for\n creating a packet-oriented UDP listener. If not present, treat it as \"raw_udp_listener\"."}, "api_listener": {"properties": {"api_listener": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The type in this field determines the type of API listener. At present, the following\n types are supported:\n envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager (HTTP)\n [#next-major-version: In the v3 API, replace this Any field with a oneof containing the\n specific config message for each type of API listener. We could not do this in v2 because\n it would have caused circular dependencies for go protos: lds.proto depends on this file,\n and http_connection_manager.proto depends on rds.proto, which is in the same directory as\n lds.proto, so lds.proto cannot depend on this file.]"}}, "additionalProperties": true, "type": "object", "description": "Used to represent an API listener, which is used in non-proxy clients. The type of API\n exposed to the non-proxy application depends on the type of API listener.\n When this field is set, no other field except for :ref:`name<envoy_api_field_config.listener.v3.Listener.name>`\n should be set.\n\n .. note::\n\n  Currently only one ApiListener can be installed; and it can only be done via bootstrap config,\n  not LDS.\n\n [#next-major-version: In the v3 API, instead of this messy approach where the socket\n listener fields are directly in the top-level Listener message and the API listener types\n are in the ApiListener message, the socket listener messages should be in their own message,\n and the top-level Listener should essentially be a oneof that selects between the\n socket listener and the various types of API listener. That way, a given Listener message\n can structurally only contain the fields of the relevant type.]"}, "connection_balance_config": {"properties": {"exact_balance": {"additionalProperties": true, "type": "object", "description": "If specified, the listener will use the exact connection balancer."}}, "additionalProperties": true, "type": "object", "description": "The listener's connection balancer configuration, currently only applicable to TCP listeners.\n If no configuration is specified, Envoy will not attempt to balance active connections between\n worker threads."}, "reuse_port": {"type": "boolean", "description": "When this flag is set to true, listeners set the *SO_REUSEPORT* socket option and\n create one socket for each worker thread. This makes inbound connections\n distribute among worker threads roughly evenly in cases where there are a high number\n of connections. When this flag is set to false, all worker threads share one socket.\n\n Before Linux v4.19-rc1, new TCP connections may be rejected during hot restart\n (see `3rd paragraph in 'soreuseport' commit message\n <https://github.com/torvalds/linux/commit/c617f398edd4db2b8567a28e89>`_).\n This issue was fixed by `tcp: Avoid TCP syncookie rejected by SO_REUSEPORT socket\n <https://github.com/torvalds/linux/commit/40a1227ea845a37ab197dd1caffb60b047fa36b1>`_."}, "access_log": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the access log implementation to instantiate. The name must\n match a statically registered access log. Current built-in loggers include:\n\n #. \"envoy.access_loggers.file\"\n #. \"envoy.access_loggers.http_grpc\"\n #. \"envoy.access_loggers.tcp_grpc\""}, "filter": {"$ref": "#/definitions/envoy.config.accesslog.v3.AccessLogFilter", "additionalProperties": true, "description": "Filter which is used to determine if the access log needs to be written."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Common access log types]"}, "type": "array", "description": "Configuration for :ref:`access logs <arch_overview_access_logs>`\n emitted by this listener."}, "udp_writer_config": {"properties": {"name": {"type": "string", "description": "The name of an extension. This is not used to select the extension, instead\n it serves the role of an opaque identifier."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The typed config for the extension. The type URL will be used to identify\n the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,\n the inner type URL of *TypedStruct* will be utilized. See the\n :ref:`extension configuration overview\n <config_overview_extension_configuration>` for further details."}}, "additionalProperties": true, "type": "object", "description": "If the protocol in the listener socket address in :ref:`protocol\n <envoy_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP\n <envoy_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>`, this field specifies the actual udp\n writer to create, i.e. :ref:`name <envoy_api_field_config.core.v3.TypedExtensionConfig.name>`\n    = \"udp_default_writer\" for creating a udp writer with writing in passthrough mode,\n    = \"udp_gso_batch_writer\" for creating a udp writer with writing in batch mode.\n If not present, treat it as \"udp_default_writer\".\n [#not-implemented-hide:]"}, "tcp_backlog_size": {"additionalProperties": true, "type": "integer", "description": "The maximum length a tcp listener's pending connections queue can grow to. If no value is\n provided net.core.somaxconn will be used on Linux and 128 otherwise."}, "bind_to_port": {"additionalProperties": true, "type": "boolean", "description": "Whether the listener should bind to the port. A listener that doesn't\n bind can only receive connections redirected from other listeners that set\n :ref:`use_original_dst <envoy_api_field_config.listener.v3.Listener.use_original_dst>`\n to true. Default is true."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 27]", "definitions": {"envoy.config.accesslog.v3.AccessLogFilter": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"status_code_filter": {"properties": {"comparison": {"$ref": "#/definitions/envoy.config.accesslog.v3.ComparisonFilter", "additionalProperties": true, "description": "Comparison."}}, "additionalProperties": true, "type": "object", "description": "Status code filter."}, "duration_filter": {"properties": {"comparison": {"$ref": "#/definitions/envoy.config.accesslog.v3.ComparisonFilter", "additionalProperties": true, "description": "Comparison."}}, "additionalProperties": true, "type": "object", "description": "Duration filter."}, "not_health_check_filter": {"additionalProperties": true, "type": "object", "description": "Not health check filter."}, "traceable_filter": {"additionalProperties": true, "type": "object", "description": "Traceable filter."}, "runtime_filter": {"properties": {"runtime_key": {"type": "string", "description": "Runtime key to get an optional overridden numerator for use in the\n *percent_sampled* field. If found in runtime, this value will replace the\n default numerator."}, "percent_sampled": {"properties": {"numerator": {"type": "integer", "description": "Specifies the numerator. Defaults to 0."}, "denominator": {"enum": ["HUNDRED", 0, "TEN_THOUSAND", 1, "MILLION", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final\n fractional percentage is capped at 1 (100%)."}}, "additionalProperties": true, "type": "object", "description": "The default sampling percentage. If not specified, defaults to 0% with\n denominator of 100."}, "use_independent_randomness": {"type": "boolean", "description": "By default, sampling pivots on the header\n :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being\n present. If :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`\n is present, the filter will consistently sample across multiple hosts based\n on the runtime key value and the value extracted from\n :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is\n missing, or *use_independent_randomness* is set to true, the filter will\n randomly sample based on the runtime key value alone.\n *use_independent_randomness* can be used for logging kill switches within\n complex nested :ref:`AndFilter\n <envoy_api_msg_config.accesslog.v3.AndFilter>` and :ref:`OrFilter\n <envoy_api_msg_config.accesslog.v3.OrFilter>` blocks that are easier to\n reason about from a probability perspective (i.e., setting to true will\n cause the filter to behave like an independent random variable when\n composed within logical operator filters)."}}, "additionalProperties": true, "type": "object", "description": "Runtime filter."}, "and_filter": {"properties": {"filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.accesslog.v3.AccessLogFilter"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "And filter."}, "or_filter": {"properties": {"filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.accesslog.v3.AccessLogFilter"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Or filter."}, "header_filter": {"properties": {"header": {"properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "safe_regex_match": {"$ref": "#/definitions/envoy.type.matcher.v3.RegexMatcher", "additionalProperties": true, "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "contains_match": {"type": "string", "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": "Only requests with a header which matches the specified HeaderMatcher will\n pass the filter check."}}, "additionalProperties": true, "type": "object", "description": "Header filter."}, "response_flag_filter": {"properties": {"flags": {"items": {"type": "string"}, "type": "array", "description": "Only responses with the any of the flags listed in this field will be\n logged. This field is optional. If it is not specified, then any response\n flag will pass the filter check."}}, "additionalProperties": true, "type": "object", "description": "Response flag filter."}, "grpc_status_filter": {"properties": {"statuses": {"items": {"enum": ["OK", 0, "CANCELED", 1, "UNKNOWN", 2, "INVALID_ARGUMENT", 3, "DEADLINE_EXCEEDED", 4, "NOT_FOUND", 5, "ALREADY_EXISTS", 6, "PERMISSION_DENIED", 7, "RESOURCE_EXHAUSTED", 8, "FAILED_PRECONDITION", 9, "ABORTED", 10, "OUT_OF_RANGE", 11, "UNIMPLEMENTED", 12, "INTERNAL", 13, "UNAVAILABLE", 14, "DATA_LOSS", 15, "UNAUTHENTICATED", 16]}, "type": "array", "description": "Logs only responses that have any one of the gRPC statuses in this field."}, "exclude": {"type": "boolean", "description": "If included and set to true, the filter will instead block all responses\n with a gRPC status or inferred gRPC status enumerated in statuses, and\n allow all other responses."}}, "additionalProperties": true, "type": "object", "description": "gRPC status filter."}, "extension_filter": {"properties": {"name": {"type": "string", "description": "The name of the filter implementation to instantiate. The name must\n match a statically registered filter."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Extension filter."}, "metadata_filter": {"properties": {"matcher": {"properties": {"filter": {"type": "string", "description": "The filter name to retrieve the Struct from the Metadata."}, "path": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "If specified, use the key to retrieve the value in a Struct."}}, "additionalProperties": true, "type": "object", "description": "Specifies the segment in a path to retrieve value from Metadata.\n Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that\n if the segment key refers to a list, it has to be the last segment in a path."}, "type": "array", "description": "The path to retrieve the Value from the Struct."}, "value": {"$ref": "#/definitions/envoy.type.matcher.v3.ValueMatcher", "additionalProperties": true, "description": "The MetadataMatcher is matched if the value retrieved by path is matched to this value."}}, "additionalProperties": true, "type": "object", "description": "Matcher to check metadata for specified value. For example, to match on the\n access_log_hint metadata, set the filter to \"envoy.common\" and the path to\n \"access_log_hint\", and the value to \"true\"."}, "match_if_key_not_found": {"additionalProperties": true, "type": "boolean", "description": "Default result if the key does not exist in dynamic metadata: if unset or\n true, then log; if false, then don't log."}}, "additionalProperties": true, "type": "object", "description": "Metadata Filter"}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 13]", "id": "envoy.config.accesslog.v3.AccessLogFilter"}, "envoy.config.accesslog.v3.ComparisonFilter": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"op": {"enum": ["EQ", 0, "GE", 1, "LE", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Comparison operator."}, "value": {"properties": {"default_value": {"type": "integer", "description": "Default value if runtime value is not available."}, "runtime_key": {"type": "string", "description": "Runtime key to get value for comparison. This value is used if defined."}}, "additionalProperties": true, "type": "object", "description": "Value to compare against."}}, "additionalProperties": true, "type": "object", "description": "Filter on an integer comparison.", "id": "envoy.config.accesslog.v3.ComparisonFilter"}, "envoy.config.core.v3.CidrRange": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"address_prefix": {"type": "string", "description": "IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``."}, "prefix_len": {"additionalProperties": true, "type": "integer", "description": "Length of prefix, e.g. 0, 32."}}, "additionalProperties": true, "type": "object", "description": "CidrRange specifies an IP Address and a prefix length to construct\n the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.", "id": "envoy.config.core.v3.CidrRange"}, "envoy.config.core.v3.DataSource": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filename": {"type": "string", "description": "Local filesystem data source."}, "inline_bytes": {"type": "string", "description": "Bytes inlined in the configuration."}, "inline_string": {"type": "string", "description": "String inlined in the configuration."}}, "additionalProperties": true, "type": "object", "description": "Data source consisting of either a file or an inline value.", "id": "envoy.config.core.v3.DataSource"}, "envoy.config.core.v3.Metadata": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter_metadata": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."}}, "additionalProperties": true, "type": "object", "description": "Metadata provides additional inputs to filters based on matched listeners,\n filter chains, routes and endpoints. It is structured as a map, usually from\n filter name (in reverse DNS format) to metadata specific to the filter. Metadata\n key-values for a filter are merged as connection and request handling occurs,\n with later values for the same key overriding earlier values.\n\n An example use of metadata is providing additional values to\n http_connection_manager in the envoy.http_connection_manager.access_log\n namespace.\n\n Another example use of metadata is to per service config info in cluster metadata, which may get\n consumed by multiple filters.\n\n For load balancing, Metadata provides a means to subset cluster endpoints.\n Endpoints have a Metadata object associated and routes contain a Metadata\n object to match against. There are some well defined metadata used today for\n this purpose:\n\n * ``{\"envoy.lb\": {\"canary\": <bool> }}`` This indicates the canary status of an\n   endpoint and is also used during header processing\n   (x-envoy-upstream-canary) and for stats purposes.\n [#next-major-version: move to type/metadata/v2]", "id": "envoy.config.core.v3.Metadata"}, "envoy.config.listener.v3.FilterChain": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter_chain_match": {"properties": {"destination_port": {"additionalProperties": true, "type": "integer", "description": "Optional destination port to consider when use_original_dst is set on the\n listener in determining a filter chain match."}, "prefix_ranges": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.core.v3.CidrRange"}, "type": "array", "description": "If non-empty, an IP address and prefix length to match addresses when the\n listener is bound to 0.0.0.0/:: or when use_original_dst is specified."}, "address_suffix": {"type": "string", "description": "If non-empty, an IP address and suffix length to match addresses when the\n listener is bound to 0.0.0.0/:: or when use_original_dst is specified.\n [#not-implemented-hide:]"}, "suffix_len": {"additionalProperties": true, "type": "integer", "description": "[#not-implemented-hide:]"}, "source_type": {"enum": ["ANY", 0, "SAME_IP_OR_LOOPBACK", 1, "EXTERNAL", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Specifies the connection source IP match type. Can be any, local or external network."}, "source_prefix_ranges": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.core.v3.CidrRange"}, "type": "array", "description": "The criteria is satisfied if the source IP address of the downstream\n connection is contained in at least one of the specified subnets. If the\n parameter is not specified or the list is empty, the source IP address is\n ignored."}, "source_ports": {"items": {"type": "integer"}, "type": "array", "description": "The criteria is satisfied if the source port of the downstream connection\n is contained in at least one of the specified ports. If the parameter is\n not specified, the source port is ignored."}, "server_names": {"items": {"type": "string"}, "type": "array", "description": "If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining\n a filter chain match. Those values will be compared against the server names of a new\n connection, when detected by one of the listener filters.\n\n The server name will be matched against all wildcard domains, i.e. ``www.example.com``\n will be first matched against ``www.example.com``, then ``*.example.com``, then ``*.com``.\n\n Note that partial wildcards are not supported, and values like ``*w.example.com`` are invalid.\n\n .. attention::\n\n   See the :ref:`FAQ entry <faq_how_to_setup_sni>` on how to configure SNI for more\n   information."}, "transport_protocol": {"type": "string", "description": "If non-empty, a transport protocol to consider when determining a filter chain match.\n This value will be compared against the transport protocol of a new connection, when\n it's detected by one of the listener filters.\n\n Suggested values include:\n\n * ``raw_buffer`` - default, used when no transport protocol is detected,\n * ``tls`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`\n   when TLS protocol is detected."}, "application_protocols": {"items": {"type": "string"}, "type": "array", "description": "If non-empty, a list of application protocols (e.g. ALPN for TLS protocol) to consider when\n determining a filter chain match. Those values will be compared against the application\n protocols of a new connection, when detected by one of the listener filters.\n\n Suggested values include:\n\n * ``http/1.1`` - set by :ref:`envoy.filters.listener.tls_inspector\n   <config_listener_filters_tls_inspector>`,\n * ``h2`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`\n\n .. attention::\n\n   Currently, only :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides\n   application protocol detection based on the requested\n   `ALPN <https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_ values.\n\n   However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,\n   and matching on values other than ``h2`` is going to lead to a lot of false negatives,\n   unless all connecting clients are known to use ALPN."}}, "additionalProperties": true, "type": "object", "description": "The criteria to use when matching a connection to this filter chain."}, "filters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "The name of the filter to instantiate. The name must match a\n :ref:`supported filter <config_network_filters>`."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "Filter specific configuration which depends on the filter being\n instantiated. See the supported filters for further documentation."}, "config_discovery": {"properties": {"config_source": {"properties": {"authorities": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "xDS authority information."}, "type": "array", "description": "Authorities that this config source may be used for. An authority specified in a xdstp:// URL\n is resolved to a *ConfigSource* prior to configuration fetch. This field provides the\n association between authority name and configuration source.\n [#not-implemented-hide:]"}, "path": {"type": "string", "description": "Path on the filesystem to source and watch for configuration updates.\n When sourcing configuration for :ref:`secret <envoy_api_msg_extensions.transport_sockets.tls.v3.Secret>`,\n the certificate and key files are also watched for updates.\n\n .. note::\n\n  The path to the source must exist at config load time.\n\n .. note::\n\n   Envoy will only watch the file path for *moves.* This is because in general only moves\n   are atomic. The same method of swapping files as is demonstrated in the\n   :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be used here also."}, "api_config_source": {"properties": {"api_type": {"enum": ["DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE", 0, "REST", 1, "GRPC", 2, "DELTA_GRPC", 3, "AGGREGATED_GRPC", 5, "AGGREGATED_DELTA_GRPC", 6], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API type (gRPC, REST, delta gRPC)"}, "transport_api_version": {"enum": ["AUTO", 0, "V2", 1, "V3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API version for xDS transport protocol. This describes the xDS gRPC/REST\n endpoint and version of [Delta]DiscoveryRequest/Response used on the wire."}, "cluster_names": {"items": {"type": "string"}, "type": "array", "description": "Cluster names should be used only with REST. If > 1\n cluster is defined, clusters will be cycled through if any kind of failure\n occurs.\n\n .. note::\n\n  The cluster with name ``cluster_name`` must be statically defined and its\n  type must not be ``EDS``."}, "grpc_services": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"envoy_grpc": {"properties": {"cluster_name": {"type": "string", "description": "The name of the upstream gRPC cluster. SSL credentials will be supplied\n in the :ref:`Cluster <envoy_api_msg_config.cluster.v3.Cluster>` :ref:`transport_socket\n <envoy_api_field_config.cluster.v3.Cluster.transport_socket>`."}, "authority": {"type": "string", "description": "The `:authority` header in the grpc request. If this field is not set, the authority header value will be `cluster_name`.\n Note that this authority does not override the SNI. The SNI is provided by the transport socket of the cluster."}}, "additionalProperties": true, "type": "object", "description": "Envoy's in-built gRPC client.\n See the :ref:`gRPC services overview <arch_overview_grpc_services>`\n documentation for discussion on gRPC client selection."}, "google_grpc": {"properties": {"target_uri": {"type": "string", "description": "The target URI when using the `Google C++ gRPC client\n <https://github.com/grpc/grpc>`_. SSL credentials will be supplied in\n :ref:`channel_credentials <envoy_api_field_config.core.v3.GrpcService.GoogleGrpc.channel_credentials>`."}, "channel_credentials": {"properties": {"ssl_credentials": {"properties": {"root_certs": {"$ref": "#/definitions/envoy.config.core.v3.DataSource", "additionalProperties": true, "description": "PEM encoded server root certificates."}, "private_key": {"$ref": "#/definitions/envoy.config.core.v3.DataSource", "additionalProperties": true, "description": "PEM encoded client private key."}, "cert_chain": {"$ref": "#/definitions/envoy.config.core.v3.DataSource", "additionalProperties": true, "description": "PEM encoded client certificate chain."}}, "additionalProperties": true, "type": "object"}, "google_default": {"additionalProperties": true, "type": "object", "description": "https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"}, "local_credentials": {"additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object"}, "call_credentials": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"access_token": {"type": "string", "description": "Access token credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#ad3a80da696ffdaea943f0f858d7a360d."}, "google_compute_engine": {"additionalProperties": true, "type": "object", "description": "Google Compute Engine credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"}, "google_refresh_token": {"type": "string", "description": "Google refresh token credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a96901c997b91bc6513b08491e0dca37c."}, "service_account_jwt_access": {"properties": {"json_key": {"type": "string"}, "token_lifetime_seconds": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "Service Account JWT Access credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a92a9f959d6102461f66ee973d8e9d3aa."}, "google_iam": {"properties": {"authorization_token": {"type": "string"}, "authority_selector": {"type": "string"}}, "additionalProperties": true, "type": "object", "description": "Google IAM credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a9fc1fc101b41e680d47028166e76f9d0."}, "from_plugin": {"properties": {"name": {"type": "string"}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Custom authenticator credentials.\n https://grpc.io/grpc/cpp/namespacegrpc.html#a823c6a4b19ffc71fb33e90154ee2ad07.\n https://grpc.io/docs/guides/auth.html#extending-grpc-to-support-other-authentication-mechanisms."}, "sts_service": {"properties": {"token_exchange_service_uri": {"type": "string", "description": "URI of the token exchange service that handles token exchange requests.\n [#comment:TODO(asraa): Add URI validation when implemented. Tracked by\n https://github.com/envoyproxy/protoc-gen-validate/issues/303]"}, "resource": {"type": "string", "description": "Location of the target service or resource where the client\n intends to use the requested security token."}, "audience": {"type": "string", "description": "Logical name of the target service where the client intends to\n use the requested security token."}, "scope": {"type": "string", "description": "The desired scope of the requested security token in the\n context of the service or resource where the token will be used."}, "requested_token_type": {"type": "string", "description": "Type of the requested security token."}, "subject_token_path": {"type": "string", "description": "The path of subject token, a security token that represents the\n identity of the party on behalf of whom the request is being made."}, "subject_token_type": {"type": "string", "description": "Type of the subject token."}, "actor_token_path": {"type": "string", "description": "The path of actor token, a security token that represents the identity\n of the acting party. The acting party is authorized to use the\n requested security token and act on behalf of the subject."}, "actor_token_type": {"type": "string", "description": "Type of the actor token."}}, "additionalProperties": true, "type": "object", "description": "Custom security token service which implements OAuth 2.0 token exchange.\n https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16\n See https://github.com/grpc/grpc/pull/19587."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 8]"}, "type": "array", "description": "A set of call credentials that can be composed with `channel credentials\n <https://grpc.io/docs/guides/auth.html#credential-types>`_."}, "stat_prefix": {"type": "string", "description": "The human readable prefix to use when emitting statistics for the gRPC\n service.\n\n .. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    streams_total, Counter, Total number of streams opened\n    streams_closed_<gRPC status code>, Counter, Total streams closed with <gRPC status code>"}, "credentials_factory_name": {"type": "string", "description": "The name of the Google gRPC credentials factory to use. This must have been registered with\n Envoy. If this is empty, a default credentials factory will be used that sets up channel\n credentials based on other configuration parameters."}, "config": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Additional configuration for site-specific customizations of the Google\n gRPC library."}, "per_stream_buffer_limit_bytes": {"additionalProperties": true, "type": "integer", "description": "How many bytes each stream can buffer internally.\n If not set an implementation defined default is applied (1MiB)."}, "channel_args": {"properties": {"args": {"additionalProperties": {"properties": {"string_value": {"type": "string"}, "int_value": {"type": "string"}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "See grpc_types.h GRPC_ARG #defines for keys that work here."}}, "additionalProperties": true, "type": "object", "description": "Custom channels args."}}, "additionalProperties": true, "type": "object", "description": "`Google C++ gRPC client <https://github.com/grpc/grpc>`_\n See the :ref:`gRPC services overview <arch_overview_grpc_services>`\n documentation for discussion on gRPC client selection."}, "timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The timeout for the gRPC request. This is the timeout for a specific\n request."}, "initial_metadata": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "Header name."}, "value": {"type": "string", "description": "Header value.\n\n The same :ref:`format specifier <config_access_log_format>` as used for\n :ref:`HTTP access logging <config_access_log>` applies here, however\n unknown header values are replaced with the empty string instead of `-`."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair."}, "type": "array", "description": "Additional metadata to include in streams initiated to the GrpcService. This can be used for\n scenarios in which additional ad hoc authorization headers (e.g. ``x-foo-bar: baz-key``) are to\n be injected. For more information, including details on header value syntax, see the\n documentation on :ref:`custom request headers\n <config_http_conn_man_headers_custom_request_headers>`."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: gRPC services]\n\ngRPC service configuration. This is used by :ref:`ApiConfigSource\n <envoy_api_msg_config.core.v3.ApiConfigSource>` and filter configurations.\n [#next-free-field: 6]"}, "type": "array", "description": "Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,\n services will be cycled through if any kind of failure occurs."}, "refresh_delay": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "For REST APIs, the delay between successive polls."}, "request_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "For REST APIs, the request timeout. If not set, a default value of 1s will be used."}, "rate_limit_settings": {"properties": {"max_tokens": {"additionalProperties": true, "type": "integer", "description": "Maximum number of tokens to be used for rate limiting discovery request calls. If not set, a\n default value of 100 will be used."}, "fill_rate": {"additionalProperties": true, "type": "number", "description": "Rate at which tokens will be filled per second. If not set, a default fill rate of 10 tokens\n per second will be used."}}, "additionalProperties": true, "type": "object", "description": "For GRPC APIs, the rate limit settings. If present, discovery requests made by Envoy will be\n rate limited."}, "set_node_on_first_message_only": {"type": "boolean", "description": "Skip the node identifier in subsequent discovery requests for streaming gRPC config types."}}, "additionalProperties": true, "type": "object", "description": "API configuration source."}, "ads": {"additionalProperties": true, "type": "object", "description": "When set, ADS will be used to fetch resources. The ADS API configuration\n source in the bootstrap configuration is used."}, "self": {"properties": {"transport_api_version": {"enum": ["AUTO", 0, "V2", 1, "V3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API version for xDS transport protocol. This describes the xDS gRPC/REST\n endpoint and version of [Delta]DiscoveryRequest/Response used on the wire."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]\n When set, the client will access the resources from the same server it got the\n ConfigSource from, although not necessarily from the same stream. This is similar to the\n :ref:`ads<envoy_api_field.ConfigSource.ads>` field, except that the client may use a\n different stream to the same server. As a result, this field can be used for things\n like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)\n LDS to RDS on the same server without requiring the management server to know its name\n or required credentials.\n [#next-major-version: In xDS v3, consider replacing the ads field with this one, since\n this field can implicitly mean to use the same stream in the case where the ConfigSource\n is provided via ADS and the specified data can also be obtained via ADS.]"}, "initial_fetch_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "When this timeout is specified, Envoy will wait no longer than the specified time for first\n config response on this xDS subscription during the :ref:`initialization process\n <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next\n initialization phase, even if the first config is not delivered yet. The timer is activated\n when the xDS API subscription starts, and is disarmed on first config update or on error. 0\n means no timeout - Envoy will wait indefinitely for the first xDS config (unless another\n timeout applies). The default is 15s."}, "resource_api_version": {"enum": ["AUTO", 0, "V2", 1, "V3", 2], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "API version for xDS resources. This implies the type URLs that the client\n will request for resources and the resource type that the client will in\n turn expect to be delivered."}}, "additionalProperties": true, "type": "object"}, "default_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "Optional default configuration to use as the initial configuration if\n there is a failure to receive the initial extension configuration or if\n `apply_default_config_without_warming` flag is set."}, "apply_default_config_without_warming": {"type": "boolean", "description": "Use the default config as the initial configuration without warming and\n waiting for the first discovery response. Requires the default configuration\n to be supplied."}, "type_urls": {"items": {"type": "string"}, "type": "array", "description": "A set of permitted extension type URLs. Extension configuration updates are rejected\n if they do not match any type URL in the set."}}, "additionalProperties": true, "type": "object", "description": "Configuration source specifier for an extension configuration discovery\n service. In case of a failure and without the default configuration, the\n listener closes the connections.\n [#not-implemented-hide:]"}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Listener components]\n Listener :ref:`configuration overview <config_listeners>`\n\n[#next-free-field: 6]"}, "type": "array", "description": "A list of individual network filters that make up the filter chain for\n connections established with the listener. Order matters as the filters are\n processed sequentially as connection events happen. Note: If the filter\n list is empty, the connection will close by default."}, "use_proxy_proto": {"additionalProperties": true, "type": "boolean", "description": "Whether the listener should expect a PROXY protocol V1 header on new\n connections. If this option is enabled, the listener will assume that that\n remote address of the connection is the one specified in the header. Some\n load balancers including the AWS ELB support this option. If the option is\n absent or set to false, Envoy will use the physical peer address of the\n connection as the remote address.\n\n This field is deprecated. Add a\n :ref:`PROXY protocol listener filter <config_listener_filters_proxy_protocol>`\n explicitly instead."}, "metadata": {"$ref": "#/definitions/envoy.config.core.v3.Metadata", "additionalProperties": true, "description": "[#not-implemented-hide:] filter chain metadata."}, "transport_socket": {"properties": {"name": {"type": "string", "description": "The name of the transport socket to instantiate. The name must match a supported transport\n socket implementation."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Optional custom transport socket implementation to use for downstream connections.\n To setup TLS, set a transport socket with name `tls` and\n :ref:`DownstreamTlsContext <envoy_api_msg_extensions.transport_sockets.tls.v3.DownstreamTlsContext>` in the `typed_config`.\n If no transport socket configuration is specified, new connections\n will be set up with plaintext."}, "transport_socket_connect_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "If present and nonzero, the amount of time to allow incoming connections to complete any\n transport socket negotiations. If this expires before the transport reports connection\n establishment, the connection is summarily closed."}, "name": {"type": "string", "description": "[#not-implemented-hide:] The unique name (or empty) by which this filter chain is known. If no\n name is provided, Envoy will allocate an internal UUID for the filter chain. If the filter\n chain is to be dynamically updated or removed via FCDS a unique name must be provided."}, "on_demand_configuration": {"properties": {"rebuild_timeout": {"properties": {"seconds": {"type": "string", "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"}, "nanos": {"type": "integer", "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."}}, "additionalProperties": true, "type": "object", "description": "The timeout to wait for filter chain placeholders to complete rebuilding.\n 1. If this field is set to 0, timeout is disabled.\n 2. If not specified, a default timeout of 15s is used.\n Rebuilding will wait until dependencies are ready, have failed, or this timeout is reached.\n Upon failure or timeout, all connections related to this filter chain will be closed.\n Rebuilding will start again on the next new connection."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] The configuration to specify whether the filter chain will be built on-demand.\n If this field is not empty, the filter chain will be built on-demand.\n Otherwise, the filter chain will be built normally and block listener warming."}}, "additionalProperties": true, "type": "object", "description": "A filter chain wraps a set of match criteria, an option TLS context, a set of filters, and\n various other parameters.\n [#next-free-field: 10]", "id": "envoy.config.listener.v3.FilterChain"}, "envoy.config.listener.v3.ListenerFilterChainMatchPredicate": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"or_match": {"$ref": "#/definitions/envoy.config.listener.v3.ListenerFilterChainMatchPredicate.MatchSet", "additionalProperties": true, "description": "A set that describes a logical OR. If any member of the set matches, the match configuration\n matches."}, "and_match": {"$ref": "#/definitions/envoy.config.listener.v3.ListenerFilterChainMatchPredicate.MatchSet", "additionalProperties": true, "description": "A set that describes a logical AND. If all members of the set match, the match configuration\n matches."}, "not_match": {"$ref": "#/definitions/envoy.config.listener.v3.ListenerFilterChainMatchPredicate", "additionalProperties": true, "description": "A negation match. The match configuration will match if the negated match condition matches."}, "any_match": {"type": "boolean", "description": "The match configuration will always match."}, "destination_port_range": {"properties": {"start": {"type": "integer", "description": "start of the range (inclusive)"}, "end": {"type": "integer", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "Match destination port. Particularly, the match evaluation must use the recovered local port if\n the owning listener filter is after :ref:`an original_dst listener filter <config_listener_filters_original_dst>`."}}, "additionalProperties": true, "type": "object", "description": "Listener filter chain match configuration. This is a recursive structure which allows complex\n nested match configurations to be built using various logical operators.\n\n Examples:\n\n * Matches if the destination port is 3306.\n\n .. code-block:: yaml\n\n  destination_port_range:\n   start: 3306\n   end: 3307\n\n * Matches if the destination port is 3306 or 15000.\n\n .. code-block:: yaml\n\n  or_match:\n    rules:\n      - destination_port_range:\n          start: 3306\n          end: 3306\n      - destination_port_range:\n          start: 15000\n          end: 15001\n\n [#next-free-field: 6]", "id": "envoy.config.listener.v3.ListenerFilterChainMatchPredicate"}, "envoy.config.listener.v3.ListenerFilterChainMatchPredicate.MatchSet": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"rules": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.listener.v3.ListenerFilterChainMatchPredicate"}, "type": "array", "description": "The list of rules that make up the set."}}, "additionalProperties": true, "type": "object", "description": "A set of match configurations used for logical operations.", "id": "envoy.config.listener.v3.ListenerFilterChainMatchPredicate.MatchSet"}, "envoy.type.matcher.v3.RegexMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"google_re2": {"properties": {"max_program_size": {"additionalProperties": true, "type": "integer", "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."}}, "additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.", "id": "envoy.type.matcher.v3.RegexMatcher"}, "envoy.type.matcher.v3.ValueMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"null_match": {"additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a NullValue."}, "double_match": {"properties": {"range": {"properties": {"start": {"type": "number", "description": "start of the range (inclusive)"}, "end": {"type": "number", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, the input double value must be in the range specified here.\n Note: The range is using half-open interval semantics [start, end)."}, "exact": {"type": "number", "description": "If specified, the input double value must be equal to the value specified here."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a double value and is\n matched to this field."}, "string_match": {"properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "safe_regex": {"$ref": "#/definitions/envoy.type.matcher.v3.RegexMatcher", "additionalProperties": true, "description": "The input string must match the regular expression specified here."}, "contains": {"type": "string", "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a string value and is\n matched to this field."}, "bool_match": {"type": "boolean", "description": "If specified, a match occurs if and only if the target value is a bool value and is equal\n to this field."}, "present_match": {"type": "boolean", "description": "If specified, value match will be performed based on whether the path is referring to a\n valid primitive value in the metadata. If the path is referring to a non-primitive value,\n the result is always not matched."}, "list_match": {"properties": {"one_of": {"$ref": "#/definitions/envoy.type.matcher.v3.ValueMatcher", "additionalProperties": true, "description": "If specified, at least one of the values in the list must match the value specified."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a list value and\n is matched to this field."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Value matcher]\n\nSpecifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.\n StructValue is not supported and is always not matched.\n [#next-free-field: 7]", "id": "envoy.type.matcher.v3.ValueMatcher"}}}