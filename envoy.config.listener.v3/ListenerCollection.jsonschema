{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "entries": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "locator": {
                        "$ref": "xds.core.v3.ResourceLocator",
                        "additionalProperties": true,
                        "description": "A resource locator describing how the member resource is to be located."
                    },
                    "inline_entry": {
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Optional name to describe the inlined resource. Resource names must\n [a-zA-Z0-9_-\\./]+ (TODO(htuch): turn this into a PGV constraint once\n finalized, probably should be a RFC3986 pchar). This name allows\n reference via the #entry directive in ResourceLocator."
                            },
                            "version": {
                                "type": "string",
                                "description": "The resource's logical version. It is illegal to have the same named xDS\n resource name at a given version with different resource payloads."
                            },
                            "resource": {
                                "properties": {
                                    "type_url": {
                                        "type": "string",
                                        "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Must be a valid serialized protocol buffer of the above specified type."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The resource payload, including type URL."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "The resource is inlined in the list collection."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": "xDS collection resource wrapper. This encapsulates a xDS resource when\n appearing inside a list collection resource. List collection resources are\n regular Resource messages of type:\n\n message \u003cT\u003eCollection {\n   repeated CollectionEntry resources = 1;\n }"
            },
            "type": "array"
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: Listener configuration]\n Listener :ref:`configuration overview \u003cconfig_listeners\u003e`\n\nListener list collections. Entries are *Listener* resources or references.\n [#not-implemented-hide:]",
    "definitions": {
        "xds.core.v3.ResourceLocator": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "scheme": {
                    "enum": [
                        "XDSTP",
                        0,
                        "HTTP",
                        1,
                        "FILE",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "description": "URI scheme."
                },
                "id": {
                    "type": "string",
                    "description": "Opaque identifier for the resource. Any '/' will not be escaped during URI\n encoding and will form part of the URI path. This may end\n with ‘*’ for glob collection references."
                },
                "authority": {
                    "type": "string",
                    "description": "Logical authority for resource (not necessarily transport network address).\n Authorities are opaque in the xDS API, data-plane load balancers will map\n them to concrete network transports such as an xDS management server, e.g.\n via envoy.config.core.v3.ConfigSource."
                },
                "resource_type": {
                    "type": "string",
                    "description": "Fully qualified resource type (as in type URL without types.googleapis.com/\n prefix)."
                },
                "exact_context": {
                    "properties": {
                        "params": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Additional parameters that can be used to select resource variants.\n Matches must be exact, i.e. all context parameters must match exactly and\n there must be no additional context parameters set on the matched\n resource."
                },
                "directives": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "alt": {
                                "$ref": "xds.core.v3.ResourceLocator",
                                "additionalProperties": true,
                                "description": "An alternative resource locator for fallback if the resource is\n unavailable. For example, take the resource locator:\n\n   xdstp://foo/some-type/some-route-table#alt=xdstp://bar/some-type/another-route-table\n\n If the data-plane load balancer is unable to reach `foo` to fetch the\n resource, it will fallback to `bar`. Alternative resources do not need\n to have equivalent content, but they should be functional substitutes."
                            },
                            "entry": {
                                "type": "string",
                                "description": "List collections support inlining of resources via the entry field in\n Resource. These inlined Resource objects may have an optional name\n field specified. When specified, the entry directive allows\n ResourceLocator to directly reference these inlined resources, e.g.\n xdstp://.../foo#entry=bar."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Directives provide information to data-plane load balancers on how xDS\n resource names are to be interpreted and potentially further resolved. For\n example, they may provide alternative resource locators for when primary\n resolution fails. Directives are not part of resource names and do not\n appear in a xDS transport discovery request.\n\n When encoding to URIs, directives take the form:\n\n \u003cdirective name\u003e=\u003cstring representation of directive value\u003e\n\n For example, we can have alt=xdstp://foo/bar or entry=some%20thing. Each\n directive value type may have its own string encoding, in the case of\n ResourceLocator there is a recursive URI encoding.\n\n Percent encoding applies to the URI encoding of the directive value.\n Multiple directives are comma-separated, so the reserved characters that\n require percent encoding in a directive value are [',', '#', '[', ']',\n '%']. These are the RFC3986 fragment reserved characters with the addition\n of the xDS scheme specific ','. See\n https://tools.ietf.org/html/rfc3986#page-49 for further details on URI ABNF\n and reserved characters."
                    },
                    "type": "array",
                    "description": "A list of directives that appear in the xDS resource locator #fragment.\n\n When encoding to URI form, directives are percent encoded with comma\n separation."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "xDS resource locators identify a xDS resource name and instruct the\n data-plane load balancer on how the resource may be located.\n\n Resource locators have a canonical xdstp:// URI representation:\n\n   xdstp://{authority}/{type_url}/{id}?{context_params}{#directive,*}\n\n where context_params take the form of URI query parameters.\n\n Resource locators have a similar canonical http:// URI representation:\n\n   http://{authority}/{type_url}/{id}?{context_params}{#directive,*}\n\n Resource locators also have a simplified file:// URI representation:\n\n   file:///{id}{#directive,*}",
            "id": "xds.core.v3.ResourceLocator"
        }
    }
}