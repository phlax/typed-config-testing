{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "destination_port": {
            "additionalProperties": true,
            "type": "integer",
            "description": "Optional destination port to consider when use_original_dst is set on the\n listener in determining a filter chain match."
        },
        "prefix_ranges": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "$ref": "envoy.config.core.v3.CidrRange"
            },
            "type": "array",
            "description": "If non-empty, an IP address and prefix length to match addresses when the\n listener is bound to 0.0.0.0/:: or when use_original_dst is specified."
        },
        "address_suffix": {
            "type": "string",
            "description": "If non-empty, an IP address and suffix length to match addresses when the\n listener is bound to 0.0.0.0/:: or when use_original_dst is specified.\n [#not-implemented-hide:]"
        },
        "suffix_len": {
            "additionalProperties": true,
            "type": "integer",
            "description": "[#not-implemented-hide:]"
        },
        "source_type": {
            "enum": [
                "ANY",
                0,
                "SAME_IP_OR_LOOPBACK",
                1,
                "EXTERNAL",
                2
            ],
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "integer"
                }
            ],
            "description": "Specifies the connection source IP match type. Can be any, local or external network."
        },
        "source_prefix_ranges": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "$ref": "envoy.config.core.v3.CidrRange"
            },
            "type": "array",
            "description": "The criteria is satisfied if the source IP address of the downstream\n connection is contained in at least one of the specified subnets. If the\n parameter is not specified or the list is empty, the source IP address is\n ignored."
        },
        "source_ports": {
            "items": {
                "type": "integer"
            },
            "type": "array",
            "description": "The criteria is satisfied if the source port of the downstream connection\n is contained in at least one of the specified ports. If the parameter is\n not specified, the source port is ignored."
        },
        "server_names": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining\n a filter chain match. Those values will be compared against the server names of a new\n connection, when detected by one of the listener filters.\n\n The server name will be matched against all wildcard domains, i.e. ``www.example.com``\n will be first matched against ``www.example.com``, then ``*.example.com``, then ``*.com``.\n\n Note that partial wildcards are not supported, and values like ``*w.example.com`` are invalid.\n\n .. attention::\n\n   See the :ref:`FAQ entry \u003cfaq_how_to_setup_sni\u003e` on how to configure SNI for more\n   information."
        },
        "transport_protocol": {
            "type": "string",
            "description": "If non-empty, a transport protocol to consider when determining a filter chain match.\n This value will be compared against the transport protocol of a new connection, when\n it's detected by one of the listener filters.\n\n Suggested values include:\n\n * ``raw_buffer`` - default, used when no transport protocol is detected,\n * ``tls`` - set by :ref:`envoy.filters.listener.tls_inspector \u003cconfig_listener_filters_tls_inspector\u003e`\n   when TLS protocol is detected."
        },
        "application_protocols": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "If non-empty, a list of application protocols (e.g. ALPN for TLS protocol) to consider when\n determining a filter chain match. Those values will be compared against the application\n protocols of a new connection, when detected by one of the listener filters.\n\n Suggested values include:\n\n * ``http/1.1`` - set by :ref:`envoy.filters.listener.tls_inspector\n   \u003cconfig_listener_filters_tls_inspector\u003e`,\n * ``h2`` - set by :ref:`envoy.filters.listener.tls_inspector \u003cconfig_listener_filters_tls_inspector\u003e`\n\n .. attention::\n\n   Currently, only :ref:`TLS Inspector \u003cconfig_listener_filters_tls_inspector\u003e` provides\n   application protocol detection based on the requested\n   `ALPN \u003chttps://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation\u003e`_ values.\n\n   However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,\n   and matching on values other than ``h2`` is going to lead to a lot of false negatives,\n   unless all connecting clients are known to use ALPN."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Specifies the match criteria for selecting a specific filter chain for a\n listener.\n\n In order for a filter chain to be selected, *ALL* of its criteria must be\n fulfilled by the incoming connection, properties of which are set by the\n networking stack and/or listener filters.\n\n The following order applies:\n\n 1. Destination port.\n 2. Destination IP address.\n 3. Server name (e.g. SNI for TLS protocol),\n 4. Transport protocol.\n 5. Application protocols (e.g. ALPN for TLS protocol).\n 6. Source type (e.g. any, local or external network).\n 7. Source IP address.\n 8. Source port.\n\n For criteria that allow ranges or wildcards, the most specific value in any\n of the configured filter chains that matches the incoming connection is going\n to be used (e.g. for SNI ``www.example.com`` the most specific match would be\n ``www.example.com``, then ``*.example.com``, then ``*.com``, then any filter\n chain without ``server_names`` requirements).\n\n A different way to reason about the filter chain matches:\n Suppose there exists N filter chains. Prune the filter chain set using the above 8 steps.\n In each step, filter chains which most specifically matches the attributes continue to the next step.\n The listener guarantees at most 1 filter chain is left after all of the steps.\n\n Example:\n\n For destination port, filter chains specifying the destination port of incoming traffic are the\n most specific match. If none of the filter chains specifies the exact destination port, the filter\n chains which do not specify ports are the most specific match. Filter chains specifying the\n wrong port can never be the most specific match.\n\n [#comment: Implemented rules are kept in the preference order, with deprecated fields\n listed at the end, because that's how we want to list them in the docs.\n\n [#comment:TODO(PiotrSikora): Add support for configurable precedence of the rules]\n [#next-free-field: 13]",
    "definitions": {
        "envoy.config.core.v3.CidrRange": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "address_prefix": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``."
                },
                "prefix_len": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Length of prefix, e.g. 0, 32."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "CidrRange specifies an IP Address and a prefix length to construct\n the subnet mask for a `CIDR \u003chttps://tools.ietf.org/html/rfc4632\u003e`_ range.",
            "id": "envoy.config.core.v3.CidrRange"
        }
    }
}