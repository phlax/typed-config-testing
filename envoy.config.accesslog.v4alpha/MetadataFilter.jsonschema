{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "matcher": {
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "The filter name to retrieve the Struct from the Metadata."
                },
                "path": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "If specified, use the key to retrieve the value in a Struct."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "Specifies the segment in a path to retrieve value from Metadata.\n Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that\n if the segment key refers to a list, it has to be the last segment in a path."
                    },
                    "type": "array",
                    "description": "The path to retrieve the Value from the Struct."
                },
                "value": {
                    "$ref": "envoy.type.matcher.v4alpha.ValueMatcher",
                    "additionalProperties": true,
                    "description": "The MetadataMatcher is matched if the value retrieved by path is matched to this value."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Matcher to check metadata for specified value. For example, to match on the\n access_log_hint metadata, set the filter to \"envoy.common\" and the path to\n \"access_log_hint\", and the value to \"true\"."
        },
        "match_if_key_not_found": {
            "additionalProperties": true,
            "type": "boolean",
            "description": "Default result if the key does not exist in dynamic metadata: if unset or\n true, then log; if false, then don't log."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Filters based on matching dynamic metadata.\n If the matcher path and key correspond to an existing key in dynamic\n metadata, the request is logged only if the matcher value is equal to the\n metadata value. If the matcher path and key *do not* correspond to an\n existing key in dynamic metadata, the request is logged only if\n match_if_key_not_found is \"true\" or unset.",
    "definitions": {
        "envoy.type.matcher.v4alpha.ValueMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "null_match": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a NullValue."
                },
                "double_match": {
                    "properties": {
                        "range": {
                            "properties": {
                                "start": {
                                    "type": "number",
                                    "description": "start of the range (inclusive)"
                                },
                                "end": {
                                    "type": "number",
                                    "description": "end of the range (exclusive)"
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "If specified, the input double value must be in the range specified here.\n Note: The range is using half-open interval semantics [start, end)."
                        },
                        "exact": {
                            "type": "number",
                            "description": "If specified, the input double value must be equal to the value specified here."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a double value and is\n matched to this field."
                },
                "string_match": {
                    "properties": {
                        "exact": {
                            "type": "string",
                            "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                        },
                        "prefix": {
                            "type": "string",
                            "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                        },
                        "suffix": {
                            "type": "string",
                            "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                        },
                        "safe_regex": {
                            "properties": {
                                "google_re2": {
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "Google's RE2 regex engine."
                                },
                                "regex": {
                                    "type": "string",
                                    "description": "The regex match string. The string must be supported by the configured engine."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "The input string must match the regular expression specified here."
                        },
                        "contains": {
                            "type": "string",
                            "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"
                        },
                        "ignore_case": {
                            "type": "boolean",
                            "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a string value and is\n matched to this field."
                },
                "bool_match": {
                    "type": "boolean",
                    "description": "If specified, a match occurs if and only if the target value is a bool value and is equal\n to this field."
                },
                "present_match": {
                    "type": "boolean",
                    "description": "If specified, value match will be performed based on whether the path is referring to a\n valid primitive value in the metadata. If the path is referring to a non-primitive value,\n the result is always not matched."
                },
                "list_match": {
                    "properties": {
                        "one_of": {
                            "$ref": "envoy.type.matcher.v4alpha.ValueMatcher",
                            "additionalProperties": true,
                            "description": "If specified, at least one of the values in the list must match the value specified."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "If specified, a match occurs if and only if the target value is a list value and\n is matched to this field."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Value matcher]\n\nSpecifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.\n StructValue is not supported and is always not matched.\n [#next-free-field: 7]",
            "id": "envoy.type.matcher.v4alpha.ValueMatcher"
        }
    }
}