{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"identifier": {"properties": {"node": {"properties": {"id": {"type": "string", "description": "An opaque node identifier for the Envoy node. This also provides the local\n service node name. It should be set if any of the following features are\n used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS\n <config_cluster_manager_cds>`, and :ref:`HTTP tracing\n <arch_overview_tracing>`, either in this message or via\n :option:`--service-node`."}, "cluster": {"type": "string", "description": "Defines the local service cluster name where Envoy is running. Though\n optional, it should be set if any of the following features are used:\n :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster\n verification\n <envoy_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher>`,\n :ref:`runtime override directory <envoy_api_msg_config.bootstrap.v3.Runtime>`,\n :ref:`user agent addition\n <envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent>`,\n :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,\n :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing\n <arch_overview_tracing>`, either in this message or via\n :option:`--service-cluster`."}, "metadata": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Opaque metadata extending the node identifier. Envoy will pass this\n directly to the management server."}, "locality": {"properties": {"region": {"type": "string", "description": "Region this :ref:`zone <envoy_api_field_config.core.v3.Locality.zone>` belongs to."}, "zone": {"type": "string", "description": "Defines the local service zone where Envoy is running. Though optional, it\n should be set if discovery service routing is used and the discovery\n service exposes :ref:`zone data <envoy_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,\n either in this message or via :option:`--service-zone`. The meaning of zone\n is context dependent, e.g. `Availability Zone (AZ)\n <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_\n on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on\n GCP, etc."}, "sub_zone": {"type": "string", "description": "When used for locality of upstream hosts, this field further splits zone\n into smaller chunks of sub-zones so they can be load balanced\n independently."}}, "additionalProperties": true, "type": "object", "description": "Locality specifying where the Envoy instance is running."}, "user_agent_name": {"type": "string", "description": "Free-form string that identifies the entity requesting config.\n E.g. \"envoy\" or \"grpc\""}, "user_agent_version": {"type": "string", "description": "Free-form string that identifies the version of the entity requesting config.\n E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\""}, "user_agent_build_version": {"$ref": "#/definitions/envoy.config.core.v3.BuildVersion", "additionalProperties": true, "description": "Structured version of the entity requesting config."}, "extensions": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "This is the name of the Envoy filter as specified in the Envoy\n configuration, e.g. envoy.filters.http.router, com.acme.widget."}, "category": {"type": "string", "description": "Category of the extension.\n Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\"\n for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from\n acme.com vendor.\n [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]"}, "type_descriptor": {"type": "string", "description": "[#not-implemented-hide:] Type descriptor of extension configuration proto.\n [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]\n [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]"}, "version": {"$ref": "#/definitions/envoy.config.core.v3.BuildVersion", "additionalProperties": true, "description": "The version is a property of the extension and maintained independently\n of other extensions and the Envoy API.\n This field is not set when extension did not provide version information."}, "disabled": {"type": "boolean", "description": "Indicates that the extension is present but was disabled via dynamic configuration."}}, "additionalProperties": true, "type": "object", "description": "Version and identification for an Envoy extension.\n [#next-free-field: 6]"}, "type": "array", "description": "List of extensions and their versions supported by the node."}, "client_features": {"items": {"type": "string"}, "type": "array", "description": "Client feature support list. These are well known features described\n in the Envoy API repository for a given major version of an API. Client features\n use reverse DNS naming scheme, for example `com.acme.feature`.\n See :ref:`the list of features <client_features>` that xDS client may\n support."}, "listening_addresses": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.core.v3.Address"}, "type": "array", "description": "Known listening ports on the node as a generic hint to the management server\n for filtering :ref:`listeners <config_listeners>` to be returned. For example,\n if there is a listener bound to port 80, the list can optionally contain the\n SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint."}}, "additionalProperties": true, "type": "object", "description": "The node sending taps over the stream."}, "tap_id": {"type": "string", "description": "The opaque identifier that was set in the :ref:`output config\n <envoy_api_field_config.tap.v3.StreamingGrpcSink.tap_id>`."}}, "additionalProperties": true, "type": "object", "description": "Identifier data effectively is a structured metadata. As a performance optimization this will\n only be sent in the first message on the stream."}, "trace_id": {"type": "string", "description": "The trace id. this can be used to merge together a streaming trace. Note that the trace_id\n is not guaranteed to be spatially or temporally unique."}, "trace": {"properties": {"http_buffered_trace": {"properties": {"request": {"$ref": "#/definitions/envoy.data.tap.v3.HttpBufferedTrace.Message", "additionalProperties": true, "description": "Request message."}, "response": {"$ref": "#/definitions/envoy.data.tap.v3.HttpBufferedTrace.Message", "additionalProperties": true, "description": "Response message."}}, "additionalProperties": true, "type": "object", "description": "An HTTP buffered tap trace."}, "http_streamed_trace_segment": {"properties": {"trace_id": {"type": "string", "description": "Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used\n for long term stable uniqueness."}, "request_headers": {"$ref": "#/definitions/envoy.config.core.v3.HeaderMap", "additionalProperties": true, "description": "Request headers."}, "request_body_chunk": {"$ref": "#/definitions/envoy.data.tap.v3.Body", "additionalProperties": true, "description": "Request body chunk."}, "request_trailers": {"$ref": "#/definitions/envoy.config.core.v3.HeaderMap", "additionalProperties": true, "description": "Request trailers."}, "response_headers": {"$ref": "#/definitions/envoy.config.core.v3.HeaderMap", "additionalProperties": true, "description": "Response headers."}, "response_body_chunk": {"$ref": "#/definitions/envoy.data.tap.v3.Body", "additionalProperties": true, "description": "Response body chunk."}, "response_trailers": {"$ref": "#/definitions/envoy.config.core.v3.HeaderMap", "additionalProperties": true, "description": "Response trailers."}}, "additionalProperties": true, "type": "object", "description": "An HTTP streamed tap trace segment."}, "socket_buffered_trace": {"properties": {"trace_id": {"type": "string", "description": "Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used\n for long term stable uniqueness. Matches connection IDs used in Envoy logs."}, "connection": {"$ref": "#/definitions/envoy.data.tap.v3.Connection", "additionalProperties": true, "description": "Connection properties."}, "events": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.data.tap.v3.SocketEvent"}, "type": "array", "description": "Sequence of observed events."}, "read_truncated": {"type": "boolean", "description": "Set to true if read events were truncated due to the :ref:`max_buffered_rx_bytes\n <envoy_api_field_config.tap.v3.OutputConfig.max_buffered_rx_bytes>` setting."}, "write_truncated": {"type": "boolean", "description": "Set to true if write events were truncated due to the :ref:`max_buffered_tx_bytes\n <envoy_api_field_config.tap.v3.OutputConfig.max_buffered_tx_bytes>` setting."}}, "additionalProperties": true, "type": "object", "description": "A socket buffered tap trace."}, "socket_streamed_trace_segment": {"properties": {"trace_id": {"type": "string", "description": "Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used\n for long term stable uniqueness. Matches connection IDs used in Envoy logs."}, "connection": {"$ref": "#/definitions/envoy.data.tap.v3.Connection", "additionalProperties": true, "description": "Connection properties."}, "event": {"$ref": "#/definitions/envoy.data.tap.v3.SocketEvent", "additionalProperties": true, "description": "Socket event."}}, "additionalProperties": true, "type": "object", "description": "A socket streamed tap trace segment."}}, "additionalProperties": true, "type": "object", "description": "The trace data."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:] Stream message for the Tap API. Envoy will open a stream to the server\n and stream taps without ever expecting a response.", "definitions": {"envoy.config.core.v3.Address": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"socket_address": {"properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_config.listener.v3.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_config.core.v3.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_config.cluster.v3.Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_config.core.v3.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object"}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}, "envoy_internal_address": {"properties": {"server_listener_name": {"type": "string", "description": "[#not-implemented-hide:] The :ref:`listener name <envoy_api_field_config.listener.v3.Listener.name>` of the destination internal listener."}}, "additionalProperties": true, "type": "object", "description": "[#not-implemented-hide:]"}}, "additionalProperties": true, "type": "object", "description": "Addresses specify either a logical or physical address and port, which are\n used to tell Envoy where to bind/listen, connect to upstream and find\n management servers.", "id": "envoy.config.core.v3.Address"}, "envoy.config.core.v3.BuildVersion": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"version": {"properties": {"major_number": {"type": "integer"}, "minor_number": {"type": "integer"}, "patch": {"type": "integer"}}, "additionalProperties": true, "type": "object", "description": "SemVer version of extension."}, "metadata": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object", "description": "Free-form build information.\n Envoy defines several well known keys in the source/common/version/version.h file"}}, "additionalProperties": true, "type": "object", "description": "BuildVersion combines SemVer version of extension with free-form build information\n (i.e. 'alpha', 'private-build') as a set of strings.", "id": "envoy.config.core.v3.BuildVersion"}, "envoy.config.core.v3.HeaderMap": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.core.v3.HeaderValue"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Wrapper for a set of headers.", "id": "envoy.config.core.v3.HeaderMap"}, "envoy.config.core.v3.HeaderValue": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "Header name."}, "value": {"type": "string", "description": "Header value.\n\n The same :ref:`format specifier <config_access_log_format>` as used for\n :ref:`HTTP access logging <config_access_log>` applies here, however\n unknown header values are replaced with the empty string instead of `-`."}}, "additionalProperties": true, "type": "object", "description": "Header name/value pair.", "id": "envoy.config.core.v3.HeaderValue"}, "envoy.data.tap.v3.Body": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"as_bytes": {"type": "string", "description": "Body data as bytes. By default, tap body data will be present in this field, as the proto\n `bytes` type can contain any valid byte."}, "as_string": {"type": "string", "description": "Body data as string. This field is only used when the :ref:`JSON_BODY_AS_STRING\n <envoy_api_enum_value_config.tap.v3.OutputSink.Format.JSON_BODY_AS_STRING>` sink\n format type is selected. See the documentation for that option for why this is useful."}, "truncated": {"type": "boolean", "description": "Specifies whether body data has been truncated to fit within the specified\n :ref:`max_buffered_rx_bytes\n <envoy_api_field_config.tap.v3.OutputConfig.max_buffered_rx_bytes>` and\n :ref:`max_buffered_tx_bytes\n <envoy_api_field_config.tap.v3.OutputConfig.max_buffered_tx_bytes>` settings."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Tap common data]\n\nWrapper for tapped body data. This includes HTTP request/response body, transport socket received\n and transmitted data, etc.", "id": "envoy.data.tap.v3.Body"}, "envoy.data.tap.v3.Connection": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"local_address": {"$ref": "#/definitions/envoy.config.core.v3.Address", "additionalProperties": true, "description": "Local address."}, "remote_address": {"$ref": "#/definitions/envoy.config.core.v3.Address", "additionalProperties": true, "description": "Remote address."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Transport tap data]\n Trace format for the tap transport socket extension. This dumps plain text read/write\n sequences on a socket.\n\nConnection properties.", "id": "envoy.data.tap.v3.Connection"}, "envoy.data.tap.v3.HttpBufferedTrace.Message": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.core.v3.HeaderValue"}, "type": "array", "description": "Message headers."}, "body": {"$ref": "#/definitions/envoy.data.tap.v3.Body", "additionalProperties": true, "description": "Message body."}, "trailers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/envoy.config.core.v3.HeaderValue"}, "type": "array", "description": "Message trailers."}}, "additionalProperties": true, "type": "object", "description": "HTTP message wrapper.", "id": "envoy.data.tap.v3.HttpBufferedTrace.Message"}, "envoy.data.tap.v3.SocketEvent": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"timestamp": {"type": "string", "description": "Timestamp for event.", "format": "date-time"}, "read": {"properties": {"data": {"$ref": "#/definitions/envoy.data.tap.v3.Body", "additionalProperties": true, "description": "Binary data read."}}, "additionalProperties": true, "type": "object"}, "write": {"properties": {"data": {"$ref": "#/definitions/envoy.data.tap.v3.Body", "additionalProperties": true, "description": "Binary data written."}, "end_stream": {"type": "boolean", "description": "Stream was half closed after this write."}}, "additionalProperties": true, "type": "object"}, "closed": {"additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Event in a socket trace.", "id": "envoy.data.tap.v3.SocketEvent"}}}