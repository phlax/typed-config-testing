{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "pass_through_mode": {
            "additionalProperties": true,
            "type": "boolean",
            "description": "Specifies whether the filter operates in pass through mode or not."
        },
        "cache_time": {
            "properties": {
                "seconds": {
                    "type": "string",
                    "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                },
                "nanos": {
                    "type": "integer",
                    "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "If operating in pass through mode, the amount of time in milliseconds\n that the filter should cache the upstream response."
        },
        "cluster_min_healthy_percentages": {
            "additionalProperties": {
                "properties": {
                    "value": {
                        "type": "number"
                    }
                },
                "additionalProperties": true,
                "type": "object"
            },
            "type": "object",
            "description": "If operating in non-pass-through mode, specifies a set of upstream cluster\n names and the minimum percentage of servers in each of those clusters that\n must be healthy or degraded in order for the filter to return a 200.\n\n .. note::\n\n    This value is interpreted as an integer by truncating, so 12.50% will be calculated\n    as if it were 12%."
        },
        "headers": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the header in the request."
                    },
                    "exact_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on the value of the header."
                    },
                    "regex_match": {
                        "type": "string",
                        "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex. The regex grammar used in the value field is defined\n `here \u003chttps://en.cppreference.com/w/cpp/regex/ecmascript\u003e`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex_match` as it is not safe for use\n   with untrusted input in all cases."
                    },
                    "safe_regex_match": {
                        "properties": {
                            "google_re2": {
                                "properties": {
                                    "max_program_size": {
                                        "additionalProperties": true,
                                        "type": "integer",
                                        "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "Google's RE2 regex engine."
                            },
                            "regex": {
                                "type": "string",
                                "description": "The regex match string. The string must be supported by the configured engine."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."
                    },
                    "range_match": {
                        "properties": {
                            "start": {
                                "type": "string",
                                "description": "start of the range (inclusive)"
                            },
                            "end": {
                                "type": "string",
                                "description": "end of the range (exclusive)"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""
                    },
                    "present_match": {
                        "type": "boolean",
                        "description": "If specified, header match will be performed based on whether the header is in the\n request."
                    },
                    "prefix_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."
                    },
                    "suffix_match": {
                        "type": "string",
                        "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."
                    },
                    "invert_match": {
                        "type": "boolean",
                        "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   \u003cenvoy_api_field_route.HeaderMatcher.present_match\u003e`. i.e, a request that has the :ref:`name\n   \u003cenvoy_api_field_route.HeaderMatcher.name\u003e` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 12]"
            },
            "type": "array",
            "description": "Specifies a set of health check request headers to match on. The health check filter will\n check a requestâ€™s headers against all the specified headers. To specify the health check\n endpoint, set the ``:path`` header to match on."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: Health check]\n Health check :ref:`configuration overview \u003cconfig_http_filters_health_check\u003e`.\n [#extension: envoy.filters.http.health_check]\n\n[#next-free-field: 6]"
}