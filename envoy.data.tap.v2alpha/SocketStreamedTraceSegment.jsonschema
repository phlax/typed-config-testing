{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"trace_id": {"type": "string", "description": "Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used\n for long term stable uniqueness. Matches connection IDs used in Envoy logs."}, "connection": {"properties": {"local_address": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.api.v2.core/Address.jsonschema", "additionalProperties": true, "description": "Local address."}, "remote_address": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.api.v2.core/Address.jsonschema", "additionalProperties": true, "description": "Remote address."}}, "additionalProperties": true, "type": "object", "description": "Connection properties."}, "event": {"properties": {"timestamp": {"type": "string", "description": "Timestamp for event.", "format": "date-time"}, "read": {"properties": {"data": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.data.tap.v2alpha/Body.jsonschema", "additionalProperties": true, "description": "Binary data read."}}, "additionalProperties": true, "type": "object"}, "write": {"properties": {"data": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.data.tap.v2alpha/Body.jsonschema", "additionalProperties": true, "description": "Binary data written."}, "end_stream": {"type": "boolean", "description": "Stream was half closed after this write."}}, "additionalProperties": true, "type": "object"}, "closed": {"additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Socket event."}}, "additionalProperties": true, "type": "object", "description": "A streamed socket trace segment. Multiple segments make up a full trace.", "definitions": {"envoy.api.v2.core.Address": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"socket_address": {"properties": {"protocol": {"enum": ["TCP", 0, "UDP", 1], "oneOf": [{"type": "string"}, {"type": "integer"}]}, "address": {"type": "string", "description": "The address for this socket. :ref:`Listeners <config_listeners>` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>`.] When used\n within an upstream :ref:`BindConfig <envoy_api_msg_core.BindConfig>`, the address\n controls the source address of outbound connections. For :ref:`clusters\n <envoy_api_msg_Cluster>`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name <envoy_api_field_core.SocketAddress.resolver_name>`."}, "port_value": {"type": "integer"}, "named_port": {"type": "string", "description": "This is only valid if :ref:`resolver_name\n <envoy_api_field_core.SocketAddress.resolver_name>` is specified below and the\n named resolver is capable of named port resolution."}, "resolver_name": {"type": "string", "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."}, "ipv4_compat": {"type": "boolean", "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:<IPv4-address>``."}}, "additionalProperties": true, "type": "object"}, "pipe": {"properties": {"path": {"type": "string", "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."}, "mode": {"type": "integer", "description": "The mode for the Pipe. Not applicable for abstract sockets."}}, "additionalProperties": true, "type": "object"}}, "additionalProperties": true, "type": "object", "description": "Addresses specify either a logical or physical address and port, which are\n used to tell Envoy where to bind/listen, connect to upstream and find\n management servers.", "id": "envoy.api.v2.core.Address"}, "envoy.data.tap.v2alpha.Body": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"as_bytes": {"type": "string", "description": "Body data as bytes. By default, tap body data will be present in this field, as the proto\n `bytes` type can contain any valid byte."}, "as_string": {"type": "string", "description": "Body data as string. This field is only used when the :ref:`JSON_BODY_AS_STRING\n <envoy_api_enum_value_service.tap.v2alpha.OutputSink.Format.JSON_BODY_AS_STRING>` sink\n format type is selected. See the documentation for that option for why this is useful."}, "truncated": {"type": "boolean", "description": "Specifies whether body data has been truncated to fit within the specified\n :ref:`max_buffered_rx_bytes\n <envoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_rx_bytes>` and\n :ref:`max_buffered_tx_bytes\n <envoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_tx_bytes>` settings."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Tap common data]\n\nWrapper for tapped body data. This includes HTTP request/response body, transport socket received\n and transmitted data, etc.", "id": "envoy.data.tap.v2alpha.Body"}}}