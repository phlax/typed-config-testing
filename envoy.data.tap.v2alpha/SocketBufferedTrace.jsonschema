{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "trace_id": {
            "type": "string",
            "description": "Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used\n for long term stable uniqueness. Matches connection IDs used in Envoy logs."
        },
        "connection": {
            "properties": {
                "local_address": {
                    "$ref": "envoy.api.v2.core.Address",
                    "additionalProperties": true,
                    "description": "Local address."
                },
                "remote_address": {
                    "$ref": "envoy.api.v2.core.Address",
                    "additionalProperties": true,
                    "description": "Remote address."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Connection properties."
        },
        "events": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "description": "Timestamp for event.",
                        "format": "date-time"
                    },
                    "read": {
                        "properties": {
                            "data": {
                                "$ref": "envoy.data.tap.v2alpha.Body",
                                "additionalProperties": true,
                                "description": "Binary data read."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "write": {
                        "properties": {
                            "data": {
                                "$ref": "envoy.data.tap.v2alpha.Body",
                                "additionalProperties": true,
                                "description": "Binary data written."
                            },
                            "end_stream": {
                                "type": "boolean",
                                "description": "Stream was half closed after this write."
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "closed": {
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "description": "Event in a socket trace."
            },
            "type": "array",
            "description": "Sequence of observed events."
        },
        "read_truncated": {
            "type": "boolean",
            "description": "Set to true if read events were truncated due to the :ref:`max_buffered_rx_bytes\n \u003cenvoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_rx_bytes\u003e` setting."
        },
        "write_truncated": {
            "type": "boolean",
            "description": "Set to true if write events were truncated due to the :ref:`max_buffered_tx_bytes\n \u003cenvoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_tx_bytes\u003e` setting."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "Sequence of read/write events that constitute a buffered trace on a socket.\n [#next-free-field: 6]",
    "definitions": {
        "envoy.api.v2.core.Address": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "socket_address": {
                    "properties": {
                        "protocol": {
                            "enum": [
                                "TCP",
                                0,
                                "UDP",
                                1
                            ],
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "address": {
                            "type": "string",
                            "description": "The address for this socket. :ref:`Listeners \u003cconfig_listeners\u003e` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch \u003cenvoy_api_msg_listener.FilterChainMatch\u003e`.] When used\n within an upstream :ref:`BindConfig \u003cenvoy_api_msg_core.BindConfig\u003e`, the address\n controls the source address of outbound connections. For :ref:`clusters\n \u003cenvoy_api_msg_Cluster\u003e`, the cluster type determines whether the\n address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS\n (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized\n via :ref:`resolver_name \u003cenvoy_api_field_core.SocketAddress.resolver_name\u003e`."
                        },
                        "port_value": {
                            "type": "integer"
                        },
                        "named_port": {
                            "type": "string",
                            "description": "This is only valid if :ref:`resolver_name\n \u003cenvoy_api_field_core.SocketAddress.resolver_name\u003e` is specified below and the\n named resolver is capable of named port resolution."
                        },
                        "resolver_name": {
                            "type": "string",
                            "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime."
                        },
                        "ipv4_compat": {
                            "type": "boolean",
                            "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n \u003chttps://tools.ietf.org/html/rfc3493#page-11\u003e`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:\u003cIPv4-address\u003e``."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                },
                "pipe": {
                    "properties": {
                        "path": {
                            "type": "string",
                            "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."
                        },
                        "mode": {
                            "type": "integer",
                            "description": "The mode for the Pipe. Not applicable for abstract sockets."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Addresses specify either a logical or physical address and port, which are\n used to tell Envoy where to bind/listen, connect to upstream and find\n management servers.",
            "id": "envoy.api.v2.core.Address"
        },
        "envoy.data.tap.v2alpha.Body": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "as_bytes": {
                    "type": "string",
                    "description": "Body data as bytes. By default, tap body data will be present in this field, as the proto\n `bytes` type can contain any valid byte."
                },
                "as_string": {
                    "type": "string",
                    "description": "Body data as string. This field is only used when the :ref:`JSON_BODY_AS_STRING\n \u003cenvoy_api_enum_value_service.tap.v2alpha.OutputSink.Format.JSON_BODY_AS_STRING\u003e` sink\n format type is selected. See the documentation for that option for why this is useful."
                },
                "truncated": {
                    "type": "boolean",
                    "description": "Specifies whether body data has been truncated to fit within the specified\n :ref:`max_buffered_rx_bytes\n \u003cenvoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_rx_bytes\u003e` and\n :ref:`max_buffered_tx_bytes\n \u003cenvoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_tx_bytes\u003e` settings."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: Tap common data]\n\nWrapper for tapped body data. This includes HTTP request/response body, transport socket received\n and transmitted data, etc.",
            "id": "envoy.data.tap.v2alpha.Body"
        }
    }
}