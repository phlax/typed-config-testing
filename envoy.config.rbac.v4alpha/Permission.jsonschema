{"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/Permission", "definitions": {"Permission": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"and_rules": {"$ref": "#/definitions/envoy.config.rbac.v4alpha.Permission.Set", "additionalProperties": true, "description": "A set of rules that all must match in order to define the action."}, "or_rules": {"$ref": "#/definitions/envoy.config.rbac.v4alpha.Permission.Set", "additionalProperties": true, "description": "A set of rules where at least one must match in order to define the action."}, "any": {"type": "boolean", "description": "When any is set, it matches any action."}, "header": {"properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "safe_regex_match": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.RegexMatcher", "additionalProperties": true, "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "contains_match": {"type": "string", "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": "A header (or pseudo-header such as :path or :method) on the incoming HTTP request. Only\n available for HTTP request.\n Note: the pseudo-header :path includes the query and fragment string. Use the `url_path`\n field if you want to match the URL path without the query and fragment string."}, "url_path": {"properties": {"path": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.StringMatcher", "additionalProperties": true, "description": "The `path` must match the URL path portion of the :path header. The query and fragment\n string (if present) are removed in the URL path portion.\n For example, the path */data* will match the *:path* header */data#fragment?param=value*."}}, "additionalProperties": true, "type": "object", "description": "A URL path on the incoming HTTP request. Only available for HTTP."}, "destination_ip": {"properties": {"address_prefix": {"type": "string", "description": "IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``."}, "prefix_len": {"additionalProperties": true, "type": "integer", "description": "Length of prefix, e.g. 0, 32."}}, "additionalProperties": true, "type": "object", "description": "A CIDR block that describes the destination IP."}, "destination_port": {"type": "integer", "description": "A port number that describes the destination port connecting to."}, "metadata": {"properties": {"filter": {"type": "string", "description": "The filter name to retrieve the Struct from the Metadata."}, "path": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "If specified, use the key to retrieve the value in a Struct."}}, "additionalProperties": true, "type": "object", "description": "Specifies the segment in a path to retrieve value from Metadata.\n Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that\n if the segment key refers to a list, it has to be the last segment in a path."}, "type": "array", "description": "The path to retrieve the Value from the Struct."}, "value": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.ValueMatcher", "additionalProperties": true, "description": "The MetadataMatcher is matched if the value retrieved by path is matched to this value."}}, "additionalProperties": true, "type": "object", "description": "Metadata that describes additional information about the action."}, "not_rule": {"$ref": "#/definitions/Permission", "additionalProperties": true, "description": "Negates matching the provided permission. For instance, if the value of\n `not_rule` would match, this permission would not match. Conversely, if\n the value of `not_rule` would not match, this permission would match."}, "requested_server_name": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.StringMatcher", "additionalProperties": true, "description": "The request server from the client's connection request. This is\n typically TLS SNI.\n\n .. attention::\n\n   The behavior of this field may be affected by how Envoy is configured\n   as explained below.\n\n   * If the :ref:`TLS Inspector <config_listener_filters_tls_inspector>`\n     filter is not added, and if a `FilterChainMatch` is not defined for\n     the :ref:`server name\n     <envoy_api_field_config.listener.v4alpha.FilterChainMatch.server_names>`,\n     a TLS connection's requested SNI server name will be treated as if it\n     wasn't present.\n\n   * A :ref:`listener filter <arch_overview_listener_filters>` may\n     overwrite a connection's requested server name within Envoy.\n\n Please refer to :ref:`this FAQ entry <faq_how_to_setup_sni>` to learn to\n setup SNI."}}, "additionalProperties": true, "type": "object", "description": "Permission defines an action (or actions) that a principal can take.\n [#next-free-field: 11]", "id": "Permission"}, "envoy.config.rbac.v4alpha.Permission.Set": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"rules": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "$ref": "#/definitions/Permission"}, "type": "array"}}, "additionalProperties": true, "type": "object", "description": "Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,\n each are applied with the associated behavior.", "id": "envoy.config.rbac.v4alpha.Permission.Set"}, "envoy.type.matcher.v4alpha.RegexMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"google_re2": {"additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.", "id": "envoy.type.matcher.v4alpha.RegexMatcher"}, "envoy.type.matcher.v4alpha.StringMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"exact": {"type": "string", "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."}, "prefix": {"type": "string", "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"}, "suffix": {"type": "string", "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"}, "safe_regex": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.RegexMatcher", "additionalProperties": true, "description": "The input string must match the regular expression specified here."}, "contains": {"type": "string", "description": "The input string must have the substring specified here.\n Note: empty contains match is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc.def*"}, "ignore_case": {"type": "boolean", "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 8]", "id": "envoy.type.matcher.v4alpha.StringMatcher"}, "envoy.type.matcher.v4alpha.ValueMatcher": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"null_match": {"additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a NullValue."}, "double_match": {"properties": {"range": {"properties": {"start": {"type": "number", "description": "start of the range (inclusive)"}, "end": {"type": "number", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, the input double value must be in the range specified here.\n Note: The range is using half-open interval semantics [start, end)."}, "exact": {"type": "number", "description": "If specified, the input double value must be equal to the value specified here."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a double value and is\n matched to this field."}, "string_match": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.StringMatcher", "additionalProperties": true, "description": "If specified, a match occurs if and only if the target value is a string value and is\n matched to this field."}, "bool_match": {"type": "boolean", "description": "If specified, a match occurs if and only if the target value is a bool value and is equal\n to this field."}, "present_match": {"type": "boolean", "description": "If specified, value match will be performed based on whether the path is referring to a\n valid primitive value in the metadata. If the path is referring to a non-primitive value,\n the result is always not matched."}, "list_match": {"properties": {"one_of": {"$ref": "#/definitions/envoy.type.matcher.v4alpha.ValueMatcher", "additionalProperties": true, "description": "If specified, at least one of the values in the list must match the value specified."}}, "additionalProperties": true, "type": "object", "description": "If specified, a match occurs if and only if the target value is a list value and\n is matched to this field."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Value matcher]\n\nSpecifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.\n StructValue is not supported and is always not matched.\n [#next-free-field: 7]", "id": "envoy.type.matcher.v4alpha.ValueMatcher"}}}