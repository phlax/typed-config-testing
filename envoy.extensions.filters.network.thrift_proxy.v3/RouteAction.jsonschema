{"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"cluster": {"type": "string", "description": "Indicates a single upstream cluster to which the request should be routed\n to."}, "weighted_clusters": {"properties": {"clusters": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Name of the upstream cluster."}, "weight": {"additionalProperties": true, "type": "integer", "description": "When a request matches the route, the choice of an upstream cluster is determined by its\n weight. The sum of weights across all entries in the clusters array determines the total\n weight."}, "metadata_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v3/Metadata.jsonschema", "additionalProperties": true, "description": "Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in\n the upstream cluster with metadata matching what is set in this field, combined with what's\n provided in :ref:`RouteAction's metadata_match\n <envoy_api_field_extensions.filters.network.thrift_proxy.v3.RouteAction.metadata_match>`,\n will be considered. Values here will take precedence. Keys and values should be provided\n under the \"envoy.lb\" metadata key."}}, "additionalProperties": true, "type": "object"}, "type": "array", "description": "Specifies one or more upstream clusters associated with the route."}}, "additionalProperties": true, "type": "object", "description": "Multiple upstream clusters can be specified for a given route. The\n request is routed to one of the upstream clusters based on weights\n assigned to each cluster."}, "cluster_header": {"type": "string", "description": "Envoy will determine the cluster to route to by reading the value of the\n Thrift header named by cluster_header from the request headers. If the\n header is not found or the referenced cluster does not exist Envoy will\n respond with an unknown method exception or an internal error exception,\n respectively."}, "metadata_match": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.config.core.v3/Metadata.jsonschema", "additionalProperties": true, "description": "Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in\n the upstream cluster with metadata matching what is set in this field will be considered.\n Note that this will be merged with what's provided in :ref:`WeightedCluster.metadata_match\n <envoy_api_field_extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight.metadata_match>`,\n with values there taking precedence. Keys and values should be provided under the \"envoy.lb\"\n metadata key."}, "rate_limits": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"stage": {"additionalProperties": true, "type": "integer", "description": "Refers to the stage set in the filter. The rate limit configuration only\n applies to filters with the same stage number. The default stage number is\n 0.\n\n .. note::\n\n   The filter supports a range of 0 - 10 inclusively for stage numbers."}, "disable_key": {"type": "string", "description": "The key to be set in runtime to disable this rate limit configuration."}, "actions": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"source_cluster": {"additionalProperties": true, "type": "object", "description": "Rate limit on source cluster."}, "destination_cluster": {"additionalProperties": true, "type": "object", "description": "Rate limit on destination cluster."}, "request_headers": {"properties": {"header_name": {"type": "string", "description": "The header name to be queried from the request headers. The header\u2019s\n value is used to populate the value of the descriptor entry for the\n descriptor_key."}, "descriptor_key": {"type": "string", "description": "The key to use in the descriptor entry."}, "skip_if_absent": {"type": "boolean", "description": "If set to true, Envoy skips the descriptor while calling rate limiting service\n when header is not present in the request. By default it skips calling the\n rate limiting service if this header is not present in the request."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on request headers."}, "remote_address": {"additionalProperties": true, "type": "object", "description": "Rate limit on remote address."}, "generic_key": {"properties": {"descriptor_value": {"type": "string", "description": "The value to use in the descriptor entry."}, "descriptor_key": {"type": "string", "description": "An optional key to use in the descriptor entry. If not set it defaults\n to 'generic_key' as the descriptor key."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on a generic key."}, "header_value_match": {"properties": {"descriptor_value": {"type": "string", "description": "The value to use in the descriptor entry."}, "expect_match": {"additionalProperties": true, "type": "boolean", "description": "If set to true, the action will append a descriptor entry when the\n request matches the headers. If set to false, the action will append a\n descriptor entry when the request does not match the headers. The\n default value is true."}, "headers": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"name": {"type": "string", "description": "Specifies the name of the header in the request."}, "exact_match": {"type": "string", "description": "If specified, header match will be performed based on the value of the header."}, "safe_regex_match": {"properties": {"google_re2": {"properties": {"max_program_size": {"additionalProperties": true, "type": "integer", "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."}}, "additionalProperties": true, "type": "object", "description": "Google's RE2 regex engine."}, "regex": {"type": "string", "description": "The regex match string. The string must be supported by the configured engine."}}, "additionalProperties": true, "type": "object", "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."}, "range_match": {"properties": {"start": {"type": "string", "description": "start of the range (inclusive)"}, "end": {"type": "string", "description": "end of the range (exclusive)"}}, "additionalProperties": true, "type": "object", "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""}, "present_match": {"type": "boolean", "description": "If specified, header match will be performed based on whether the header is in the\n request."}, "prefix_match": {"type": "string", "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."}, "suffix_match": {"type": "string", "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."}, "contains_match": {"type": "string", "description": "If specified, header match will be performed based on whether the header value contains\n the given value or not.\n Note: empty contains match is not allowed, please use present_match instead.\n\n Examples:\n\n * The value *abcd* matches the value *xyzabcdpqr*, but not for *xyzbcdpqr*."}, "invert_match": {"type": "boolean", "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."}}, "additionalProperties": true, "type": "object", "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   <envoy_api_field_config.route.v3.HeaderMatcher.present_match>`. i.e, a request that has the :ref:`name\n   <envoy_api_field_config.route.v3.HeaderMatcher.name>` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 13]"}, "type": "array", "description": "Specifies a set of headers that the rate limit action should match\n on. The action will check the request\u2019s headers against all the\n specified headers in the config. A match will happen if all the\n headers in the config are present in the request with the same values\n (or based on presence if the value field is not in the config)."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on the existence of request headers."}, "dynamic_metadata": {"properties": {"descriptor_key": {"type": "string", "description": "The key to use in the descriptor entry."}, "metadata_key": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.metadata.v3/MetadataKey.jsonschema", "additionalProperties": true, "description": "Metadata struct that defines the key and path to retrieve the string value. A match will\n only happen if the value in the dynamic metadata is of type string."}, "default_value": {"type": "string", "description": "An optional value to use if *metadata_key* is empty. If not set and\n no value is present under the metadata_key then no descriptor is generated."}}, "additionalProperties": true, "type": "object", "description": "Rate limit on dynamic metadata.\n\n .. attention::\n   This field has been deprecated in favor of the :ref:`metadata <envoy_api_field_config.route.v3.RateLimit.Action.metadata>` field"}, "metadata": {"properties": {"descriptor_key": {"type": "string", "description": "The key to use in the descriptor entry."}, "metadata_key": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.metadata.v3/MetadataKey.jsonschema", "additionalProperties": true, "description": "Metadata struct that defines the key and path to retrieve the string value. A match will\n only happen if the value in the metadata is of type string."}, "default_value": {"type": "string", "description": "An optional value to use if *metadata_key* is empty. If not set and\n no value is present under the metadata_key then no descriptor is generated."}, "source": {"enum": ["DYNAMIC", 0, "ROUTE_ENTRY", 1], "oneOf": [{"type": "string"}, {"type": "integer"}], "description": "Source of metadata"}}, "additionalProperties": true, "type": "object", "description": "Rate limit on metadata."}, "extension": {"properties": {"name": {"type": "string", "description": "The name of an extension. This is not used to select the extension, instead\n it serves the role of an opaque identifier."}, "typed_config": {"properties": {"type_url": {"type": "string", "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."}, "value": {"type": "string", "description": "Must be a valid serialized protocol buffer of the above specified type."}}, "additionalProperties": true, "type": "object", "description": "The typed config for the extension. The type URL will be used to identify\n the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,\n the inner type URL of *TypedStruct* will be utilized. See the\n :ref:`extension configuration overview\n <config_overview_extension_configuration>` for further details."}}, "additionalProperties": true, "type": "object", "description": "Rate limit descriptor extension. See the rate limit descriptor extensions documentation."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 10]"}, "type": "array", "description": "A list of actions that are to be applied for this rate limit configuration.\n Order matters as the actions are processed sequentially and the descriptor\n is composed by appending descriptor entries in that sequence. If an action\n cannot append a descriptor entry, no descriptor is generated for the\n configuration. See :ref:`composing actions\n <config_http_filters_rate_limit_composing_actions>` for additional documentation."}, "limit": {"properties": {"dynamic_metadata": {"properties": {"metadata_key": {"$ref": "https://phlax.github.io/typed-config-testing/envoy.type.metadata.v3/MetadataKey.jsonschema", "additionalProperties": true, "description": "Metadata struct that defines the key and path to retrieve the struct value.\n The value must be a struct containing an integer \"requests_per_unit\" property\n and a \"unit\" property with a value parseable to :ref:`RateLimitUnit\n enum <envoy_api_enum_type.v3.RateLimitUnit>`"}}, "additionalProperties": true, "type": "object", "description": "Limit override from dynamic metadata."}}, "additionalProperties": true, "type": "object", "description": "An optional limit override to be appended to the descriptor produced by this\n rate limit configuration. If the override value is invalid or cannot be resolved\n from metadata, no override is provided. See :ref:`rate limit override\n <config_http_filters_rate_limit_rate_limit_override>` for more information."}}, "additionalProperties": true, "type": "object", "description": "Global rate limiting :ref:`architecture overview <arch_overview_global_rate_limit>`.\n Also applies to Local rate limiting :ref:`using descriptors <config_http_filters_local_rate_limit_descriptors>`."}, "type": "array", "description": "Specifies a set of rate limit configurations that could be applied to the route.\n N.B. Thrift service or method name matching can be achieved by specifying a RequestHeaders\n action with the header name \":method-name\"."}, "strip_service_name": {"type": "boolean", "description": "Strip the service prefix from the method name, if there's a prefix. For\n example, the method call Service:method would end up being just method."}}, "additionalProperties": true, "type": "object", "description": "[#next-free-field: 7]", "definitions": {"envoy.config.core.v3.Metadata": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"filter_metadata": {"additionalProperties": {"properties": {"fields": {"additionalProperties": {"additionalProperties": true, "type": "object"}, "type": "object", "description": "Unordered map of dynamically typed values."}}, "additionalProperties": true, "type": "object"}, "type": "object", "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*\n namespace is reserved for Envoy's built-in filters."}}, "additionalProperties": true, "type": "object", "description": "Metadata provides additional inputs to filters based on matched listeners,\n filter chains, routes and endpoints. It is structured as a map, usually from\n filter name (in reverse DNS format) to metadata specific to the filter. Metadata\n key-values for a filter are merged as connection and request handling occurs,\n with later values for the same key overriding earlier values.\n\n An example use of metadata is providing additional values to\n http_connection_manager in the envoy.http_connection_manager.access_log\n namespace.\n\n Another example use of metadata is to per service config info in cluster metadata, which may get\n consumed by multiple filters.\n\n For load balancing, Metadata provides a means to subset cluster endpoints.\n Endpoints have a Metadata object associated and routes contain a Metadata\n object to match against. There are some well defined metadata used today for\n this purpose:\n\n * ``{\"envoy.lb\": {\"canary\": <bool> }}`` This indicates the canary status of an\n   endpoint and is also used during header processing\n   (x-envoy-upstream-canary) and for stats purposes.\n [#next-major-version: move to type/metadata/v2]", "id": "envoy.config.core.v3.Metadata"}, "envoy.type.metadata.v3.MetadataKey": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "The key name of Metadata to retrieve the Struct from the metadata.\n Typically, it represents a builtin subsystem or custom extension."}, "path": {"items": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"key": {"type": "string", "description": "If specified, use the key to retrieve the value in a Struct."}}, "additionalProperties": true, "type": "object", "description": "Specifies the segment in a path to retrieve value from Metadata.\n Currently it is only supported to specify the key, i.e. field name, as one segment of a path."}, "type": "array", "description": "The path to retrieve the Value from the Struct. It can be a prefix or a full path,\n e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,\n which depends on the particular scenario.\n\n Note: Due to that only the key type segment is supported, the path can not specify a list\n unless the list is the last segment."}}, "additionalProperties": true, "type": "object", "description": "[#protodoc-title: Metadata]\n\nMetadataKey provides a general interface using `key` and `path` to retrieve value from\n :ref:`Metadata <envoy_api_msg_config.core.v3.Metadata>`.\n\n For example, for the following Metadata:\n\n .. code-block:: yaml\n\n    filter_metadata:\n      envoy.xxx:\n        prop:\n          foo: bar\n          xyz:\n            hello: envoy\n\n The following MetadataKey will retrieve a string value \"bar\" from the Metadata.\n\n .. code-block:: yaml\n\n    key: envoy.xxx\n    path:\n    - key: prop\n    - key: foo", "id": "envoy.type.metadata.v3.MetadataKey"}}}