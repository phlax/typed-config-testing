{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "typed_config": {
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Config specific to the cache storage implementation."
        },
        "allowed_vary_headers": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "$ref": "envoy.type.matcher.StringMatcher"
            },
            "type": "array",
            "description": "List of matching rules that defines allowed *Vary* headers.\n\n The *vary* response header holds a list of header names that affect the\n contents of a response, as described by\n https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.\n\n During insertion, *allowed_vary_headers* acts as a allowlist: if a\n response's *vary* header mentions any header names that aren't matched by any rules in\n *allowed_vary_headers*, that response will not be cached.\n\n During lookup, *allowed_vary_headers* controls what request headers will be\n sent to the cache storage implementation."
        },
        "key_creator_params": {
            "properties": {
                "exclude_scheme": {
                    "type": "boolean",
                    "description": "If true, exclude the URL scheme from the cache key. Set to true if your origins always\n produce the same response for http and https requests."
                },
                "exclude_host": {
                    "type": "boolean",
                    "description": "If true, exclude the host from the cache key. Set to true if your origins' responses don't\n ever depend on host."
                },
                "query_parameters_included": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "envoy.api.v2.route.QueryParameterMatcher"
                    },
                    "type": "array",
                    "description": "If *query_parameters_included* is nonempty, only query parameters matched\n by one or more of its matchers are included in the cache key. Any other\n query params will not affect cache lookup."
                },
                "query_parameters_excluded": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "envoy.api.v2.route.QueryParameterMatcher"
                    },
                    "type": "array",
                    "description": "If *query_parameters_excluded* is nonempty, query parameters matched by one\n or more of its matchers are excluded from the cache key (even if also\n matched by *query_parameters_included*), and will not affect cache lookup."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#not-implemented-hide:]\n \u003cTODO(toddmgreer) implement key customization\u003e\n\n Modifies cache key creation by restricting which parts of the URL are included."
        },
        "max_body_bytes": {
            "type": "integer",
            "description": "[#not-implemented-hide:]\n \u003cTODO(toddmgreer) implement size limit\u003e\n\n Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache\n storage implementation may have its own limit beyond which it will reject insertions)."
        }
    },
    "additionalProperties": true,
    "type": "object",
    "description": "[#protodoc-title: HTTP Cache Filter]\n [#extension: envoy.filters.http.cache]",
    "definitions": {
        "envoy.api.v2.route.QueryParameterMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the name of a key that must be present in the requested\n *path*'s query string."
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the key. If the value is absent, a request\n that contains the key in its query string will match, whether the\n key appears with a value (e.g., \"?debug=true\") or not (e.g., \"?debug\")\n\n ..attention::\n   This field is deprecated. Use an `exact` match inside the `string_match` field."
                },
                "regex": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Specifies whether the query parameter value is a regular expression.\n Defaults to false. The entire query parameter value (i.e., the part to\n the right of the equals sign in \"key=value\") must match the regex.\n E.g., the regex ``\\d+$`` will match *123* but not *a123* or *123a*.\n\n ..attention::\n   This field is deprecated. Use a `safe_regex` match inside the `string_match` field."
                },
                "string_match": {
                    "$ref": "envoy.type.matcher.StringMatcher",
                    "additionalProperties": true,
                    "description": "Specifies whether a query parameter value should match against a string."
                },
                "present_match": {
                    "type": "boolean",
                    "description": "Specifies whether a query parameter should be present."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Query parameter matching treats the query string of a request's :path header\n as an ampersand-separated list of keys and/or key=value elements.\n [#next-free-field: 7]",
            "id": "envoy.api.v2.route.QueryParameterMatcher"
        },
        "envoy.type.matcher.StringMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                },
                "prefix": {
                    "type": "string",
                    "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                },
                "suffix": {
                    "type": "string",
                    "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                },
                "regex": {
                    "type": "string",
                    "description": "The input string must match the regular expression specified here.\n The regex grammar is defined `here\n \u003chttps://en.cppreference.com/w/cpp/regex/ecmascript\u003e`_.\n\n Examples:\n\n * The regex ``\\d{3}`` matches the value *123*\n * The regex ``\\d{3}`` does not match the value *1234*\n * The regex ``\\d{3}`` does not match the value *123.456*\n\n .. attention::\n   This field has been deprecated in favor of `safe_regex` as it is not safe for use with\n   untrusted input in all cases."
                },
                "safe_regex": {
                    "properties": {
                        "google_re2": {
                            "properties": {
                                "max_program_size": {
                                    "additionalProperties": true,
                                    "type": "integer",
                                    "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Google's RE2 regex engine."
                        },
                        "regex": {
                            "type": "string",
                            "description": "The regex match string. The string must be supported by the configured engine."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The input string must match the regular expression specified here."
                },
                "ignore_case": {
                    "type": "boolean",
                    "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "[#protodoc-title: String matcher]\n\nSpecifies the way to match a string.\n [#next-free-field: 7]",
            "id": "envoy.type.matcher.StringMatcher"
        }
    }
}